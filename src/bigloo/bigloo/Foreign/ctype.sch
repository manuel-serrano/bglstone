;; ==========================================================
;; Class accessors
;; Bigloo (4.7a)
;; Inria -- Sophia Antipolis     Thu Mar 6 07:34:14 AM CET 2025 
;; (bigloo -classgen Foreign/ctype.scm)
;; ==========================================================

;; The directives
(directives

;; calias
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-calias::calias id1314::symbol name1315::obj size1316::obj class1317::obj coerce-to1318::obj parents1319::obj init?1320::bool magic?1321::bool $1322::obj alias1323::obj pointed-to-by1324::obj tvector1325::obj location1326::obj import-location1327::obj array?1328::bool)
    (inline calias?::bool ::obj)
    (calias-nil::calias)
    (inline calias-array?::bool ::calias)
    (inline calias-array?-set! ::calias ::bool)
    (inline calias-import-location::obj ::calias)
    (inline calias-import-location-set! ::calias ::obj)
    (inline calias-location::obj ::calias)
    (inline calias-location-set! ::calias ::obj)
    (inline calias-tvector::obj ::calias)
    (inline calias-tvector-set! ::calias ::obj)
    (inline calias-pointed-to-by::obj ::calias)
    (inline calias-pointed-to-by-set! ::calias ::obj)
    (inline calias-alias::obj ::calias)
    (inline calias-alias-set! ::calias ::obj)
    (inline calias-$::obj ::calias)
    (inline calias-$-set! ::calias ::obj)
    (inline calias-magic?::bool ::calias)
    (inline calias-magic?-set! ::calias ::bool)
    (inline calias-init?::bool ::calias)
    (inline calias-init?-set! ::calias ::bool)
    (inline calias-parents::obj ::calias)
    (inline calias-parents-set! ::calias ::obj)
    (inline calias-coerce-to::obj ::calias)
    (inline calias-coerce-to-set! ::calias ::obj)
    (inline calias-class::obj ::calias)
    (inline calias-class-set! ::calias ::obj)
    (inline calias-size::obj ::calias)
    (inline calias-size-set! ::calias ::obj)
    (inline calias-name::obj ::calias)
    (inline calias-name-set! ::calias ::obj)
    (inline calias-id::symbol ::calias))))

;; cenum
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cenum::cenum id1296::symbol name1297::obj size1298::obj class1299::obj coerce-to1300::obj parents1301::obj init?1302::bool magic?1303::bool $1304::obj alias1305::obj pointed-to-by1306::obj tvector1307::obj location1308::obj import-location1309::obj btype1310::type literals1311::obj)
    (inline cenum?::bool ::obj)
    (cenum-nil::cenum)
    (inline cenum-literals::obj ::cenum)
    (inline cenum-btype::type ::cenum)
    (inline cenum-import-location::obj ::cenum)
    (inline cenum-import-location-set! ::cenum ::obj)
    (inline cenum-location::obj ::cenum)
    (inline cenum-location-set! ::cenum ::obj)
    (inline cenum-tvector::obj ::cenum)
    (inline cenum-tvector-set! ::cenum ::obj)
    (inline cenum-pointed-to-by::obj ::cenum)
    (inline cenum-pointed-to-by-set! ::cenum ::obj)
    (inline cenum-alias::obj ::cenum)
    (inline cenum-alias-set! ::cenum ::obj)
    (inline cenum-$::obj ::cenum)
    (inline cenum-$-set! ::cenum ::obj)
    (inline cenum-magic?::bool ::cenum)
    (inline cenum-magic?-set! ::cenum ::bool)
    (inline cenum-init?::bool ::cenum)
    (inline cenum-init?-set! ::cenum ::bool)
    (inline cenum-parents::obj ::cenum)
    (inline cenum-parents-set! ::cenum ::obj)
    (inline cenum-coerce-to::obj ::cenum)
    (inline cenum-coerce-to-set! ::cenum ::obj)
    (inline cenum-class::obj ::cenum)
    (inline cenum-class-set! ::cenum ::obj)
    (inline cenum-size::obj ::cenum)
    (inline cenum-size-set! ::cenum ::obj)
    (inline cenum-name::obj ::cenum)
    (inline cenum-name-set! ::cenum ::obj)
    (inline cenum-id::symbol ::cenum))))

;; copaque
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-copaque::copaque id1280::symbol name1281::obj size1282::obj class1283::obj coerce-to1284::obj parents1285::obj init?1286::bool magic?1287::bool $1288::obj alias1289::obj pointed-to-by1290::obj tvector1291::obj location1292::obj import-location1293::obj btype1294::type)
    (inline copaque?::bool ::obj)
    (copaque-nil::copaque)
    (inline copaque-btype::type ::copaque)
    (inline copaque-import-location::obj ::copaque)
    (inline copaque-import-location-set! ::copaque ::obj)
    (inline copaque-location::obj ::copaque)
    (inline copaque-location-set! ::copaque ::obj)
    (inline copaque-tvector::obj ::copaque)
    (inline copaque-tvector-set! ::copaque ::obj)
    (inline copaque-pointed-to-by::obj ::copaque)
    (inline copaque-pointed-to-by-set! ::copaque ::obj)
    (inline copaque-alias::obj ::copaque)
    (inline copaque-alias-set! ::copaque ::obj)
    (inline copaque-$::obj ::copaque)
    (inline copaque-$-set! ::copaque ::obj)
    (inline copaque-magic?::bool ::copaque)
    (inline copaque-magic?-set! ::copaque ::bool)
    (inline copaque-init?::bool ::copaque)
    (inline copaque-init?-set! ::copaque ::bool)
    (inline copaque-parents::obj ::copaque)
    (inline copaque-parents-set! ::copaque ::obj)
    (inline copaque-coerce-to::obj ::copaque)
    (inline copaque-coerce-to-set! ::copaque ::obj)
    (inline copaque-class::obj ::copaque)
    (inline copaque-class-set! ::copaque ::obj)
    (inline copaque-size::obj ::copaque)
    (inline copaque-size-set! ::copaque ::obj)
    (inline copaque-name::obj ::copaque)
    (inline copaque-name-set! ::copaque ::obj)
    (inline copaque-id::symbol ::copaque))))

;; cfunction
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cfunction::cfunction id1261::symbol name1262::obj size1263::obj class1264::obj coerce-to1265::obj parents1266::obj init?1267::bool magic?1268::bool $1269::obj alias1270::obj pointed-to-by1271::obj tvector1272::obj location1273::obj import-location1274::obj btype1275::type arity1276::long type-res1277::type type-args1278::obj)
    (inline cfunction?::bool ::obj)
    (cfunction-nil::cfunction)
    (inline cfunction-type-args::obj ::cfunction)
    (inline cfunction-type-res::type ::cfunction)
    (inline cfunction-arity::long ::cfunction)
    (inline cfunction-btype::type ::cfunction)
    (inline cfunction-import-location::obj ::cfunction)
    (inline cfunction-import-location-set! ::cfunction ::obj)
    (inline cfunction-location::obj ::cfunction)
    (inline cfunction-location-set! ::cfunction ::obj)
    (inline cfunction-tvector::obj ::cfunction)
    (inline cfunction-tvector-set! ::cfunction ::obj)
    (inline cfunction-pointed-to-by::obj ::cfunction)
    (inline cfunction-pointed-to-by-set! ::cfunction ::obj)
    (inline cfunction-alias::obj ::cfunction)
    (inline cfunction-alias-set! ::cfunction ::obj)
    (inline cfunction-$::obj ::cfunction)
    (inline cfunction-$-set! ::cfunction ::obj)
    (inline cfunction-magic?::bool ::cfunction)
    (inline cfunction-magic?-set! ::cfunction ::bool)
    (inline cfunction-init?::bool ::cfunction)
    (inline cfunction-init?-set! ::cfunction ::bool)
    (inline cfunction-parents::obj ::cfunction)
    (inline cfunction-parents-set! ::cfunction ::obj)
    (inline cfunction-coerce-to::obj ::cfunction)
    (inline cfunction-coerce-to-set! ::cfunction ::obj)
    (inline cfunction-class::obj ::cfunction)
    (inline cfunction-class-set! ::cfunction ::obj)
    (inline cfunction-size::obj ::cfunction)
    (inline cfunction-size-set! ::cfunction ::obj)
    (inline cfunction-name::obj ::cfunction)
    (inline cfunction-name-set! ::cfunction ::obj)
    (inline cfunction-id::symbol ::cfunction))))

;; cptr
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cptr::cptr id1243::symbol name1244::obj size1245::obj class1246::obj coerce-to1247::obj parents1248::obj init?1249::bool magic?1250::bool $1251::obj alias1252::obj pointed-to-by1253::obj tvector1254::obj location1255::obj import-location1256::obj btype1257::type point-to1258::type array?1259::bool)
    (inline cptr?::bool ::obj)
    (cptr-nil::cptr)
    (inline cptr-array?::bool ::cptr)
    (inline cptr-point-to::type ::cptr)
    (inline cptr-btype::type ::cptr)
    (inline cptr-import-location::obj ::cptr)
    (inline cptr-import-location-set! ::cptr ::obj)
    (inline cptr-location::obj ::cptr)
    (inline cptr-location-set! ::cptr ::obj)
    (inline cptr-tvector::obj ::cptr)
    (inline cptr-tvector-set! ::cptr ::obj)
    (inline cptr-pointed-to-by::obj ::cptr)
    (inline cptr-pointed-to-by-set! ::cptr ::obj)
    (inline cptr-alias::obj ::cptr)
    (inline cptr-alias-set! ::cptr ::obj)
    (inline cptr-$::obj ::cptr)
    (inline cptr-$-set! ::cptr ::obj)
    (inline cptr-magic?::bool ::cptr)
    (inline cptr-magic?-set! ::cptr ::bool)
    (inline cptr-init?::bool ::cptr)
    (inline cptr-init?-set! ::cptr ::bool)
    (inline cptr-parents::obj ::cptr)
    (inline cptr-parents-set! ::cptr ::obj)
    (inline cptr-coerce-to::obj ::cptr)
    (inline cptr-coerce-to-set! ::cptr ::obj)
    (inline cptr-class::obj ::cptr)
    (inline cptr-class-set! ::cptr ::obj)
    (inline cptr-size::obj ::cptr)
    (inline cptr-size-set! ::cptr ::obj)
    (inline cptr-name::obj ::cptr)
    (inline cptr-name-set! ::cptr ::obj)
    (inline cptr-id::symbol ::cptr))))

;; cstruct
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cstruct::cstruct id1225::symbol name1226::obj size1227::obj class1228::obj coerce-to1229::obj parents1230::obj init?1231::bool magic?1232::bool $1233::obj alias1234::obj pointed-to-by1235::obj tvector1236::obj location1237::obj import-location1238::obj struct?1239::bool fields1240::obj cstruct*1241::obj)
    (inline cstruct?::bool ::obj)
    (cstruct-nil::cstruct)
    (inline cstruct-cstruct*::obj ::cstruct)
    (inline cstruct-cstruct*-set! ::cstruct ::obj)
    (inline cstruct-fields::obj ::cstruct)
    (inline cstruct-struct?::bool ::cstruct)
    (inline cstruct-import-location::obj ::cstruct)
    (inline cstruct-import-location-set! ::cstruct ::obj)
    (inline cstruct-location::obj ::cstruct)
    (inline cstruct-location-set! ::cstruct ::obj)
    (inline cstruct-tvector::obj ::cstruct)
    (inline cstruct-tvector-set! ::cstruct ::obj)
    (inline cstruct-pointed-to-by::obj ::cstruct)
    (inline cstruct-pointed-to-by-set! ::cstruct ::obj)
    (inline cstruct-alias::obj ::cstruct)
    (inline cstruct-alias-set! ::cstruct ::obj)
    (inline cstruct-$::obj ::cstruct)
    (inline cstruct-$-set! ::cstruct ::obj)
    (inline cstruct-magic?::bool ::cstruct)
    (inline cstruct-magic?-set! ::cstruct ::bool)
    (inline cstruct-init?::bool ::cstruct)
    (inline cstruct-init?-set! ::cstruct ::bool)
    (inline cstruct-parents::obj ::cstruct)
    (inline cstruct-parents-set! ::cstruct ::obj)
    (inline cstruct-coerce-to::obj ::cstruct)
    (inline cstruct-coerce-to-set! ::cstruct ::obj)
    (inline cstruct-class::obj ::cstruct)
    (inline cstruct-class-set! ::cstruct ::obj)
    (inline cstruct-size::obj ::cstruct)
    (inline cstruct-size-set! ::cstruct ::obj)
    (inline cstruct-name::obj ::cstruct)
    (inline cstruct-name-set! ::cstruct ::obj)
    (inline cstruct-id::symbol ::cstruct))))

;; cstruct*
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cstruct*::cstruct* id1208::symbol name1209::obj size1210::obj class1211::obj coerce-to1212::obj parents1213::obj init?1214::bool magic?1215::bool $1216::obj alias1217::obj pointed-to-by1218::obj tvector1219::obj location1220::obj import-location1221::obj btype1222::type cstruct1223::cstruct)
    (inline cstruct*?::bool ::obj)
    (cstruct*-nil::cstruct*)
    (inline cstruct*-cstruct::cstruct ::cstruct*)
    (inline cstruct*-btype::type ::cstruct*)
    (inline cstruct*-import-location::obj ::cstruct*)
    (inline cstruct*-import-location-set! ::cstruct* ::obj)
    (inline cstruct*-location::obj ::cstruct*)
    (inline cstruct*-location-set! ::cstruct* ::obj)
    (inline cstruct*-tvector::obj ::cstruct*)
    (inline cstruct*-tvector-set! ::cstruct* ::obj)
    (inline cstruct*-pointed-to-by::obj ::cstruct*)
    (inline cstruct*-pointed-to-by-set! ::cstruct* ::obj)
    (inline cstruct*-alias::obj ::cstruct*)
    (inline cstruct*-alias-set! ::cstruct* ::obj)
    (inline cstruct*-$::obj ::cstruct*)
    (inline cstruct*-$-set! ::cstruct* ::obj)
    (inline cstruct*-magic?::bool ::cstruct*)
    (inline cstruct*-magic?-set! ::cstruct* ::bool)
    (inline cstruct*-init?::bool ::cstruct*)
    (inline cstruct*-init?-set! ::cstruct* ::bool)
    (inline cstruct*-parents::obj ::cstruct*)
    (inline cstruct*-parents-set! ::cstruct* ::obj)
    (inline cstruct*-coerce-to::obj ::cstruct*)
    (inline cstruct*-coerce-to-set! ::cstruct* ::obj)
    (inline cstruct*-class::obj ::cstruct*)
    (inline cstruct*-class-set! ::cstruct* ::obj)
    (inline cstruct*-size::obj ::cstruct*)
    (inline cstruct*-size-set! ::cstruct* ::obj)
    (inline cstruct*-name::obj ::cstruct*)
    (inline cstruct*-name-set! ::cstruct* ::obj)
    (inline cstruct*-id::symbol ::cstruct*)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; calias
(define-inline (make-calias::calias id1314::symbol name1315::obj size1316::obj class1317::obj coerce-to1318::obj parents1319::obj init?1320::bool magic?1321::bool $1322::obj alias1323::obj pointed-to-by1324::obj tvector1325::obj location1326::obj import-location1327::obj array?1328::bool) (instantiate::calias (id id1314) (name name1315) (size size1316) (class class1317) (coerce-to coerce-to1318) (parents parents1319) (init? init?1320) (magic? magic?1321) ($ $1322) (alias alias1323) (pointed-to-by pointed-to-by1324) (tvector tvector1325) (location location1326) (import-location import-location1327) (array? array?1328)))
(define-inline (calias?::bool obj::obj) ((@ isa? __object) obj (@ calias foreign_ctype)))
(define (calias-nil::calias) (class-nil (@ calias foreign_ctype)))
(define-inline (calias-array?::bool o::calias) (-> |#!bigloo_wallow| o array?))
(define-inline (calias-array?-set! o::calias v::bool) (set! (-> |#!bigloo_wallow| o array?) v))
(define-inline (calias-import-location::obj o::calias) (-> |#!bigloo_wallow| o import-location))
(define-inline (calias-import-location-set! o::calias v::obj) (set! (-> |#!bigloo_wallow| o import-location) v))
(define-inline (calias-location::obj o::calias) (-> |#!bigloo_wallow| o location))
(define-inline (calias-location-set! o::calias v::obj) (set! (-> |#!bigloo_wallow| o location) v))
(define-inline (calias-tvector::obj o::calias) (-> |#!bigloo_wallow| o tvector))
(define-inline (calias-tvector-set! o::calias v::obj) (set! (-> |#!bigloo_wallow| o tvector) v))
(define-inline (calias-pointed-to-by::obj o::calias) (-> |#!bigloo_wallow| o pointed-to-by))
(define-inline (calias-pointed-to-by-set! o::calias v::obj) (set! (-> |#!bigloo_wallow| o pointed-to-by) v))
(define-inline (calias-alias::obj o::calias) (-> |#!bigloo_wallow| o alias))
(define-inline (calias-alias-set! o::calias v::obj) (set! (-> |#!bigloo_wallow| o alias) v))
(define-inline (calias-$::obj o::calias) (-> |#!bigloo_wallow| o $))
(define-inline (calias-$-set! o::calias v::obj) (set! (-> |#!bigloo_wallow| o $) v))
(define-inline (calias-magic?::bool o::calias) (-> |#!bigloo_wallow| o magic?))
(define-inline (calias-magic?-set! o::calias v::bool) (set! (-> |#!bigloo_wallow| o magic?) v))
(define-inline (calias-init?::bool o::calias) (-> |#!bigloo_wallow| o init?))
(define-inline (calias-init?-set! o::calias v::bool) (set! (-> |#!bigloo_wallow| o init?) v))
(define-inline (calias-parents::obj o::calias) (-> |#!bigloo_wallow| o parents))
(define-inline (calias-parents-set! o::calias v::obj) (set! (-> |#!bigloo_wallow| o parents) v))
(define-inline (calias-coerce-to::obj o::calias) (-> |#!bigloo_wallow| o coerce-to))
(define-inline (calias-coerce-to-set! o::calias v::obj) (set! (-> |#!bigloo_wallow| o coerce-to) v))
(define-inline (calias-class::obj o::calias) (-> |#!bigloo_wallow| o class))
(define-inline (calias-class-set! o::calias v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (calias-size::obj o::calias) (-> |#!bigloo_wallow| o size))
(define-inline (calias-size-set! o::calias v::obj) (set! (-> |#!bigloo_wallow| o size) v))
(define-inline (calias-name::obj o::calias) (-> |#!bigloo_wallow| o name))
(define-inline (calias-name-set! o::calias v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (calias-id::symbol o::calias) (-> |#!bigloo_wallow| o id))
(define-inline (calias-id-set! o::calias v::symbol) (set! (-> |#!bigloo_wallow| o id) v))

;; cenum
(define-inline (make-cenum::cenum id1296::symbol name1297::obj size1298::obj class1299::obj coerce-to1300::obj parents1301::obj init?1302::bool magic?1303::bool $1304::obj alias1305::obj pointed-to-by1306::obj tvector1307::obj location1308::obj import-location1309::obj btype1310::type literals1311::obj) (instantiate::cenum (id id1296) (name name1297) (size size1298) (class class1299) (coerce-to coerce-to1300) (parents parents1301) (init? init?1302) (magic? magic?1303) ($ $1304) (alias alias1305) (pointed-to-by pointed-to-by1306) (tvector tvector1307) (location location1308) (import-location import-location1309) (btype btype1310) (literals literals1311)))
(define-inline (cenum?::bool obj::obj) ((@ isa? __object) obj (@ cenum foreign_ctype)))
(define (cenum-nil::cenum) (class-nil (@ cenum foreign_ctype)))
(define-inline (cenum-literals::obj o::cenum) (-> |#!bigloo_wallow| o literals))
(define-inline (cenum-literals-set! o::cenum v::obj) (set! (-> |#!bigloo_wallow| o literals) v))
(define-inline (cenum-btype::type o::cenum) (-> |#!bigloo_wallow| o btype))
(define-inline (cenum-btype-set! o::cenum v::type) (set! (-> |#!bigloo_wallow| o btype) v))
(define-inline (cenum-import-location::obj o::cenum) (-> |#!bigloo_wallow| o import-location))
(define-inline (cenum-import-location-set! o::cenum v::obj) (set! (-> |#!bigloo_wallow| o import-location) v))
(define-inline (cenum-location::obj o::cenum) (-> |#!bigloo_wallow| o location))
(define-inline (cenum-location-set! o::cenum v::obj) (set! (-> |#!bigloo_wallow| o location) v))
(define-inline (cenum-tvector::obj o::cenum) (-> |#!bigloo_wallow| o tvector))
(define-inline (cenum-tvector-set! o::cenum v::obj) (set! (-> |#!bigloo_wallow| o tvector) v))
(define-inline (cenum-pointed-to-by::obj o::cenum) (-> |#!bigloo_wallow| o pointed-to-by))
(define-inline (cenum-pointed-to-by-set! o::cenum v::obj) (set! (-> |#!bigloo_wallow| o pointed-to-by) v))
(define-inline (cenum-alias::obj o::cenum) (-> |#!bigloo_wallow| o alias))
(define-inline (cenum-alias-set! o::cenum v::obj) (set! (-> |#!bigloo_wallow| o alias) v))
(define-inline (cenum-$::obj o::cenum) (-> |#!bigloo_wallow| o $))
(define-inline (cenum-$-set! o::cenum v::obj) (set! (-> |#!bigloo_wallow| o $) v))
(define-inline (cenum-magic?::bool o::cenum) (-> |#!bigloo_wallow| o magic?))
(define-inline (cenum-magic?-set! o::cenum v::bool) (set! (-> |#!bigloo_wallow| o magic?) v))
(define-inline (cenum-init?::bool o::cenum) (-> |#!bigloo_wallow| o init?))
(define-inline (cenum-init?-set! o::cenum v::bool) (set! (-> |#!bigloo_wallow| o init?) v))
(define-inline (cenum-parents::obj o::cenum) (-> |#!bigloo_wallow| o parents))
(define-inline (cenum-parents-set! o::cenum v::obj) (set! (-> |#!bigloo_wallow| o parents) v))
(define-inline (cenum-coerce-to::obj o::cenum) (-> |#!bigloo_wallow| o coerce-to))
(define-inline (cenum-coerce-to-set! o::cenum v::obj) (set! (-> |#!bigloo_wallow| o coerce-to) v))
(define-inline (cenum-class::obj o::cenum) (-> |#!bigloo_wallow| o class))
(define-inline (cenum-class-set! o::cenum v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (cenum-size::obj o::cenum) (-> |#!bigloo_wallow| o size))
(define-inline (cenum-size-set! o::cenum v::obj) (set! (-> |#!bigloo_wallow| o size) v))
(define-inline (cenum-name::obj o::cenum) (-> |#!bigloo_wallow| o name))
(define-inline (cenum-name-set! o::cenum v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (cenum-id::symbol o::cenum) (-> |#!bigloo_wallow| o id))
(define-inline (cenum-id-set! o::cenum v::symbol) (set! (-> |#!bigloo_wallow| o id) v))

;; copaque
(define-inline (make-copaque::copaque id1280::symbol name1281::obj size1282::obj class1283::obj coerce-to1284::obj parents1285::obj init?1286::bool magic?1287::bool $1288::obj alias1289::obj pointed-to-by1290::obj tvector1291::obj location1292::obj import-location1293::obj btype1294::type) (instantiate::copaque (id id1280) (name name1281) (size size1282) (class class1283) (coerce-to coerce-to1284) (parents parents1285) (init? init?1286) (magic? magic?1287) ($ $1288) (alias alias1289) (pointed-to-by pointed-to-by1290) (tvector tvector1291) (location location1292) (import-location import-location1293) (btype btype1294)))
(define-inline (copaque?::bool obj::obj) ((@ isa? __object) obj (@ copaque foreign_ctype)))
(define (copaque-nil::copaque) (class-nil (@ copaque foreign_ctype)))
(define-inline (copaque-btype::type o::copaque) (-> |#!bigloo_wallow| o btype))
(define-inline (copaque-btype-set! o::copaque v::type) (set! (-> |#!bigloo_wallow| o btype) v))
(define-inline (copaque-import-location::obj o::copaque) (-> |#!bigloo_wallow| o import-location))
(define-inline (copaque-import-location-set! o::copaque v::obj) (set! (-> |#!bigloo_wallow| o import-location) v))
(define-inline (copaque-location::obj o::copaque) (-> |#!bigloo_wallow| o location))
(define-inline (copaque-location-set! o::copaque v::obj) (set! (-> |#!bigloo_wallow| o location) v))
(define-inline (copaque-tvector::obj o::copaque) (-> |#!bigloo_wallow| o tvector))
(define-inline (copaque-tvector-set! o::copaque v::obj) (set! (-> |#!bigloo_wallow| o tvector) v))
(define-inline (copaque-pointed-to-by::obj o::copaque) (-> |#!bigloo_wallow| o pointed-to-by))
(define-inline (copaque-pointed-to-by-set! o::copaque v::obj) (set! (-> |#!bigloo_wallow| o pointed-to-by) v))
(define-inline (copaque-alias::obj o::copaque) (-> |#!bigloo_wallow| o alias))
(define-inline (copaque-alias-set! o::copaque v::obj) (set! (-> |#!bigloo_wallow| o alias) v))
(define-inline (copaque-$::obj o::copaque) (-> |#!bigloo_wallow| o $))
(define-inline (copaque-$-set! o::copaque v::obj) (set! (-> |#!bigloo_wallow| o $) v))
(define-inline (copaque-magic?::bool o::copaque) (-> |#!bigloo_wallow| o magic?))
(define-inline (copaque-magic?-set! o::copaque v::bool) (set! (-> |#!bigloo_wallow| o magic?) v))
(define-inline (copaque-init?::bool o::copaque) (-> |#!bigloo_wallow| o init?))
(define-inline (copaque-init?-set! o::copaque v::bool) (set! (-> |#!bigloo_wallow| o init?) v))
(define-inline (copaque-parents::obj o::copaque) (-> |#!bigloo_wallow| o parents))
(define-inline (copaque-parents-set! o::copaque v::obj) (set! (-> |#!bigloo_wallow| o parents) v))
(define-inline (copaque-coerce-to::obj o::copaque) (-> |#!bigloo_wallow| o coerce-to))
(define-inline (copaque-coerce-to-set! o::copaque v::obj) (set! (-> |#!bigloo_wallow| o coerce-to) v))
(define-inline (copaque-class::obj o::copaque) (-> |#!bigloo_wallow| o class))
(define-inline (copaque-class-set! o::copaque v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (copaque-size::obj o::copaque) (-> |#!bigloo_wallow| o size))
(define-inline (copaque-size-set! o::copaque v::obj) (set! (-> |#!bigloo_wallow| o size) v))
(define-inline (copaque-name::obj o::copaque) (-> |#!bigloo_wallow| o name))
(define-inline (copaque-name-set! o::copaque v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (copaque-id::symbol o::copaque) (-> |#!bigloo_wallow| o id))
(define-inline (copaque-id-set! o::copaque v::symbol) (set! (-> |#!bigloo_wallow| o id) v))

;; cfunction
(define-inline (make-cfunction::cfunction id1261::symbol name1262::obj size1263::obj class1264::obj coerce-to1265::obj parents1266::obj init?1267::bool magic?1268::bool $1269::obj alias1270::obj pointed-to-by1271::obj tvector1272::obj location1273::obj import-location1274::obj btype1275::type arity1276::long type-res1277::type type-args1278::obj) (instantiate::cfunction (id id1261) (name name1262) (size size1263) (class class1264) (coerce-to coerce-to1265) (parents parents1266) (init? init?1267) (magic? magic?1268) ($ $1269) (alias alias1270) (pointed-to-by pointed-to-by1271) (tvector tvector1272) (location location1273) (import-location import-location1274) (btype btype1275) (arity arity1276) (type-res type-res1277) (type-args type-args1278)))
(define-inline (cfunction?::bool obj::obj) ((@ isa? __object) obj (@ cfunction foreign_ctype)))
(define (cfunction-nil::cfunction) (class-nil (@ cfunction foreign_ctype)))
(define-inline (cfunction-type-args::obj o::cfunction) (-> |#!bigloo_wallow| o type-args))
(define-inline (cfunction-type-args-set! o::cfunction v::obj) (set! (-> |#!bigloo_wallow| o type-args) v))
(define-inline (cfunction-type-res::type o::cfunction) (-> |#!bigloo_wallow| o type-res))
(define-inline (cfunction-type-res-set! o::cfunction v::type) (set! (-> |#!bigloo_wallow| o type-res) v))
(define-inline (cfunction-arity::long o::cfunction) (-> |#!bigloo_wallow| o arity))
(define-inline (cfunction-arity-set! o::cfunction v::long) (set! (-> |#!bigloo_wallow| o arity) v))
(define-inline (cfunction-btype::type o::cfunction) (-> |#!bigloo_wallow| o btype))
(define-inline (cfunction-btype-set! o::cfunction v::type) (set! (-> |#!bigloo_wallow| o btype) v))
(define-inline (cfunction-import-location::obj o::cfunction) (-> |#!bigloo_wallow| o import-location))
(define-inline (cfunction-import-location-set! o::cfunction v::obj) (set! (-> |#!bigloo_wallow| o import-location) v))
(define-inline (cfunction-location::obj o::cfunction) (-> |#!bigloo_wallow| o location))
(define-inline (cfunction-location-set! o::cfunction v::obj) (set! (-> |#!bigloo_wallow| o location) v))
(define-inline (cfunction-tvector::obj o::cfunction) (-> |#!bigloo_wallow| o tvector))
(define-inline (cfunction-tvector-set! o::cfunction v::obj) (set! (-> |#!bigloo_wallow| o tvector) v))
(define-inline (cfunction-pointed-to-by::obj o::cfunction) (-> |#!bigloo_wallow| o pointed-to-by))
(define-inline (cfunction-pointed-to-by-set! o::cfunction v::obj) (set! (-> |#!bigloo_wallow| o pointed-to-by) v))
(define-inline (cfunction-alias::obj o::cfunction) (-> |#!bigloo_wallow| o alias))
(define-inline (cfunction-alias-set! o::cfunction v::obj) (set! (-> |#!bigloo_wallow| o alias) v))
(define-inline (cfunction-$::obj o::cfunction) (-> |#!bigloo_wallow| o $))
(define-inline (cfunction-$-set! o::cfunction v::obj) (set! (-> |#!bigloo_wallow| o $) v))
(define-inline (cfunction-magic?::bool o::cfunction) (-> |#!bigloo_wallow| o magic?))
(define-inline (cfunction-magic?-set! o::cfunction v::bool) (set! (-> |#!bigloo_wallow| o magic?) v))
(define-inline (cfunction-init?::bool o::cfunction) (-> |#!bigloo_wallow| o init?))
(define-inline (cfunction-init?-set! o::cfunction v::bool) (set! (-> |#!bigloo_wallow| o init?) v))
(define-inline (cfunction-parents::obj o::cfunction) (-> |#!bigloo_wallow| o parents))
(define-inline (cfunction-parents-set! o::cfunction v::obj) (set! (-> |#!bigloo_wallow| o parents) v))
(define-inline (cfunction-coerce-to::obj o::cfunction) (-> |#!bigloo_wallow| o coerce-to))
(define-inline (cfunction-coerce-to-set! o::cfunction v::obj) (set! (-> |#!bigloo_wallow| o coerce-to) v))
(define-inline (cfunction-class::obj o::cfunction) (-> |#!bigloo_wallow| o class))
(define-inline (cfunction-class-set! o::cfunction v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (cfunction-size::obj o::cfunction) (-> |#!bigloo_wallow| o size))
(define-inline (cfunction-size-set! o::cfunction v::obj) (set! (-> |#!bigloo_wallow| o size) v))
(define-inline (cfunction-name::obj o::cfunction) (-> |#!bigloo_wallow| o name))
(define-inline (cfunction-name-set! o::cfunction v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (cfunction-id::symbol o::cfunction) (-> |#!bigloo_wallow| o id))
(define-inline (cfunction-id-set! o::cfunction v::symbol) (set! (-> |#!bigloo_wallow| o id) v))

;; cptr
(define-inline (make-cptr::cptr id1243::symbol name1244::obj size1245::obj class1246::obj coerce-to1247::obj parents1248::obj init?1249::bool magic?1250::bool $1251::obj alias1252::obj pointed-to-by1253::obj tvector1254::obj location1255::obj import-location1256::obj btype1257::type point-to1258::type array?1259::bool) (instantiate::cptr (id id1243) (name name1244) (size size1245) (class class1246) (coerce-to coerce-to1247) (parents parents1248) (init? init?1249) (magic? magic?1250) ($ $1251) (alias alias1252) (pointed-to-by pointed-to-by1253) (tvector tvector1254) (location location1255) (import-location import-location1256) (btype btype1257) (point-to point-to1258) (array? array?1259)))
(define-inline (cptr?::bool obj::obj) ((@ isa? __object) obj (@ cptr foreign_ctype)))
(define (cptr-nil::cptr) (class-nil (@ cptr foreign_ctype)))
(define-inline (cptr-array?::bool o::cptr) (-> |#!bigloo_wallow| o array?))
(define-inline (cptr-array?-set! o::cptr v::bool) (set! (-> |#!bigloo_wallow| o array?) v))
(define-inline (cptr-point-to::type o::cptr) (-> |#!bigloo_wallow| o point-to))
(define-inline (cptr-point-to-set! o::cptr v::type) (set! (-> |#!bigloo_wallow| o point-to) v))
(define-inline (cptr-btype::type o::cptr) (-> |#!bigloo_wallow| o btype))
(define-inline (cptr-btype-set! o::cptr v::type) (set! (-> |#!bigloo_wallow| o btype) v))
(define-inline (cptr-import-location::obj o::cptr) (-> |#!bigloo_wallow| o import-location))
(define-inline (cptr-import-location-set! o::cptr v::obj) (set! (-> |#!bigloo_wallow| o import-location) v))
(define-inline (cptr-location::obj o::cptr) (-> |#!bigloo_wallow| o location))
(define-inline (cptr-location-set! o::cptr v::obj) (set! (-> |#!bigloo_wallow| o location) v))
(define-inline (cptr-tvector::obj o::cptr) (-> |#!bigloo_wallow| o tvector))
(define-inline (cptr-tvector-set! o::cptr v::obj) (set! (-> |#!bigloo_wallow| o tvector) v))
(define-inline (cptr-pointed-to-by::obj o::cptr) (-> |#!bigloo_wallow| o pointed-to-by))
(define-inline (cptr-pointed-to-by-set! o::cptr v::obj) (set! (-> |#!bigloo_wallow| o pointed-to-by) v))
(define-inline (cptr-alias::obj o::cptr) (-> |#!bigloo_wallow| o alias))
(define-inline (cptr-alias-set! o::cptr v::obj) (set! (-> |#!bigloo_wallow| o alias) v))
(define-inline (cptr-$::obj o::cptr) (-> |#!bigloo_wallow| o $))
(define-inline (cptr-$-set! o::cptr v::obj) (set! (-> |#!bigloo_wallow| o $) v))
(define-inline (cptr-magic?::bool o::cptr) (-> |#!bigloo_wallow| o magic?))
(define-inline (cptr-magic?-set! o::cptr v::bool) (set! (-> |#!bigloo_wallow| o magic?) v))
(define-inline (cptr-init?::bool o::cptr) (-> |#!bigloo_wallow| o init?))
(define-inline (cptr-init?-set! o::cptr v::bool) (set! (-> |#!bigloo_wallow| o init?) v))
(define-inline (cptr-parents::obj o::cptr) (-> |#!bigloo_wallow| o parents))
(define-inline (cptr-parents-set! o::cptr v::obj) (set! (-> |#!bigloo_wallow| o parents) v))
(define-inline (cptr-coerce-to::obj o::cptr) (-> |#!bigloo_wallow| o coerce-to))
(define-inline (cptr-coerce-to-set! o::cptr v::obj) (set! (-> |#!bigloo_wallow| o coerce-to) v))
(define-inline (cptr-class::obj o::cptr) (-> |#!bigloo_wallow| o class))
(define-inline (cptr-class-set! o::cptr v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (cptr-size::obj o::cptr) (-> |#!bigloo_wallow| o size))
(define-inline (cptr-size-set! o::cptr v::obj) (set! (-> |#!bigloo_wallow| o size) v))
(define-inline (cptr-name::obj o::cptr) (-> |#!bigloo_wallow| o name))
(define-inline (cptr-name-set! o::cptr v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (cptr-id::symbol o::cptr) (-> |#!bigloo_wallow| o id))
(define-inline (cptr-id-set! o::cptr v::symbol) (set! (-> |#!bigloo_wallow| o id) v))

;; cstruct
(define-inline (make-cstruct::cstruct id1225::symbol name1226::obj size1227::obj class1228::obj coerce-to1229::obj parents1230::obj init?1231::bool magic?1232::bool $1233::obj alias1234::obj pointed-to-by1235::obj tvector1236::obj location1237::obj import-location1238::obj struct?1239::bool fields1240::obj cstruct*1241::obj) (instantiate::cstruct (id id1225) (name name1226) (size size1227) (class class1228) (coerce-to coerce-to1229) (parents parents1230) (init? init?1231) (magic? magic?1232) ($ $1233) (alias alias1234) (pointed-to-by pointed-to-by1235) (tvector tvector1236) (location location1237) (import-location import-location1238) (struct? struct?1239) (fields fields1240) (cstruct* cstruct*1241)))
(define-inline (cstruct?::bool obj::obj) ((@ isa? __object) obj (@ cstruct foreign_ctype)))
(define (cstruct-nil::cstruct) (class-nil (@ cstruct foreign_ctype)))
(define-inline (cstruct-cstruct*::obj o::cstruct) (-> |#!bigloo_wallow| o cstruct*))
(define-inline (cstruct-cstruct*-set! o::cstruct v::obj) (set! (-> |#!bigloo_wallow| o cstruct*) v))
(define-inline (cstruct-fields::obj o::cstruct) (-> |#!bigloo_wallow| o fields))
(define-inline (cstruct-fields-set! o::cstruct v::obj) (set! (-> |#!bigloo_wallow| o fields) v))
(define-inline (cstruct-struct?::bool o::cstruct) (-> |#!bigloo_wallow| o struct?))
(define-inline (cstruct-struct?-set! o::cstruct v::bool) (set! (-> |#!bigloo_wallow| o struct?) v))
(define-inline (cstruct-import-location::obj o::cstruct) (-> |#!bigloo_wallow| o import-location))
(define-inline (cstruct-import-location-set! o::cstruct v::obj) (set! (-> |#!bigloo_wallow| o import-location) v))
(define-inline (cstruct-location::obj o::cstruct) (-> |#!bigloo_wallow| o location))
(define-inline (cstruct-location-set! o::cstruct v::obj) (set! (-> |#!bigloo_wallow| o location) v))
(define-inline (cstruct-tvector::obj o::cstruct) (-> |#!bigloo_wallow| o tvector))
(define-inline (cstruct-tvector-set! o::cstruct v::obj) (set! (-> |#!bigloo_wallow| o tvector) v))
(define-inline (cstruct-pointed-to-by::obj o::cstruct) (-> |#!bigloo_wallow| o pointed-to-by))
(define-inline (cstruct-pointed-to-by-set! o::cstruct v::obj) (set! (-> |#!bigloo_wallow| o pointed-to-by) v))
(define-inline (cstruct-alias::obj o::cstruct) (-> |#!bigloo_wallow| o alias))
(define-inline (cstruct-alias-set! o::cstruct v::obj) (set! (-> |#!bigloo_wallow| o alias) v))
(define-inline (cstruct-$::obj o::cstruct) (-> |#!bigloo_wallow| o $))
(define-inline (cstruct-$-set! o::cstruct v::obj) (set! (-> |#!bigloo_wallow| o $) v))
(define-inline (cstruct-magic?::bool o::cstruct) (-> |#!bigloo_wallow| o magic?))
(define-inline (cstruct-magic?-set! o::cstruct v::bool) (set! (-> |#!bigloo_wallow| o magic?) v))
(define-inline (cstruct-init?::bool o::cstruct) (-> |#!bigloo_wallow| o init?))
(define-inline (cstruct-init?-set! o::cstruct v::bool) (set! (-> |#!bigloo_wallow| o init?) v))
(define-inline (cstruct-parents::obj o::cstruct) (-> |#!bigloo_wallow| o parents))
(define-inline (cstruct-parents-set! o::cstruct v::obj) (set! (-> |#!bigloo_wallow| o parents) v))
(define-inline (cstruct-coerce-to::obj o::cstruct) (-> |#!bigloo_wallow| o coerce-to))
(define-inline (cstruct-coerce-to-set! o::cstruct v::obj) (set! (-> |#!bigloo_wallow| o coerce-to) v))
(define-inline (cstruct-class::obj o::cstruct) (-> |#!bigloo_wallow| o class))
(define-inline (cstruct-class-set! o::cstruct v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (cstruct-size::obj o::cstruct) (-> |#!bigloo_wallow| o size))
(define-inline (cstruct-size-set! o::cstruct v::obj) (set! (-> |#!bigloo_wallow| o size) v))
(define-inline (cstruct-name::obj o::cstruct) (-> |#!bigloo_wallow| o name))
(define-inline (cstruct-name-set! o::cstruct v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (cstruct-id::symbol o::cstruct) (-> |#!bigloo_wallow| o id))
(define-inline (cstruct-id-set! o::cstruct v::symbol) (set! (-> |#!bigloo_wallow| o id) v))

;; cstruct*
(define-inline (make-cstruct*::cstruct* id1208::symbol name1209::obj size1210::obj class1211::obj coerce-to1212::obj parents1213::obj init?1214::bool magic?1215::bool $1216::obj alias1217::obj pointed-to-by1218::obj tvector1219::obj location1220::obj import-location1221::obj btype1222::type cstruct1223::cstruct) (instantiate::cstruct* (id id1208) (name name1209) (size size1210) (class class1211) (coerce-to coerce-to1212) (parents parents1213) (init? init?1214) (magic? magic?1215) ($ $1216) (alias alias1217) (pointed-to-by pointed-to-by1218) (tvector tvector1219) (location location1220) (import-location import-location1221) (btype btype1222) (cstruct cstruct1223)))
(define-inline (cstruct*?::bool obj::obj) ((@ isa? __object) obj (@ cstruct* foreign_ctype)))
(define (cstruct*-nil::cstruct*) (class-nil (@ cstruct* foreign_ctype)))
(define-inline (cstruct*-cstruct::cstruct o::cstruct*) (-> |#!bigloo_wallow| o cstruct))
(define-inline (cstruct*-cstruct-set! o::cstruct* v::cstruct) (set! (-> |#!bigloo_wallow| o cstruct) v))
(define-inline (cstruct*-btype::type o::cstruct*) (-> |#!bigloo_wallow| o btype))
(define-inline (cstruct*-btype-set! o::cstruct* v::type) (set! (-> |#!bigloo_wallow| o btype) v))
(define-inline (cstruct*-import-location::obj o::cstruct*) (-> |#!bigloo_wallow| o import-location))
(define-inline (cstruct*-import-location-set! o::cstruct* v::obj) (set! (-> |#!bigloo_wallow| o import-location) v))
(define-inline (cstruct*-location::obj o::cstruct*) (-> |#!bigloo_wallow| o location))
(define-inline (cstruct*-location-set! o::cstruct* v::obj) (set! (-> |#!bigloo_wallow| o location) v))
(define-inline (cstruct*-tvector::obj o::cstruct*) (-> |#!bigloo_wallow| o tvector))
(define-inline (cstruct*-tvector-set! o::cstruct* v::obj) (set! (-> |#!bigloo_wallow| o tvector) v))
(define-inline (cstruct*-pointed-to-by::obj o::cstruct*) (-> |#!bigloo_wallow| o pointed-to-by))
(define-inline (cstruct*-pointed-to-by-set! o::cstruct* v::obj) (set! (-> |#!bigloo_wallow| o pointed-to-by) v))
(define-inline (cstruct*-alias::obj o::cstruct*) (-> |#!bigloo_wallow| o alias))
(define-inline (cstruct*-alias-set! o::cstruct* v::obj) (set! (-> |#!bigloo_wallow| o alias) v))
(define-inline (cstruct*-$::obj o::cstruct*) (-> |#!bigloo_wallow| o $))
(define-inline (cstruct*-$-set! o::cstruct* v::obj) (set! (-> |#!bigloo_wallow| o $) v))
(define-inline (cstruct*-magic?::bool o::cstruct*) (-> |#!bigloo_wallow| o magic?))
(define-inline (cstruct*-magic?-set! o::cstruct* v::bool) (set! (-> |#!bigloo_wallow| o magic?) v))
(define-inline (cstruct*-init?::bool o::cstruct*) (-> |#!bigloo_wallow| o init?))
(define-inline (cstruct*-init?-set! o::cstruct* v::bool) (set! (-> |#!bigloo_wallow| o init?) v))
(define-inline (cstruct*-parents::obj o::cstruct*) (-> |#!bigloo_wallow| o parents))
(define-inline (cstruct*-parents-set! o::cstruct* v::obj) (set! (-> |#!bigloo_wallow| o parents) v))
(define-inline (cstruct*-coerce-to::obj o::cstruct*) (-> |#!bigloo_wallow| o coerce-to))
(define-inline (cstruct*-coerce-to-set! o::cstruct* v::obj) (set! (-> |#!bigloo_wallow| o coerce-to) v))
(define-inline (cstruct*-class::obj o::cstruct*) (-> |#!bigloo_wallow| o class))
(define-inline (cstruct*-class-set! o::cstruct* v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (cstruct*-size::obj o::cstruct*) (-> |#!bigloo_wallow| o size))
(define-inline (cstruct*-size-set! o::cstruct* v::obj) (set! (-> |#!bigloo_wallow| o size) v))
(define-inline (cstruct*-name::obj o::cstruct*) (-> |#!bigloo_wallow| o name))
(define-inline (cstruct*-name-set! o::cstruct* v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (cstruct*-id::symbol o::cstruct*) (-> |#!bigloo_wallow| o id))
(define-inline (cstruct*-id-set! o::cstruct* v::symbol) (set! (-> |#!bigloo_wallow| o id) v))
))
