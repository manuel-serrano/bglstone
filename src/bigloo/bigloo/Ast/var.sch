;; ==========================================================
;; Class accessors
;; Bigloo (4.7a)
;; Inria -- Sophia Antipolis     Thu Mar 6 07:34:14 AM CET 2025 
;; (bigloo -classgen Ast/var.scm)
;; ==========================================================

;; The directives
(directives

;; value
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-value::value)
    (inline value?::bool ::obj)
    (value-nil::value))))

;; variable
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-variable::variable id1239::symbol name1240::obj type1241::type value1242::value access1243::obj fast-alpha1244::obj removable1245::obj occurrence1246::long)
    (inline variable?::bool ::obj)
    (variable-nil::variable)
    (inline variable-occurrence::long ::variable)
    (inline variable-occurrence-set! ::variable ::long)
    (inline variable-removable::obj ::variable)
    (inline variable-removable-set! ::variable ::obj)
    (inline variable-fast-alpha::obj ::variable)
    (inline variable-fast-alpha-set! ::variable ::obj)
    (inline variable-access::obj ::variable)
    (inline variable-access-set! ::variable ::obj)
    (inline variable-value::value ::variable)
    (inline variable-value-set! ::variable ::value)
    (inline variable-type::type ::variable)
    (inline variable-type-set! ::variable ::type)
    (inline variable-name::obj ::variable)
    (inline variable-name-set! ::variable ::obj)
    (inline variable-id::symbol ::variable))))

;; global
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-global::global id1222::symbol name1223::obj type1224::type value1225::value access1226::obj fast-alpha1227::obj removable1228::obj occurrence1229::long module1230::symbol import1231::obj evaluable?1232::bool library?1233::bool user?1234::bool pragma1235::obj src1236::obj jvm-type-name1237::bstring)
    (inline global?::bool ::obj)
    (global-nil::global)
    (inline global-jvm-type-name::bstring ::global)
    (inline global-jvm-type-name-set! ::global ::bstring)
    (inline global-src::obj ::global)
    (inline global-src-set! ::global ::obj)
    (inline global-pragma::obj ::global)
    (inline global-pragma-set! ::global ::obj)
    (inline global-user?::bool ::global)
    (inline global-user?-set! ::global ::bool)
    (inline global-library?::bool ::global)
    (inline global-library?-set! ::global ::bool)
    (inline global-evaluable?::bool ::global)
    (inline global-evaluable?-set! ::global ::bool)
    (inline global-import::obj ::global)
    (inline global-import-set! ::global ::obj)
    (inline global-module::symbol ::global)
    (inline global-module-set! ::global ::symbol)
    (inline global-occurrence::long ::global)
    (inline global-occurrence-set! ::global ::long)
    (inline global-removable::obj ::global)
    (inline global-removable-set! ::global ::obj)
    (inline global-fast-alpha::obj ::global)
    (inline global-fast-alpha-set! ::global ::obj)
    (inline global-access::obj ::global)
    (inline global-access-set! ::global ::obj)
    (inline global-value::value ::global)
    (inline global-value-set! ::global ::value)
    (inline global-type::type ::global)
    (inline global-type-set! ::global ::type)
    (inline global-name::obj ::global)
    (inline global-name-set! ::global ::obj)
    (inline global-id::symbol ::global))))

;; local
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-local::local id1211::symbol name1212::obj type1213::type value1214::value access1215::obj fast-alpha1216::obj removable1217::obj occurrence1218::long user?1219::bool key1220::long)
    (inline local?::bool ::obj)
    (local-nil::local)
    (inline local-key::long ::local)
    (inline local-user?::bool ::local)
    (inline local-user?-set! ::local ::bool)
    (inline local-occurrence::long ::local)
    (inline local-occurrence-set! ::local ::long)
    (inline local-removable::obj ::local)
    (inline local-removable-set! ::local ::obj)
    (inline local-fast-alpha::obj ::local)
    (inline local-fast-alpha-set! ::local ::obj)
    (inline local-access::obj ::local)
    (inline local-access-set! ::local ::obj)
    (inline local-value::value ::local)
    (inline local-value-set! ::local ::value)
    (inline local-type::type ::local)
    (inline local-type-set! ::local ::type)
    (inline local-name::obj ::local)
    (inline local-name-set! ::local ::obj)
    (inline local-id::symbol ::local))))

;; fun
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-fun::fun arity1203::long side-effect?1204::obj predicate-of1205::obj stack-allocator1206::obj top?1207::bool the-closure1208::obj effect1209::obj)
    (inline fun?::bool ::obj)
    (fun-nil::fun)
    (inline fun-effect::obj ::fun)
    (inline fun-effect-set! ::fun ::obj)
    (inline fun-the-closure::obj ::fun)
    (inline fun-the-closure-set! ::fun ::obj)
    (inline fun-top?::bool ::fun)
    (inline fun-top?-set! ::fun ::bool)
    (inline fun-stack-allocator::obj ::fun)
    (inline fun-stack-allocator-set! ::fun ::obj)
    (inline fun-predicate-of::obj ::fun)
    (inline fun-predicate-of-set! ::fun ::obj)
    (inline fun-side-effect?::obj ::fun)
    (inline fun-side-effect?-set! ::fun ::obj)
    (inline fun-arity::long ::fun))))

;; sfun
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-sfun::sfun arity1189::long side-effect?1190::obj predicate-of1191::obj stack-allocator1192::obj top?1193::bool the-closure1194::obj effect1195::obj property1196::obj args1197::obj body1198::obj class1199::obj dsssl-keywords1200::obj loc1201::obj)
    (inline sfun?::bool ::obj)
    (sfun-nil::sfun)
    (inline sfun-loc::obj ::sfun)
    (inline sfun-loc-set! ::sfun ::obj)
    (inline sfun-dsssl-keywords::obj ::sfun)
    (inline sfun-dsssl-keywords-set! ::sfun ::obj)
    (inline sfun-class::obj ::sfun)
    (inline sfun-class-set! ::sfun ::obj)
    (inline sfun-body::obj ::sfun)
    (inline sfun-body-set! ::sfun ::obj)
    (inline sfun-args::obj ::sfun)
    (inline sfun-args-set! ::sfun ::obj)
    (inline sfun-property::obj ::sfun)
    (inline sfun-property-set! ::sfun ::obj)
    (inline sfun-effect::obj ::sfun)
    (inline sfun-effect-set! ::sfun ::obj)
    (inline sfun-the-closure::obj ::sfun)
    (inline sfun-the-closure-set! ::sfun ::obj)
    (inline sfun-top?::bool ::sfun)
    (inline sfun-top?-set! ::sfun ::bool)
    (inline sfun-stack-allocator::obj ::sfun)
    (inline sfun-stack-allocator-set! ::sfun ::obj)
    (inline sfun-predicate-of::obj ::sfun)
    (inline sfun-predicate-of-set! ::sfun ::obj)
    (inline sfun-side-effect?::obj ::sfun)
    (inline sfun-side-effect?-set! ::sfun ::obj)
    (inline sfun-arity::long ::sfun))))

;; cfun
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cfun::cfun arity1176::long side-effect?1177::obj predicate-of1178::obj stack-allocator1179::obj top?1180::bool the-closure1181::obj effect1182::obj args-type1183::obj macro?1184::bool infix?1185::bool method1187::pair-nil)
    (inline cfun?::bool ::obj)
    (cfun-nil::cfun)
    (inline cfun-method::pair-nil ::cfun)
    (inline cfun-method-set! ::cfun ::pair-nil)
    (inline cfun-infix?::bool ::cfun)
    (inline cfun-infix?-set! ::cfun ::bool)
    (inline cfun-macro?::bool ::cfun)
    (inline cfun-args-type::obj ::cfun)
    (inline cfun-effect::obj ::cfun)
    (inline cfun-effect-set! ::cfun ::obj)
    (inline cfun-the-closure::obj ::cfun)
    (inline cfun-the-closure-set! ::cfun ::obj)
    (inline cfun-top?::bool ::cfun)
    (inline cfun-top?-set! ::cfun ::bool)
    (inline cfun-stack-allocator::obj ::cfun)
    (inline cfun-stack-allocator-set! ::cfun ::obj)
    (inline cfun-predicate-of::obj ::cfun)
    (inline cfun-predicate-of-set! ::cfun ::obj)
    (inline cfun-side-effect?::obj ::cfun)
    (inline cfun-side-effect?-set! ::cfun ::obj)
    (inline cfun-arity::long ::cfun))))

;; svar
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-svar::svar loc1174::obj)
    (inline svar?::bool ::obj)
    (svar-nil::svar)
    (inline svar-loc::obj ::svar)
    (inline svar-loc-set! ::svar ::obj))))

;; scnst
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-scnst::scnst node1170::obj class1171::obj loc1172::obj)
    (inline scnst?::bool ::obj)
    (scnst-nil::scnst)
    (inline scnst-loc::obj ::scnst)
    (inline scnst-loc-set! ::scnst ::obj)
    (inline scnst-class::obj ::scnst)
    (inline scnst-class-set! ::scnst ::obj)
    (inline scnst-node::obj ::scnst))))

;; cvar
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cvar::cvar macro?1168::bool)
    (inline cvar?::bool ::obj)
    (cvar-nil::cvar)
    (inline cvar-macro?::bool ::cvar))))

;; sexit
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-sexit::sexit handler1165::obj detached?1166::bool)
    (inline sexit?::bool ::obj)
    (sexit-nil::sexit)
    (inline sexit-detached?::bool ::sexit)
    (inline sexit-detached?-set! ::sexit ::bool)
    (inline sexit-handler::obj ::sexit)
    (inline sexit-handler-set! ::sexit ::obj))))

;; feffect
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-feffect::feffect read1162::obj write1163::obj)
    (inline feffect?::bool ::obj)
    (feffect-nil::feffect)
    (inline feffect-write::obj ::feffect)
    (inline feffect-write-set! ::feffect ::obj)
    (inline feffect-read::obj ::feffect)
    (inline feffect-read-set! ::feffect ::obj)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; value
(define-inline (make-value::value) (instantiate::value))
(define-inline (value?::bool obj::obj) ((@ isa? __object) obj (@ value ast_var)))
(define (value-nil::value) (class-nil (@ value ast_var)))

;; variable
(define-inline (make-variable::variable id1239::symbol name1240::obj type1241::type value1242::value access1243::obj fast-alpha1244::obj removable1245::obj occurrence1246::long) (instantiate::variable (id id1239) (name name1240) (type type1241) (value value1242) (access access1243) (fast-alpha fast-alpha1244) (removable removable1245) (occurrence occurrence1246)))
(define-inline (variable?::bool obj::obj) ((@ isa? __object) obj (@ variable ast_var)))
(define (variable-nil::variable) (class-nil (@ variable ast_var)))
(define-inline (variable-occurrence::long o::variable) (-> |#!bigloo_wallow| o occurrence))
(define-inline (variable-occurrence-set! o::variable v::long) (set! (-> |#!bigloo_wallow| o occurrence) v))
(define-inline (variable-removable::obj o::variable) (-> |#!bigloo_wallow| o removable))
(define-inline (variable-removable-set! o::variable v::obj) (set! (-> |#!bigloo_wallow| o removable) v))
(define-inline (variable-fast-alpha::obj o::variable) (-> |#!bigloo_wallow| o fast-alpha))
(define-inline (variable-fast-alpha-set! o::variable v::obj) (set! (-> |#!bigloo_wallow| o fast-alpha) v))
(define-inline (variable-access::obj o::variable) (-> |#!bigloo_wallow| o access))
(define-inline (variable-access-set! o::variable v::obj) (set! (-> |#!bigloo_wallow| o access) v))
(define-inline (variable-value::value o::variable) (-> |#!bigloo_wallow| o value))
(define-inline (variable-value-set! o::variable v::value) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (variable-type::type o::variable) (-> |#!bigloo_wallow| o type))
(define-inline (variable-type-set! o::variable v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (variable-name::obj o::variable) (-> |#!bigloo_wallow| o name))
(define-inline (variable-name-set! o::variable v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (variable-id::symbol o::variable) (-> |#!bigloo_wallow| o id))
(define-inline (variable-id-set! o::variable v::symbol) (set! (-> |#!bigloo_wallow| o id) v))

;; global
(define-inline (make-global::global id1222::symbol name1223::obj type1224::type value1225::value access1226::obj fast-alpha1227::obj removable1228::obj occurrence1229::long module1230::symbol import1231::obj evaluable?1232::bool library?1233::bool user?1234::bool pragma1235::obj src1236::obj jvm-type-name1237::bstring) (instantiate::global (id id1222) (name name1223) (type type1224) (value value1225) (access access1226) (fast-alpha fast-alpha1227) (removable removable1228) (occurrence occurrence1229) (module module1230) (import import1231) (evaluable? evaluable?1232) (library? library?1233) (user? user?1234) (pragma pragma1235) (src src1236) (jvm-type-name jvm-type-name1237)))
(define-inline (global?::bool obj::obj) ((@ isa? __object) obj (@ global ast_var)))
(define (global-nil::global) (class-nil (@ global ast_var)))
(define-inline (global-jvm-type-name::bstring o::global) (-> |#!bigloo_wallow| o jvm-type-name))
(define-inline (global-jvm-type-name-set! o::global v::bstring) (set! (-> |#!bigloo_wallow| o jvm-type-name) v))
(define-inline (global-src::obj o::global) (-> |#!bigloo_wallow| o src))
(define-inline (global-src-set! o::global v::obj) (set! (-> |#!bigloo_wallow| o src) v))
(define-inline (global-pragma::obj o::global) (-> |#!bigloo_wallow| o pragma))
(define-inline (global-pragma-set! o::global v::obj) (set! (-> |#!bigloo_wallow| o pragma) v))
(define-inline (global-user?::bool o::global) (-> |#!bigloo_wallow| o user?))
(define-inline (global-user?-set! o::global v::bool) (set! (-> |#!bigloo_wallow| o user?) v))
(define-inline (global-library?::bool o::global) (-> |#!bigloo_wallow| o library?))
(define-inline (global-library?-set! o::global v::bool) (set! (-> |#!bigloo_wallow| o library?) v))
(define-inline (global-evaluable?::bool o::global) (-> |#!bigloo_wallow| o evaluable?))
(define-inline (global-evaluable?-set! o::global v::bool) (set! (-> |#!bigloo_wallow| o evaluable?) v))
(define-inline (global-import::obj o::global) (-> |#!bigloo_wallow| o import))
(define-inline (global-import-set! o::global v::obj) (set! (-> |#!bigloo_wallow| o import) v))
(define-inline (global-module::symbol o::global) (-> |#!bigloo_wallow| o module))
(define-inline (global-module-set! o::global v::symbol) (set! (-> |#!bigloo_wallow| o module) v))
(define-inline (global-occurrence::long o::global) (-> |#!bigloo_wallow| o occurrence))
(define-inline (global-occurrence-set! o::global v::long) (set! (-> |#!bigloo_wallow| o occurrence) v))
(define-inline (global-removable::obj o::global) (-> |#!bigloo_wallow| o removable))
(define-inline (global-removable-set! o::global v::obj) (set! (-> |#!bigloo_wallow| o removable) v))
(define-inline (global-fast-alpha::obj o::global) (-> |#!bigloo_wallow| o fast-alpha))
(define-inline (global-fast-alpha-set! o::global v::obj) (set! (-> |#!bigloo_wallow| o fast-alpha) v))
(define-inline (global-access::obj o::global) (-> |#!bigloo_wallow| o access))
(define-inline (global-access-set! o::global v::obj) (set! (-> |#!bigloo_wallow| o access) v))
(define-inline (global-value::value o::global) (-> |#!bigloo_wallow| o value))
(define-inline (global-value-set! o::global v::value) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (global-type::type o::global) (-> |#!bigloo_wallow| o type))
(define-inline (global-type-set! o::global v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (global-name::obj o::global) (-> |#!bigloo_wallow| o name))
(define-inline (global-name-set! o::global v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (global-id::symbol o::global) (-> |#!bigloo_wallow| o id))
(define-inline (global-id-set! o::global v::symbol) (set! (-> |#!bigloo_wallow| o id) v))

;; local
(define-inline (make-local::local id1211::symbol name1212::obj type1213::type value1214::value access1215::obj fast-alpha1216::obj removable1217::obj occurrence1218::long user?1219::bool key1220::long) (instantiate::local (id id1211) (name name1212) (type type1213) (value value1214) (access access1215) (fast-alpha fast-alpha1216) (removable removable1217) (occurrence occurrence1218) (user? user?1219) (key key1220)))
(define-inline (local?::bool obj::obj) ((@ isa? __object) obj (@ local ast_var)))
(define (local-nil::local) (class-nil (@ local ast_var)))
(define-inline (local-key::long o::local) (-> |#!bigloo_wallow| o key))
(define-inline (local-key-set! o::local v::long) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (local-user?::bool o::local) (-> |#!bigloo_wallow| o user?))
(define-inline (local-user?-set! o::local v::bool) (set! (-> |#!bigloo_wallow| o user?) v))
(define-inline (local-occurrence::long o::local) (-> |#!bigloo_wallow| o occurrence))
(define-inline (local-occurrence-set! o::local v::long) (set! (-> |#!bigloo_wallow| o occurrence) v))
(define-inline (local-removable::obj o::local) (-> |#!bigloo_wallow| o removable))
(define-inline (local-removable-set! o::local v::obj) (set! (-> |#!bigloo_wallow| o removable) v))
(define-inline (local-fast-alpha::obj o::local) (-> |#!bigloo_wallow| o fast-alpha))
(define-inline (local-fast-alpha-set! o::local v::obj) (set! (-> |#!bigloo_wallow| o fast-alpha) v))
(define-inline (local-access::obj o::local) (-> |#!bigloo_wallow| o access))
(define-inline (local-access-set! o::local v::obj) (set! (-> |#!bigloo_wallow| o access) v))
(define-inline (local-value::value o::local) (-> |#!bigloo_wallow| o value))
(define-inline (local-value-set! o::local v::value) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (local-type::type o::local) (-> |#!bigloo_wallow| o type))
(define-inline (local-type-set! o::local v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (local-name::obj o::local) (-> |#!bigloo_wallow| o name))
(define-inline (local-name-set! o::local v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (local-id::symbol o::local) (-> |#!bigloo_wallow| o id))
(define-inline (local-id-set! o::local v::symbol) (set! (-> |#!bigloo_wallow| o id) v))

;; fun
(define-inline (make-fun::fun arity1203::long side-effect?1204::obj predicate-of1205::obj stack-allocator1206::obj top?1207::bool the-closure1208::obj effect1209::obj) (instantiate::fun (arity arity1203) (side-effect? side-effect?1204) (predicate-of predicate-of1205) (stack-allocator stack-allocator1206) (top? top?1207) (the-closure the-closure1208) (effect effect1209)))
(define-inline (fun?::bool obj::obj) ((@ isa? __object) obj (@ fun ast_var)))
(define (fun-nil::fun) (class-nil (@ fun ast_var)))
(define-inline (fun-effect::obj o::fun) (-> |#!bigloo_wallow| o effect))
(define-inline (fun-effect-set! o::fun v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (fun-the-closure::obj o::fun) (-> |#!bigloo_wallow| o the-closure))
(define-inline (fun-the-closure-set! o::fun v::obj) (set! (-> |#!bigloo_wallow| o the-closure) v))
(define-inline (fun-top?::bool o::fun) (-> |#!bigloo_wallow| o top?))
(define-inline (fun-top?-set! o::fun v::bool) (set! (-> |#!bigloo_wallow| o top?) v))
(define-inline (fun-stack-allocator::obj o::fun) (-> |#!bigloo_wallow| o stack-allocator))
(define-inline (fun-stack-allocator-set! o::fun v::obj) (set! (-> |#!bigloo_wallow| o stack-allocator) v))
(define-inline (fun-predicate-of::obj o::fun) (-> |#!bigloo_wallow| o predicate-of))
(define-inline (fun-predicate-of-set! o::fun v::obj) (set! (-> |#!bigloo_wallow| o predicate-of) v))
(define-inline (fun-side-effect?::obj o::fun) (-> |#!bigloo_wallow| o side-effect?))
(define-inline (fun-side-effect?-set! o::fun v::obj) (set! (-> |#!bigloo_wallow| o side-effect?) v))
(define-inline (fun-arity::long o::fun) (-> |#!bigloo_wallow| o arity))
(define-inline (fun-arity-set! o::fun v::long) (set! (-> |#!bigloo_wallow| o arity) v))

;; sfun
(define-inline (make-sfun::sfun arity1189::long side-effect?1190::obj predicate-of1191::obj stack-allocator1192::obj top?1193::bool the-closure1194::obj effect1195::obj property1196::obj args1197::obj body1198::obj class1199::obj dsssl-keywords1200::obj loc1201::obj) (instantiate::sfun (arity arity1189) (side-effect? side-effect?1190) (predicate-of predicate-of1191) (stack-allocator stack-allocator1192) (top? top?1193) (the-closure the-closure1194) (effect effect1195) (property property1196) (args args1197) (body body1198) (class class1199) (dsssl-keywords dsssl-keywords1200) (loc loc1201)))
(define-inline (sfun?::bool obj::obj) ((@ isa? __object) obj (@ sfun ast_var)))
(define (sfun-nil::sfun) (class-nil (@ sfun ast_var)))
(define-inline (sfun-loc::obj o::sfun) (-> |#!bigloo_wallow| o loc))
(define-inline (sfun-loc-set! o::sfun v::obj) (set! (-> |#!bigloo_wallow| o loc) v))
(define-inline (sfun-dsssl-keywords::obj o::sfun) (-> |#!bigloo_wallow| o dsssl-keywords))
(define-inline (sfun-dsssl-keywords-set! o::sfun v::obj) (set! (-> |#!bigloo_wallow| o dsssl-keywords) v))
(define-inline (sfun-class::obj o::sfun) (-> |#!bigloo_wallow| o class))
(define-inline (sfun-class-set! o::sfun v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (sfun-body::obj o::sfun) (-> |#!bigloo_wallow| o body))
(define-inline (sfun-body-set! o::sfun v::obj) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (sfun-args::obj o::sfun) (-> |#!bigloo_wallow| o args))
(define-inline (sfun-args-set! o::sfun v::obj) (set! (-> |#!bigloo_wallow| o args) v))
(define-inline (sfun-property::obj o::sfun) (-> |#!bigloo_wallow| o property))
(define-inline (sfun-property-set! o::sfun v::obj) (set! (-> |#!bigloo_wallow| o property) v))
(define-inline (sfun-effect::obj o::sfun) (-> |#!bigloo_wallow| o effect))
(define-inline (sfun-effect-set! o::sfun v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (sfun-the-closure::obj o::sfun) (-> |#!bigloo_wallow| o the-closure))
(define-inline (sfun-the-closure-set! o::sfun v::obj) (set! (-> |#!bigloo_wallow| o the-closure) v))
(define-inline (sfun-top?::bool o::sfun) (-> |#!bigloo_wallow| o top?))
(define-inline (sfun-top?-set! o::sfun v::bool) (set! (-> |#!bigloo_wallow| o top?) v))
(define-inline (sfun-stack-allocator::obj o::sfun) (-> |#!bigloo_wallow| o stack-allocator))
(define-inline (sfun-stack-allocator-set! o::sfun v::obj) (set! (-> |#!bigloo_wallow| o stack-allocator) v))
(define-inline (sfun-predicate-of::obj o::sfun) (-> |#!bigloo_wallow| o predicate-of))
(define-inline (sfun-predicate-of-set! o::sfun v::obj) (set! (-> |#!bigloo_wallow| o predicate-of) v))
(define-inline (sfun-side-effect?::obj o::sfun) (-> |#!bigloo_wallow| o side-effect?))
(define-inline (sfun-side-effect?-set! o::sfun v::obj) (set! (-> |#!bigloo_wallow| o side-effect?) v))
(define-inline (sfun-arity::long o::sfun) (-> |#!bigloo_wallow| o arity))
(define-inline (sfun-arity-set! o::sfun v::long) (set! (-> |#!bigloo_wallow| o arity) v))

;; cfun
(define-inline (make-cfun::cfun arity1176::long side-effect?1177::obj predicate-of1178::obj stack-allocator1179::obj top?1180::bool the-closure1181::obj effect1182::obj args-type1183::obj macro?1184::bool infix?1185::bool method1187::pair-nil) (instantiate::cfun (arity arity1176) (side-effect? side-effect?1177) (predicate-of predicate-of1178) (stack-allocator stack-allocator1179) (top? top?1180) (the-closure the-closure1181) (effect effect1182) (args-type args-type1183) (macro? macro?1184) (infix? infix?1185) (method method1187)))
(define-inline (cfun?::bool obj::obj) ((@ isa? __object) obj (@ cfun ast_var)))
(define (cfun-nil::cfun) (class-nil (@ cfun ast_var)))
(define-inline (cfun-method::pair-nil o::cfun) (-> |#!bigloo_wallow| o method))
(define-inline (cfun-method-set! o::cfun v::pair-nil) (set! (-> |#!bigloo_wallow| o method) v))
(define-inline (cfun-infix?::bool o::cfun) (-> |#!bigloo_wallow| o infix?))
(define-inline (cfun-infix?-set! o::cfun v::bool) (set! (-> |#!bigloo_wallow| o infix?) v))
(define-inline (cfun-macro?::bool o::cfun) (-> |#!bigloo_wallow| o macro?))
(define-inline (cfun-macro?-set! o::cfun v::bool) (set! (-> |#!bigloo_wallow| o macro?) v))
(define-inline (cfun-args-type::obj o::cfun) (-> |#!bigloo_wallow| o args-type))
(define-inline (cfun-args-type-set! o::cfun v::obj) (set! (-> |#!bigloo_wallow| o args-type) v))
(define-inline (cfun-effect::obj o::cfun) (-> |#!bigloo_wallow| o effect))
(define-inline (cfun-effect-set! o::cfun v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (cfun-the-closure::obj o::cfun) (-> |#!bigloo_wallow| o the-closure))
(define-inline (cfun-the-closure-set! o::cfun v::obj) (set! (-> |#!bigloo_wallow| o the-closure) v))
(define-inline (cfun-top?::bool o::cfun) (-> |#!bigloo_wallow| o top?))
(define-inline (cfun-top?-set! o::cfun v::bool) (set! (-> |#!bigloo_wallow| o top?) v))
(define-inline (cfun-stack-allocator::obj o::cfun) (-> |#!bigloo_wallow| o stack-allocator))
(define-inline (cfun-stack-allocator-set! o::cfun v::obj) (set! (-> |#!bigloo_wallow| o stack-allocator) v))
(define-inline (cfun-predicate-of::obj o::cfun) (-> |#!bigloo_wallow| o predicate-of))
(define-inline (cfun-predicate-of-set! o::cfun v::obj) (set! (-> |#!bigloo_wallow| o predicate-of) v))
(define-inline (cfun-side-effect?::obj o::cfun) (-> |#!bigloo_wallow| o side-effect?))
(define-inline (cfun-side-effect?-set! o::cfun v::obj) (set! (-> |#!bigloo_wallow| o side-effect?) v))
(define-inline (cfun-arity::long o::cfun) (-> |#!bigloo_wallow| o arity))
(define-inline (cfun-arity-set! o::cfun v::long) (set! (-> |#!bigloo_wallow| o arity) v))

;; svar
(define-inline (make-svar::svar loc1174::obj) (instantiate::svar (loc loc1174)))
(define-inline (svar?::bool obj::obj) ((@ isa? __object) obj (@ svar ast_var)))
(define (svar-nil::svar) (class-nil (@ svar ast_var)))
(define-inline (svar-loc::obj o::svar) (-> |#!bigloo_wallow| o loc))
(define-inline (svar-loc-set! o::svar v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; scnst
(define-inline (make-scnst::scnst node1170::obj class1171::obj loc1172::obj) (instantiate::scnst (node node1170) (class class1171) (loc loc1172)))
(define-inline (scnst?::bool obj::obj) ((@ isa? __object) obj (@ scnst ast_var)))
(define (scnst-nil::scnst) (class-nil (@ scnst ast_var)))
(define-inline (scnst-loc::obj o::scnst) (-> |#!bigloo_wallow| o loc))
(define-inline (scnst-loc-set! o::scnst v::obj) (set! (-> |#!bigloo_wallow| o loc) v))
(define-inline (scnst-class::obj o::scnst) (-> |#!bigloo_wallow| o class))
(define-inline (scnst-class-set! o::scnst v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (scnst-node::obj o::scnst) (-> |#!bigloo_wallow| o node))
(define-inline (scnst-node-set! o::scnst v::obj) (set! (-> |#!bigloo_wallow| o node) v))

;; cvar
(define-inline (make-cvar::cvar macro?1168::bool) (instantiate::cvar (macro? macro?1168)))
(define-inline (cvar?::bool obj::obj) ((@ isa? __object) obj (@ cvar ast_var)))
(define (cvar-nil::cvar) (class-nil (@ cvar ast_var)))
(define-inline (cvar-macro?::bool o::cvar) (-> |#!bigloo_wallow| o macro?))
(define-inline (cvar-macro?-set! o::cvar v::bool) (set! (-> |#!bigloo_wallow| o macro?) v))

;; sexit
(define-inline (make-sexit::sexit handler1165::obj detached?1166::bool) (instantiate::sexit (handler handler1165) (detached? detached?1166)))
(define-inline (sexit?::bool obj::obj) ((@ isa? __object) obj (@ sexit ast_var)))
(define (sexit-nil::sexit) (class-nil (@ sexit ast_var)))
(define-inline (sexit-detached?::bool o::sexit) (-> |#!bigloo_wallow| o detached?))
(define-inline (sexit-detached?-set! o::sexit v::bool) (set! (-> |#!bigloo_wallow| o detached?) v))
(define-inline (sexit-handler::obj o::sexit) (-> |#!bigloo_wallow| o handler))
(define-inline (sexit-handler-set! o::sexit v::obj) (set! (-> |#!bigloo_wallow| o handler) v))

;; feffect
(define-inline (make-feffect::feffect read1162::obj write1163::obj) (instantiate::feffect (read read1162) (write write1163)))
(define-inline (feffect?::bool obj::obj) ((@ isa? __object) obj (@ feffect ast_var)))
(define (feffect-nil::feffect) (class-nil (@ feffect ast_var)))
(define-inline (feffect-write::obj o::feffect) (-> |#!bigloo_wallow| o write))
(define-inline (feffect-write-set! o::feffect v::obj) (set! (-> |#!bigloo_wallow| o write) v))
(define-inline (feffect-read::obj o::feffect) (-> |#!bigloo_wallow| o read))
(define-inline (feffect-read-set! o::feffect v::obj) (set! (-> |#!bigloo_wallow| o read) v))
))
