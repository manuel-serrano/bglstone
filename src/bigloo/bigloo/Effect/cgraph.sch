;; ==========================================================
;; Class accessors
;; Bigloo (4.7a)
;; Inria -- Sophia Antipolis     Thu Mar 6 07:34:14 AM CET 2025 
;; (bigloo -classgen Effect/cgraph.scm)
;; ==========================================================

;; The directives
(directives

;; local/from
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-local/from::local/from id1156::symbol name1157::obj type1158::type value1159::value access1160::obj fast-alpha1161::obj removable1162::obj occurrence1163::long user?1164::bool key1165::long from1166::obj)
    (inline local/from?::bool ::obj)
    (local/from-nil::local/from)
    (inline local/from-from::obj ::local/from)
    (inline local/from-from-set! ::local/from ::obj)
    (inline local/from-key::long ::local/from)
    (inline local/from-user?::bool ::local/from)
    (inline local/from-user?-set! ::local/from ::bool)
    (inline local/from-occurrence::long ::local/from)
    (inline local/from-occurrence-set! ::local/from ::long)
    (inline local/from-removable::obj ::local/from)
    (inline local/from-removable-set! ::local/from ::obj)
    (inline local/from-fast-alpha::obj ::local/from)
    (inline local/from-fast-alpha-set! ::local/from ::obj)
    (inline local/from-access::obj ::local/from)
    (inline local/from-access-set! ::local/from ::obj)
    (inline local/from-value::value ::local/from)
    (inline local/from-value-set! ::local/from ::value)
    (inline local/from-type::type ::local/from)
    (inline local/from-type-set! ::local/from ::type)
    (inline local/from-name::obj ::local/from)
    (inline local/from-name-set! ::local/from ::obj)
    (inline local/from-id::symbol ::local/from))))

;; global/from
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-global/from::global/from id1138::symbol name1139::obj type1140::type value1141::value access1142::obj fast-alpha1143::obj removable1144::obj occurrence1145::long module1146::symbol import1147::obj evaluable?1148::bool library?1149::bool user?1150::bool pragma1151::obj src1152::obj jvm-type-name1153::bstring from1154::obj)
    (inline global/from?::bool ::obj)
    (global/from-nil::global/from)
    (inline global/from-from::obj ::global/from)
    (inline global/from-from-set! ::global/from ::obj)
    (inline global/from-jvm-type-name::bstring ::global/from)
    (inline global/from-jvm-type-name-set! ::global/from ::bstring)
    (inline global/from-src::obj ::global/from)
    (inline global/from-src-set! ::global/from ::obj)
    (inline global/from-pragma::obj ::global/from)
    (inline global/from-pragma-set! ::global/from ::obj)
    (inline global/from-user?::bool ::global/from)
    (inline global/from-user?-set! ::global/from ::bool)
    (inline global/from-library?::bool ::global/from)
    (inline global/from-library?-set! ::global/from ::bool)
    (inline global/from-evaluable?::bool ::global/from)
    (inline global/from-evaluable?-set! ::global/from ::bool)
    (inline global/from-import::obj ::global/from)
    (inline global/from-import-set! ::global/from ::obj)
    (inline global/from-module::symbol ::global/from)
    (inline global/from-module-set! ::global/from ::symbol)
    (inline global/from-occurrence::long ::global/from)
    (inline global/from-occurrence-set! ::global/from ::long)
    (inline global/from-removable::obj ::global/from)
    (inline global/from-removable-set! ::global/from ::obj)
    (inline global/from-fast-alpha::obj ::global/from)
    (inline global/from-fast-alpha-set! ::global/from ::obj)
    (inline global/from-access::obj ::global/from)
    (inline global/from-access-set! ::global/from ::obj)
    (inline global/from-value::value ::global/from)
    (inline global/from-value-set! ::global/from ::value)
    (inline global/from-type::type ::global/from)
    (inline global/from-type-set! ::global/from ::type)
    (inline global/from-name::obj ::global/from)
    (inline global/from-name-set! ::global/from ::obj)
    (inline global/from-id::symbol ::global/from)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; local/from
(define-inline (make-local/from::local/from id1156::symbol name1157::obj type1158::type value1159::value access1160::obj fast-alpha1161::obj removable1162::obj occurrence1163::long user?1164::bool key1165::long from1166::obj) (instantiate::local/from (id id1156) (name name1157) (type type1158) (value value1159) (access access1160) (fast-alpha fast-alpha1161) (removable removable1162) (occurrence occurrence1163) (user? user?1164) (key key1165) (from from1166)))
(define-inline (local/from?::bool obj::obj) ((@ isa? __object) obj (@ local/from effect_cgraph)))
(define (local/from-nil::local/from) (class-nil (@ local/from effect_cgraph)))
(define-inline (local/from-from::obj o::local/from) (-> |#!bigloo_wallow| o from))
(define-inline (local/from-from-set! o::local/from v::obj) (set! (-> |#!bigloo_wallow| o from) v))
(define-inline (local/from-key::long o::local/from) (-> |#!bigloo_wallow| o key))
(define-inline (local/from-key-set! o::local/from v::long) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (local/from-user?::bool o::local/from) (-> |#!bigloo_wallow| o user?))
(define-inline (local/from-user?-set! o::local/from v::bool) (set! (-> |#!bigloo_wallow| o user?) v))
(define-inline (local/from-occurrence::long o::local/from) (-> |#!bigloo_wallow| o occurrence))
(define-inline (local/from-occurrence-set! o::local/from v::long) (set! (-> |#!bigloo_wallow| o occurrence) v))
(define-inline (local/from-removable::obj o::local/from) (-> |#!bigloo_wallow| o removable))
(define-inline (local/from-removable-set! o::local/from v::obj) (set! (-> |#!bigloo_wallow| o removable) v))
(define-inline (local/from-fast-alpha::obj o::local/from) (-> |#!bigloo_wallow| o fast-alpha))
(define-inline (local/from-fast-alpha-set! o::local/from v::obj) (set! (-> |#!bigloo_wallow| o fast-alpha) v))
(define-inline (local/from-access::obj o::local/from) (-> |#!bigloo_wallow| o access))
(define-inline (local/from-access-set! o::local/from v::obj) (set! (-> |#!bigloo_wallow| o access) v))
(define-inline (local/from-value::value o::local/from) (-> |#!bigloo_wallow| o value))
(define-inline (local/from-value-set! o::local/from v::value) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (local/from-type::type o::local/from) (-> |#!bigloo_wallow| o type))
(define-inline (local/from-type-set! o::local/from v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (local/from-name::obj o::local/from) (-> |#!bigloo_wallow| o name))
(define-inline (local/from-name-set! o::local/from v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (local/from-id::symbol o::local/from) (-> |#!bigloo_wallow| o id))
(define-inline (local/from-id-set! o::local/from v::symbol) (set! (-> |#!bigloo_wallow| o id) v))

;; global/from
(define-inline (make-global/from::global/from id1138::symbol name1139::obj type1140::type value1141::value access1142::obj fast-alpha1143::obj removable1144::obj occurrence1145::long module1146::symbol import1147::obj evaluable?1148::bool library?1149::bool user?1150::bool pragma1151::obj src1152::obj jvm-type-name1153::bstring from1154::obj) (instantiate::global/from (id id1138) (name name1139) (type type1140) (value value1141) (access access1142) (fast-alpha fast-alpha1143) (removable removable1144) (occurrence occurrence1145) (module module1146) (import import1147) (evaluable? evaluable?1148) (library? library?1149) (user? user?1150) (pragma pragma1151) (src src1152) (jvm-type-name jvm-type-name1153) (from from1154)))
(define-inline (global/from?::bool obj::obj) ((@ isa? __object) obj (@ global/from effect_cgraph)))
(define (global/from-nil::global/from) (class-nil (@ global/from effect_cgraph)))
(define-inline (global/from-from::obj o::global/from) (-> |#!bigloo_wallow| o from))
(define-inline (global/from-from-set! o::global/from v::obj) (set! (-> |#!bigloo_wallow| o from) v))
(define-inline (global/from-jvm-type-name::bstring o::global/from) (-> |#!bigloo_wallow| o jvm-type-name))
(define-inline (global/from-jvm-type-name-set! o::global/from v::bstring) (set! (-> |#!bigloo_wallow| o jvm-type-name) v))
(define-inline (global/from-src::obj o::global/from) (-> |#!bigloo_wallow| o src))
(define-inline (global/from-src-set! o::global/from v::obj) (set! (-> |#!bigloo_wallow| o src) v))
(define-inline (global/from-pragma::obj o::global/from) (-> |#!bigloo_wallow| o pragma))
(define-inline (global/from-pragma-set! o::global/from v::obj) (set! (-> |#!bigloo_wallow| o pragma) v))
(define-inline (global/from-user?::bool o::global/from) (-> |#!bigloo_wallow| o user?))
(define-inline (global/from-user?-set! o::global/from v::bool) (set! (-> |#!bigloo_wallow| o user?) v))
(define-inline (global/from-library?::bool o::global/from) (-> |#!bigloo_wallow| o library?))
(define-inline (global/from-library?-set! o::global/from v::bool) (set! (-> |#!bigloo_wallow| o library?) v))
(define-inline (global/from-evaluable?::bool o::global/from) (-> |#!bigloo_wallow| o evaluable?))
(define-inline (global/from-evaluable?-set! o::global/from v::bool) (set! (-> |#!bigloo_wallow| o evaluable?) v))
(define-inline (global/from-import::obj o::global/from) (-> |#!bigloo_wallow| o import))
(define-inline (global/from-import-set! o::global/from v::obj) (set! (-> |#!bigloo_wallow| o import) v))
(define-inline (global/from-module::symbol o::global/from) (-> |#!bigloo_wallow| o module))
(define-inline (global/from-module-set! o::global/from v::symbol) (set! (-> |#!bigloo_wallow| o module) v))
(define-inline (global/from-occurrence::long o::global/from) (-> |#!bigloo_wallow| o occurrence))
(define-inline (global/from-occurrence-set! o::global/from v::long) (set! (-> |#!bigloo_wallow| o occurrence) v))
(define-inline (global/from-removable::obj o::global/from) (-> |#!bigloo_wallow| o removable))
(define-inline (global/from-removable-set! o::global/from v::obj) (set! (-> |#!bigloo_wallow| o removable) v))
(define-inline (global/from-fast-alpha::obj o::global/from) (-> |#!bigloo_wallow| o fast-alpha))
(define-inline (global/from-fast-alpha-set! o::global/from v::obj) (set! (-> |#!bigloo_wallow| o fast-alpha) v))
(define-inline (global/from-access::obj o::global/from) (-> |#!bigloo_wallow| o access))
(define-inline (global/from-access-set! o::global/from v::obj) (set! (-> |#!bigloo_wallow| o access) v))
(define-inline (global/from-value::value o::global/from) (-> |#!bigloo_wallow| o value))
(define-inline (global/from-value-set! o::global/from v::value) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (global/from-type::type o::global/from) (-> |#!bigloo_wallow| o type))
(define-inline (global/from-type-set! o::global/from v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (global/from-name::obj o::global/from) (-> |#!bigloo_wallow| o name))
(define-inline (global/from-name-set! o::global/from v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (global/from-id::symbol o::global/from) (-> |#!bigloo_wallow| o id))
(define-inline (global/from-id-set! o::global/from v::symbol) (set! (-> |#!bigloo_wallow| o id) v))
))
