;; ==========================================================
;; Class accessors
;; Bigloo (4.7a)
;; Inria -- Sophia Antipolis     Thu Mar 6 07:34:14 AM CET 2025 
;; (bigloo -classgen Globalize/ginfo.scm)
;; ==========================================================

;; The directives
(directives

;; sfun/Ginfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-sfun/Ginfo::sfun/Ginfo arity1244::long side-effect?1245::obj predicate-of1246::obj stack-allocator1247::obj top?1248::bool the-closure1249::obj effect1250::obj property1251::obj args1252::obj body1253::obj class1254::obj dsssl-keywords1255::obj loc1256::obj G?1257::bool cfrom1258::obj cfrom*1259::obj cto1260::obj cto*1261::obj cfunction1262::obj integrator1263::obj imark1264::obj owner1265::obj integrated1266::obj plugged-in1267::obj mark1268::long free-mark1269::obj the-global1270::obj kaptured1271::obj new-body1272::obj bmark1273::long umark1274::long free1275::obj bound1276::obj)
    (inline sfun/Ginfo?::bool ::obj)
    (sfun/Ginfo-nil::sfun/Ginfo)
    (inline sfun/Ginfo-bound::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-bound-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-free::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-free-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-umark::long ::sfun/Ginfo)
    (inline sfun/Ginfo-umark-set! ::sfun/Ginfo ::long)
    (inline sfun/Ginfo-bmark::long ::sfun/Ginfo)
    (inline sfun/Ginfo-bmark-set! ::sfun/Ginfo ::long)
    (inline sfun/Ginfo-new-body::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-new-body-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-kaptured::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-kaptured-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-the-global::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-the-global-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-free-mark::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-free-mark-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-mark::long ::sfun/Ginfo)
    (inline sfun/Ginfo-mark-set! ::sfun/Ginfo ::long)
    (inline sfun/Ginfo-plugged-in::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-plugged-in-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-integrated::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-integrated-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-owner::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-owner-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-imark::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-imark-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-integrator::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-integrator-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-cfunction::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-cfunction-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-cto*::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-cto*-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-cto::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-cto-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-cfrom*::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-cfrom*-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-cfrom::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-cfrom-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-G?::bool ::sfun/Ginfo)
    (inline sfun/Ginfo-G?-set! ::sfun/Ginfo ::bool)
    (inline sfun/Ginfo-loc::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-loc-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-dsssl-keywords::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-dsssl-keywords-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-class::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-class-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-body::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-body-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-args::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-args-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-property::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-property-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-effect::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-effect-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-the-closure::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-the-closure-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-top?::bool ::sfun/Ginfo)
    (inline sfun/Ginfo-top?-set! ::sfun/Ginfo ::bool)
    (inline sfun/Ginfo-stack-allocator::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-stack-allocator-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-predicate-of::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-predicate-of-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-side-effect?::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-side-effect?-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-arity::long ::sfun/Ginfo))))

;; svar/Ginfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-svar/Ginfo::svar/Ginfo loc1238::obj kaptured?1239::bool free-mark1240::long mark1241::long celled?1242::bool)
    (inline svar/Ginfo?::bool ::obj)
    (svar/Ginfo-nil::svar/Ginfo)
    (inline svar/Ginfo-celled?::bool ::svar/Ginfo)
    (inline svar/Ginfo-celled?-set! ::svar/Ginfo ::bool)
    (inline svar/Ginfo-mark::long ::svar/Ginfo)
    (inline svar/Ginfo-mark-set! ::svar/Ginfo ::long)
    (inline svar/Ginfo-free-mark::long ::svar/Ginfo)
    (inline svar/Ginfo-free-mark-set! ::svar/Ginfo ::long)
    (inline svar/Ginfo-kaptured?::bool ::svar/Ginfo)
    (inline svar/Ginfo-kaptured?-set! ::svar/Ginfo ::bool)
    (inline svar/Ginfo-loc::obj ::svar/Ginfo)
    (inline svar/Ginfo-loc-set! ::svar/Ginfo ::obj))))

;; sexit/Ginfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-sexit/Ginfo::sexit/Ginfo handler1231::obj detached?1232::bool G?1233::bool kaptured?1234::bool free-mark1235::long mark1236::long)
    (inline sexit/Ginfo?::bool ::obj)
    (sexit/Ginfo-nil::sexit/Ginfo)
    (inline sexit/Ginfo-mark::long ::sexit/Ginfo)
    (inline sexit/Ginfo-mark-set! ::sexit/Ginfo ::long)
    (inline sexit/Ginfo-free-mark::long ::sexit/Ginfo)
    (inline sexit/Ginfo-free-mark-set! ::sexit/Ginfo ::long)
    (inline sexit/Ginfo-kaptured?::bool ::sexit/Ginfo)
    (inline sexit/Ginfo-kaptured?-set! ::sexit/Ginfo ::bool)
    (inline sexit/Ginfo-G?::bool ::sexit/Ginfo)
    (inline sexit/Ginfo-G?-set! ::sexit/Ginfo ::bool)
    (inline sexit/Ginfo-detached?::bool ::sexit/Ginfo)
    (inline sexit/Ginfo-detached?-set! ::sexit/Ginfo ::bool)
    (inline sexit/Ginfo-handler::obj ::sexit/Ginfo)
    (inline sexit/Ginfo-handler-set! ::sexit/Ginfo ::obj))))

;; local/Ginfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-local/Ginfo::local/Ginfo id1219::symbol name1220::obj type1221::type value1222::value access1223::obj fast-alpha1224::obj removable1225::obj occurrence1226::long user?1227::bool key1228::long escape?1229::bool)
    (inline local/Ginfo?::bool ::obj)
    (local/Ginfo-nil::local/Ginfo)
    (inline local/Ginfo-escape?::bool ::local/Ginfo)
    (inline local/Ginfo-escape?-set! ::local/Ginfo ::bool)
    (inline local/Ginfo-key::long ::local/Ginfo)
    (inline local/Ginfo-user?::bool ::local/Ginfo)
    (inline local/Ginfo-user?-set! ::local/Ginfo ::bool)
    (inline local/Ginfo-occurrence::long ::local/Ginfo)
    (inline local/Ginfo-occurrence-set! ::local/Ginfo ::long)
    (inline local/Ginfo-removable::obj ::local/Ginfo)
    (inline local/Ginfo-removable-set! ::local/Ginfo ::obj)
    (inline local/Ginfo-fast-alpha::obj ::local/Ginfo)
    (inline local/Ginfo-fast-alpha-set! ::local/Ginfo ::obj)
    (inline local/Ginfo-access::obj ::local/Ginfo)
    (inline local/Ginfo-access-set! ::local/Ginfo ::obj)
    (inline local/Ginfo-value::value ::local/Ginfo)
    (inline local/Ginfo-value-set! ::local/Ginfo ::value)
    (inline local/Ginfo-type::type ::local/Ginfo)
    (inline local/Ginfo-type-set! ::local/Ginfo ::type)
    (inline local/Ginfo-name::obj ::local/Ginfo)
    (inline local/Ginfo-name-set! ::local/Ginfo ::obj)
    (inline local/Ginfo-id::symbol ::local/Ginfo))))

;; global/Ginfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-global/Ginfo::global/Ginfo id1200::symbol name1201::obj type1202::type value1203::value access1204::obj fast-alpha1205::obj removable1206::obj occurrence1207::long module1208::symbol import1209::obj evaluable?1210::bool library?1211::bool user?1212::bool pragma1213::obj src1214::obj jvm-type-name1215::bstring escape?1216::bool global-closure1217::obj)
    (inline global/Ginfo?::bool ::obj)
    (global/Ginfo-nil::global/Ginfo)
    (inline global/Ginfo-global-closure::obj ::global/Ginfo)
    (inline global/Ginfo-global-closure-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-escape?::bool ::global/Ginfo)
    (inline global/Ginfo-escape?-set! ::global/Ginfo ::bool)
    (inline global/Ginfo-jvm-type-name::bstring ::global/Ginfo)
    (inline global/Ginfo-jvm-type-name-set! ::global/Ginfo ::bstring)
    (inline global/Ginfo-src::obj ::global/Ginfo)
    (inline global/Ginfo-src-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-pragma::obj ::global/Ginfo)
    (inline global/Ginfo-pragma-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-user?::bool ::global/Ginfo)
    (inline global/Ginfo-user?-set! ::global/Ginfo ::bool)
    (inline global/Ginfo-library?::bool ::global/Ginfo)
    (inline global/Ginfo-library?-set! ::global/Ginfo ::bool)
    (inline global/Ginfo-evaluable?::bool ::global/Ginfo)
    (inline global/Ginfo-evaluable?-set! ::global/Ginfo ::bool)
    (inline global/Ginfo-import::obj ::global/Ginfo)
    (inline global/Ginfo-import-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-module::symbol ::global/Ginfo)
    (inline global/Ginfo-module-set! ::global/Ginfo ::symbol)
    (inline global/Ginfo-occurrence::long ::global/Ginfo)
    (inline global/Ginfo-occurrence-set! ::global/Ginfo ::long)
    (inline global/Ginfo-removable::obj ::global/Ginfo)
    (inline global/Ginfo-removable-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-fast-alpha::obj ::global/Ginfo)
    (inline global/Ginfo-fast-alpha-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-access::obj ::global/Ginfo)
    (inline global/Ginfo-access-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-value::value ::global/Ginfo)
    (inline global/Ginfo-value-set! ::global/Ginfo ::value)
    (inline global/Ginfo-type::type ::global/Ginfo)
    (inline global/Ginfo-type-set! ::global/Ginfo ::type)
    (inline global/Ginfo-name::obj ::global/Ginfo)
    (inline global/Ginfo-name-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-id::symbol ::global/Ginfo)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; sfun/Ginfo
(define-inline (make-sfun/Ginfo::sfun/Ginfo arity1244::long side-effect?1245::obj predicate-of1246::obj stack-allocator1247::obj top?1248::bool the-closure1249::obj effect1250::obj property1251::obj args1252::obj body1253::obj class1254::obj dsssl-keywords1255::obj loc1256::obj G?1257::bool cfrom1258::obj cfrom*1259::obj cto1260::obj cto*1261::obj cfunction1262::obj integrator1263::obj imark1264::obj owner1265::obj integrated1266::obj plugged-in1267::obj mark1268::long free-mark1269::obj the-global1270::obj kaptured1271::obj new-body1272::obj bmark1273::long umark1274::long free1275::obj bound1276::obj) (instantiate::sfun/Ginfo (arity arity1244) (side-effect? side-effect?1245) (predicate-of predicate-of1246) (stack-allocator stack-allocator1247) (top? top?1248) (the-closure the-closure1249) (effect effect1250) (property property1251) (args args1252) (body body1253) (class class1254) (dsssl-keywords dsssl-keywords1255) (loc loc1256) (G? G?1257) (cfrom cfrom1258) (cfrom* cfrom*1259) (cto cto1260) (cto* cto*1261) (cfunction cfunction1262) (integrator integrator1263) (imark imark1264) (owner owner1265) (integrated integrated1266) (plugged-in plugged-in1267) (mark mark1268) (free-mark free-mark1269) (the-global the-global1270) (kaptured kaptured1271) (new-body new-body1272) (bmark bmark1273) (umark umark1274) (free free1275) (bound bound1276)))
(define-inline (sfun/Ginfo?::bool obj::obj) ((@ isa? __object) obj (@ sfun/Ginfo globalize_ginfo)))
(define (sfun/Ginfo-nil::sfun/Ginfo) (class-nil (@ sfun/Ginfo globalize_ginfo)))
(define-inline (sfun/Ginfo-bound::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o bound))
(define-inline (sfun/Ginfo-bound-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o bound) v))
(define-inline (sfun/Ginfo-free::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o free))
(define-inline (sfun/Ginfo-free-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o free) v))
(define-inline (sfun/Ginfo-umark::long o::sfun/Ginfo) (-> |#!bigloo_wallow| o umark))
(define-inline (sfun/Ginfo-umark-set! o::sfun/Ginfo v::long) (set! (-> |#!bigloo_wallow| o umark) v))
(define-inline (sfun/Ginfo-bmark::long o::sfun/Ginfo) (-> |#!bigloo_wallow| o bmark))
(define-inline (sfun/Ginfo-bmark-set! o::sfun/Ginfo v::long) (set! (-> |#!bigloo_wallow| o bmark) v))
(define-inline (sfun/Ginfo-new-body::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o new-body))
(define-inline (sfun/Ginfo-new-body-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o new-body) v))
(define-inline (sfun/Ginfo-kaptured::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o kaptured))
(define-inline (sfun/Ginfo-kaptured-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o kaptured) v))
(define-inline (sfun/Ginfo-the-global::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o the-global))
(define-inline (sfun/Ginfo-the-global-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o the-global) v))
(define-inline (sfun/Ginfo-free-mark::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o free-mark))
(define-inline (sfun/Ginfo-free-mark-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o free-mark) v))
(define-inline (sfun/Ginfo-mark::long o::sfun/Ginfo) (-> |#!bigloo_wallow| o mark))
(define-inline (sfun/Ginfo-mark-set! o::sfun/Ginfo v::long) (set! (-> |#!bigloo_wallow| o mark) v))
(define-inline (sfun/Ginfo-plugged-in::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o plugged-in))
(define-inline (sfun/Ginfo-plugged-in-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o plugged-in) v))
(define-inline (sfun/Ginfo-integrated::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o integrated))
(define-inline (sfun/Ginfo-integrated-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o integrated) v))
(define-inline (sfun/Ginfo-owner::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o owner))
(define-inline (sfun/Ginfo-owner-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o owner) v))
(define-inline (sfun/Ginfo-imark::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o imark))
(define-inline (sfun/Ginfo-imark-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o imark) v))
(define-inline (sfun/Ginfo-integrator::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o integrator))
(define-inline (sfun/Ginfo-integrator-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o integrator) v))
(define-inline (sfun/Ginfo-cfunction::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o cfunction))
(define-inline (sfun/Ginfo-cfunction-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o cfunction) v))
(define-inline (sfun/Ginfo-cto*::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o cto*))
(define-inline (sfun/Ginfo-cto*-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o cto*) v))
(define-inline (sfun/Ginfo-cto::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o cto))
(define-inline (sfun/Ginfo-cto-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o cto) v))
(define-inline (sfun/Ginfo-cfrom*::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o cfrom*))
(define-inline (sfun/Ginfo-cfrom*-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o cfrom*) v))
(define-inline (sfun/Ginfo-cfrom::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o cfrom))
(define-inline (sfun/Ginfo-cfrom-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o cfrom) v))
(define-inline (sfun/Ginfo-G?::bool o::sfun/Ginfo) (-> |#!bigloo_wallow| o G?))
(define-inline (sfun/Ginfo-G?-set! o::sfun/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o G?) v))
(define-inline (sfun/Ginfo-loc::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o loc))
(define-inline (sfun/Ginfo-loc-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))
(define-inline (sfun/Ginfo-dsssl-keywords::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o dsssl-keywords))
(define-inline (sfun/Ginfo-dsssl-keywords-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o dsssl-keywords) v))
(define-inline (sfun/Ginfo-class::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o class))
(define-inline (sfun/Ginfo-class-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (sfun/Ginfo-body::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o body))
(define-inline (sfun/Ginfo-body-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (sfun/Ginfo-args::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o args))
(define-inline (sfun/Ginfo-args-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o args) v))
(define-inline (sfun/Ginfo-property::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o property))
(define-inline (sfun/Ginfo-property-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o property) v))
(define-inline (sfun/Ginfo-effect::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o effect))
(define-inline (sfun/Ginfo-effect-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (sfun/Ginfo-the-closure::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o the-closure))
(define-inline (sfun/Ginfo-the-closure-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o the-closure) v))
(define-inline (sfun/Ginfo-top?::bool o::sfun/Ginfo) (-> |#!bigloo_wallow| o top?))
(define-inline (sfun/Ginfo-top?-set! o::sfun/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o top?) v))
(define-inline (sfun/Ginfo-stack-allocator::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o stack-allocator))
(define-inline (sfun/Ginfo-stack-allocator-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o stack-allocator) v))
(define-inline (sfun/Ginfo-predicate-of::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o predicate-of))
(define-inline (sfun/Ginfo-predicate-of-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o predicate-of) v))
(define-inline (sfun/Ginfo-side-effect?::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o side-effect?))
(define-inline (sfun/Ginfo-side-effect?-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect?) v))
(define-inline (sfun/Ginfo-arity::long o::sfun/Ginfo) (-> |#!bigloo_wallow| o arity))
(define-inline (sfun/Ginfo-arity-set! o::sfun/Ginfo v::long) (set! (-> |#!bigloo_wallow| o arity) v))

;; svar/Ginfo
(define-inline (make-svar/Ginfo::svar/Ginfo loc1238::obj kaptured?1239::bool free-mark1240::long mark1241::long celled?1242::bool) (instantiate::svar/Ginfo (loc loc1238) (kaptured? kaptured?1239) (free-mark free-mark1240) (mark mark1241) (celled? celled?1242)))
(define-inline (svar/Ginfo?::bool obj::obj) ((@ isa? __object) obj (@ svar/Ginfo globalize_ginfo)))
(define (svar/Ginfo-nil::svar/Ginfo) (class-nil (@ svar/Ginfo globalize_ginfo)))
(define-inline (svar/Ginfo-celled?::bool o::svar/Ginfo) (-> |#!bigloo_wallow| o celled?))
(define-inline (svar/Ginfo-celled?-set! o::svar/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o celled?) v))
(define-inline (svar/Ginfo-mark::long o::svar/Ginfo) (-> |#!bigloo_wallow| o mark))
(define-inline (svar/Ginfo-mark-set! o::svar/Ginfo v::long) (set! (-> |#!bigloo_wallow| o mark) v))
(define-inline (svar/Ginfo-free-mark::long o::svar/Ginfo) (-> |#!bigloo_wallow| o free-mark))
(define-inline (svar/Ginfo-free-mark-set! o::svar/Ginfo v::long) (set! (-> |#!bigloo_wallow| o free-mark) v))
(define-inline (svar/Ginfo-kaptured?::bool o::svar/Ginfo) (-> |#!bigloo_wallow| o kaptured?))
(define-inline (svar/Ginfo-kaptured?-set! o::svar/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o kaptured?) v))
(define-inline (svar/Ginfo-loc::obj o::svar/Ginfo) (-> |#!bigloo_wallow| o loc))
(define-inline (svar/Ginfo-loc-set! o::svar/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; sexit/Ginfo
(define-inline (make-sexit/Ginfo::sexit/Ginfo handler1231::obj detached?1232::bool G?1233::bool kaptured?1234::bool free-mark1235::long mark1236::long) (instantiate::sexit/Ginfo (handler handler1231) (detached? detached?1232) (G? G?1233) (kaptured? kaptured?1234) (free-mark free-mark1235) (mark mark1236)))
(define-inline (sexit/Ginfo?::bool obj::obj) ((@ isa? __object) obj (@ sexit/Ginfo globalize_ginfo)))
(define (sexit/Ginfo-nil::sexit/Ginfo) (class-nil (@ sexit/Ginfo globalize_ginfo)))
(define-inline (sexit/Ginfo-mark::long o::sexit/Ginfo) (-> |#!bigloo_wallow| o mark))
(define-inline (sexit/Ginfo-mark-set! o::sexit/Ginfo v::long) (set! (-> |#!bigloo_wallow| o mark) v))
(define-inline (sexit/Ginfo-free-mark::long o::sexit/Ginfo) (-> |#!bigloo_wallow| o free-mark))
(define-inline (sexit/Ginfo-free-mark-set! o::sexit/Ginfo v::long) (set! (-> |#!bigloo_wallow| o free-mark) v))
(define-inline (sexit/Ginfo-kaptured?::bool o::sexit/Ginfo) (-> |#!bigloo_wallow| o kaptured?))
(define-inline (sexit/Ginfo-kaptured?-set! o::sexit/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o kaptured?) v))
(define-inline (sexit/Ginfo-G?::bool o::sexit/Ginfo) (-> |#!bigloo_wallow| o G?))
(define-inline (sexit/Ginfo-G?-set! o::sexit/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o G?) v))
(define-inline (sexit/Ginfo-detached?::bool o::sexit/Ginfo) (-> |#!bigloo_wallow| o detached?))
(define-inline (sexit/Ginfo-detached?-set! o::sexit/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o detached?) v))
(define-inline (sexit/Ginfo-handler::obj o::sexit/Ginfo) (-> |#!bigloo_wallow| o handler))
(define-inline (sexit/Ginfo-handler-set! o::sexit/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o handler) v))

;; local/Ginfo
(define-inline (make-local/Ginfo::local/Ginfo id1219::symbol name1220::obj type1221::type value1222::value access1223::obj fast-alpha1224::obj removable1225::obj occurrence1226::long user?1227::bool key1228::long escape?1229::bool) (instantiate::local/Ginfo (id id1219) (name name1220) (type type1221) (value value1222) (access access1223) (fast-alpha fast-alpha1224) (removable removable1225) (occurrence occurrence1226) (user? user?1227) (key key1228) (escape? escape?1229)))
(define-inline (local/Ginfo?::bool obj::obj) ((@ isa? __object) obj (@ local/Ginfo globalize_ginfo)))
(define (local/Ginfo-nil::local/Ginfo) (class-nil (@ local/Ginfo globalize_ginfo)))
(define-inline (local/Ginfo-escape?::bool o::local/Ginfo) (-> |#!bigloo_wallow| o escape?))
(define-inline (local/Ginfo-escape?-set! o::local/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o escape?) v))
(define-inline (local/Ginfo-key::long o::local/Ginfo) (-> |#!bigloo_wallow| o key))
(define-inline (local/Ginfo-key-set! o::local/Ginfo v::long) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (local/Ginfo-user?::bool o::local/Ginfo) (-> |#!bigloo_wallow| o user?))
(define-inline (local/Ginfo-user?-set! o::local/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o user?) v))
(define-inline (local/Ginfo-occurrence::long o::local/Ginfo) (-> |#!bigloo_wallow| o occurrence))
(define-inline (local/Ginfo-occurrence-set! o::local/Ginfo v::long) (set! (-> |#!bigloo_wallow| o occurrence) v))
(define-inline (local/Ginfo-removable::obj o::local/Ginfo) (-> |#!bigloo_wallow| o removable))
(define-inline (local/Ginfo-removable-set! o::local/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o removable) v))
(define-inline (local/Ginfo-fast-alpha::obj o::local/Ginfo) (-> |#!bigloo_wallow| o fast-alpha))
(define-inline (local/Ginfo-fast-alpha-set! o::local/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o fast-alpha) v))
(define-inline (local/Ginfo-access::obj o::local/Ginfo) (-> |#!bigloo_wallow| o access))
(define-inline (local/Ginfo-access-set! o::local/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o access) v))
(define-inline (local/Ginfo-value::value o::local/Ginfo) (-> |#!bigloo_wallow| o value))
(define-inline (local/Ginfo-value-set! o::local/Ginfo v::value) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (local/Ginfo-type::type o::local/Ginfo) (-> |#!bigloo_wallow| o type))
(define-inline (local/Ginfo-type-set! o::local/Ginfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (local/Ginfo-name::obj o::local/Ginfo) (-> |#!bigloo_wallow| o name))
(define-inline (local/Ginfo-name-set! o::local/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (local/Ginfo-id::symbol o::local/Ginfo) (-> |#!bigloo_wallow| o id))
(define-inline (local/Ginfo-id-set! o::local/Ginfo v::symbol) (set! (-> |#!bigloo_wallow| o id) v))

;; global/Ginfo
(define-inline (make-global/Ginfo::global/Ginfo id1200::symbol name1201::obj type1202::type value1203::value access1204::obj fast-alpha1205::obj removable1206::obj occurrence1207::long module1208::symbol import1209::obj evaluable?1210::bool library?1211::bool user?1212::bool pragma1213::obj src1214::obj jvm-type-name1215::bstring escape?1216::bool global-closure1217::obj) (instantiate::global/Ginfo (id id1200) (name name1201) (type type1202) (value value1203) (access access1204) (fast-alpha fast-alpha1205) (removable removable1206) (occurrence occurrence1207) (module module1208) (import import1209) (evaluable? evaluable?1210) (library? library?1211) (user? user?1212) (pragma pragma1213) (src src1214) (jvm-type-name jvm-type-name1215) (escape? escape?1216) (global-closure global-closure1217)))
(define-inline (global/Ginfo?::bool obj::obj) ((@ isa? __object) obj (@ global/Ginfo globalize_ginfo)))
(define (global/Ginfo-nil::global/Ginfo) (class-nil (@ global/Ginfo globalize_ginfo)))
(define-inline (global/Ginfo-global-closure::obj o::global/Ginfo) (-> |#!bigloo_wallow| o global-closure))
(define-inline (global/Ginfo-global-closure-set! o::global/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o global-closure) v))
(define-inline (global/Ginfo-escape?::bool o::global/Ginfo) (-> |#!bigloo_wallow| o escape?))
(define-inline (global/Ginfo-escape?-set! o::global/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o escape?) v))
(define-inline (global/Ginfo-jvm-type-name::bstring o::global/Ginfo) (-> |#!bigloo_wallow| o jvm-type-name))
(define-inline (global/Ginfo-jvm-type-name-set! o::global/Ginfo v::bstring) (set! (-> |#!bigloo_wallow| o jvm-type-name) v))
(define-inline (global/Ginfo-src::obj o::global/Ginfo) (-> |#!bigloo_wallow| o src))
(define-inline (global/Ginfo-src-set! o::global/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o src) v))
(define-inline (global/Ginfo-pragma::obj o::global/Ginfo) (-> |#!bigloo_wallow| o pragma))
(define-inline (global/Ginfo-pragma-set! o::global/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o pragma) v))
(define-inline (global/Ginfo-user?::bool o::global/Ginfo) (-> |#!bigloo_wallow| o user?))
(define-inline (global/Ginfo-user?-set! o::global/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o user?) v))
(define-inline (global/Ginfo-library?::bool o::global/Ginfo) (-> |#!bigloo_wallow| o library?))
(define-inline (global/Ginfo-library?-set! o::global/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o library?) v))
(define-inline (global/Ginfo-evaluable?::bool o::global/Ginfo) (-> |#!bigloo_wallow| o evaluable?))
(define-inline (global/Ginfo-evaluable?-set! o::global/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o evaluable?) v))
(define-inline (global/Ginfo-import::obj o::global/Ginfo) (-> |#!bigloo_wallow| o import))
(define-inline (global/Ginfo-import-set! o::global/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o import) v))
(define-inline (global/Ginfo-module::symbol o::global/Ginfo) (-> |#!bigloo_wallow| o module))
(define-inline (global/Ginfo-module-set! o::global/Ginfo v::symbol) (set! (-> |#!bigloo_wallow| o module) v))
(define-inline (global/Ginfo-occurrence::long o::global/Ginfo) (-> |#!bigloo_wallow| o occurrence))
(define-inline (global/Ginfo-occurrence-set! o::global/Ginfo v::long) (set! (-> |#!bigloo_wallow| o occurrence) v))
(define-inline (global/Ginfo-removable::obj o::global/Ginfo) (-> |#!bigloo_wallow| o removable))
(define-inline (global/Ginfo-removable-set! o::global/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o removable) v))
(define-inline (global/Ginfo-fast-alpha::obj o::global/Ginfo) (-> |#!bigloo_wallow| o fast-alpha))
(define-inline (global/Ginfo-fast-alpha-set! o::global/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o fast-alpha) v))
(define-inline (global/Ginfo-access::obj o::global/Ginfo) (-> |#!bigloo_wallow| o access))
(define-inline (global/Ginfo-access-set! o::global/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o access) v))
(define-inline (global/Ginfo-value::value o::global/Ginfo) (-> |#!bigloo_wallow| o value))
(define-inline (global/Ginfo-value-set! o::global/Ginfo v::value) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (global/Ginfo-type::type o::global/Ginfo) (-> |#!bigloo_wallow| o type))
(define-inline (global/Ginfo-type-set! o::global/Ginfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (global/Ginfo-name::obj o::global/Ginfo) (-> |#!bigloo_wallow| o name))
(define-inline (global/Ginfo-name-set! o::global/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (global/Ginfo-id::symbol o::global/Ginfo) (-> |#!bigloo_wallow| o id))
(define-inline (global/Ginfo-id-set! o::global/Ginfo v::symbol) (set! (-> |#!bigloo_wallow| o id) v))
))
