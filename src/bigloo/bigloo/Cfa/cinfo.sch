;; ==========================================================
;; Class accessors
;; Bigloo (4.7a)
;; Inria -- Sophia Antipolis     Thu Mar 6 07:34:14 AM CET 2025 
;; (bigloo -classgen Cfa/cinfo.scm)
;; ==========================================================

;; The directives
(directives

;; approx
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-approx::approx type1674::type type-locked?1675::bool allocs1676::obj top?1677::bool lost-stamp1678::long)
    (inline approx?::bool ::obj)
    (approx-nil::approx)
    (inline approx-lost-stamp::long ::approx)
    (inline approx-lost-stamp-set! ::approx ::long)
    (inline approx-top?::bool ::approx)
    (inline approx-top?-set! ::approx ::bool)
    (inline approx-allocs::obj ::approx)
    (inline approx-type-locked?::bool ::approx)
    (inline approx-type::type ::approx)
    (inline approx-type-set! ::approx ::type))))

;; cfun/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cfun/Cinfo::cfun/Cinfo arity1661::long side-effect?1662::obj predicate-of1663::obj stack-allocator1664::obj top?1665::bool the-closure1666::obj effect1667::obj args-type1668::obj macro?1669::bool infix?1670::bool method1671::pair-nil approx1672::approx)
    (inline cfun/Cinfo?::bool ::obj)
    (cfun/Cinfo-nil::cfun/Cinfo)
    (inline cfun/Cinfo-approx::approx ::cfun/Cinfo)
    (inline cfun/Cinfo-method::pair-nil ::cfun/Cinfo)
    (inline cfun/Cinfo-method-set! ::cfun/Cinfo ::pair-nil)
    (inline cfun/Cinfo-infix?::bool ::cfun/Cinfo)
    (inline cfun/Cinfo-infix?-set! ::cfun/Cinfo ::bool)
    (inline cfun/Cinfo-macro?::bool ::cfun/Cinfo)
    (inline cfun/Cinfo-args-type::obj ::cfun/Cinfo)
    (inline cfun/Cinfo-effect::obj ::cfun/Cinfo)
    (inline cfun/Cinfo-effect-set! ::cfun/Cinfo ::obj)
    (inline cfun/Cinfo-the-closure::obj ::cfun/Cinfo)
    (inline cfun/Cinfo-the-closure-set! ::cfun/Cinfo ::obj)
    (inline cfun/Cinfo-top?::bool ::cfun/Cinfo)
    (inline cfun/Cinfo-top?-set! ::cfun/Cinfo ::bool)
    (inline cfun/Cinfo-stack-allocator::obj ::cfun/Cinfo)
    (inline cfun/Cinfo-stack-allocator-set! ::cfun/Cinfo ::obj)
    (inline cfun/Cinfo-predicate-of::obj ::cfun/Cinfo)
    (inline cfun/Cinfo-predicate-of-set! ::cfun/Cinfo ::obj)
    (inline cfun/Cinfo-side-effect?::obj ::cfun/Cinfo)
    (inline cfun/Cinfo-side-effect?-set! ::cfun/Cinfo ::obj)
    (inline cfun/Cinfo-arity::long ::cfun/Cinfo))))

;; extern-sfun/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-extern-sfun/Cinfo::extern-sfun/Cinfo arity1646::long side-effect?1647::obj predicate-of1648::obj stack-allocator1649::obj top?1650::bool the-closure1651::obj effect1652::obj property1653::obj args1654::obj body1655::obj class1656::obj dsssl-keywords1657::obj loc1658::obj approx1659::approx)
    (inline extern-sfun/Cinfo?::bool ::obj)
    (extern-sfun/Cinfo-nil::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-approx::approx ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-loc::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-loc-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-dsssl-keywords::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-dsssl-keywords-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-class::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-class-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-body::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-body-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-args::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-args-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-property::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-property-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-effect::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-effect-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-the-closure::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-the-closure-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-top?::bool ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-top?-set! ::extern-sfun/Cinfo ::bool)
    (inline extern-sfun/Cinfo-stack-allocator::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-stack-allocator-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-predicate-of::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-predicate-of-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-side-effect?::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-side-effect?-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-arity::long ::extern-sfun/Cinfo))))

;; intern-sfun/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-intern-sfun/Cinfo::intern-sfun/Cinfo arity1630::long side-effect?1631::obj predicate-of1632::obj stack-allocator1633::obj top?1634::bool the-closure1635::obj effect1636::obj property1637::obj args1638::obj body1639::obj class1640::obj dsssl-keywords1641::obj loc1642::obj approx1643::approx stamp1644::long)
    (inline intern-sfun/Cinfo?::bool ::obj)
    (intern-sfun/Cinfo-nil::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-stamp::long ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-stamp-set! ::intern-sfun/Cinfo ::long)
    (inline intern-sfun/Cinfo-approx::approx ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-loc::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-loc-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-dsssl-keywords::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-dsssl-keywords-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-class::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-class-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-body::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-body-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-args::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-args-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-property::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-property-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-effect::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-effect-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-the-closure::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-the-closure-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-top?::bool ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-top?-set! ::intern-sfun/Cinfo ::bool)
    (inline intern-sfun/Cinfo-stack-allocator::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-stack-allocator-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-predicate-of::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-predicate-of-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-side-effect?::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-side-effect?-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-arity::long ::intern-sfun/Cinfo))))

;; scnst/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-scnst/Cinfo::scnst/Cinfo node1625::obj class1626::obj loc1627::obj approx1628::approx)
    (inline scnst/Cinfo?::bool ::obj)
    (scnst/Cinfo-nil::scnst/Cinfo)
    (inline scnst/Cinfo-approx::approx ::scnst/Cinfo)
    (inline scnst/Cinfo-loc::obj ::scnst/Cinfo)
    (inline scnst/Cinfo-loc-set! ::scnst/Cinfo ::obj)
    (inline scnst/Cinfo-class::obj ::scnst/Cinfo)
    (inline scnst/Cinfo-class-set! ::scnst/Cinfo ::obj)
    (inline scnst/Cinfo-node::obj ::scnst/Cinfo))))

;; pre-clo-env
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-pre-clo-env::pre-clo-env loc1623::obj)
    (inline pre-clo-env?::bool ::obj)
    (pre-clo-env-nil::pre-clo-env)
    (inline pre-clo-env-loc::obj ::pre-clo-env)
    (inline pre-clo-env-loc-set! ::pre-clo-env ::obj))))

;; svar/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-svar/Cinfo::svar/Cinfo loc1619::obj approx1620::approx clo-env?1621::bool)
    (inline svar/Cinfo?::bool ::obj)
    (svar/Cinfo-nil::svar/Cinfo)
    (inline svar/Cinfo-clo-env?::bool ::svar/Cinfo)
    (inline svar/Cinfo-clo-env?-set! ::svar/Cinfo ::bool)
    (inline svar/Cinfo-approx::approx ::svar/Cinfo)
    (inline svar/Cinfo-loc::obj ::svar/Cinfo)
    (inline svar/Cinfo-loc-set! ::svar/Cinfo ::obj))))

;; cvar/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cvar/Cinfo::cvar/Cinfo macro?1616::bool approx1617::approx)
    (inline cvar/Cinfo?::bool ::obj)
    (cvar/Cinfo-nil::cvar/Cinfo)
    (inline cvar/Cinfo-approx::approx ::cvar/Cinfo)
    (inline cvar/Cinfo-macro?::bool ::cvar/Cinfo))))

;; sexit/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-sexit/Cinfo::sexit/Cinfo handler1612::obj detached?1613::bool approx1614::approx)
    (inline sexit/Cinfo?::bool ::obj)
    (sexit/Cinfo-nil::sexit/Cinfo)
    (inline sexit/Cinfo-approx::approx ::sexit/Cinfo)
    (inline sexit/Cinfo-detached?::bool ::sexit/Cinfo)
    (inline sexit/Cinfo-detached?-set! ::sexit/Cinfo ::bool)
    (inline sexit/Cinfo-handler::obj ::sexit/Cinfo)
    (inline sexit/Cinfo-handler-set! ::sexit/Cinfo ::obj))))

;; reshaped-local
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-reshaped-local::reshaped-local id1600::symbol name1601::obj type1602::type value1603::value access1604::obj fast-alpha1605::obj removable1606::obj occurrence1607::long user?1608::bool key1609::long binding-value1610::obj)
    (inline reshaped-local?::bool ::obj)
    (reshaped-local-nil::reshaped-local)
    (inline reshaped-local-binding-value::obj ::reshaped-local)
    (inline reshaped-local-key::long ::reshaped-local)
    (inline reshaped-local-user?::bool ::reshaped-local)
    (inline reshaped-local-user?-set! ::reshaped-local ::bool)
    (inline reshaped-local-occurrence::long ::reshaped-local)
    (inline reshaped-local-occurrence-set! ::reshaped-local ::long)
    (inline reshaped-local-removable::obj ::reshaped-local)
    (inline reshaped-local-removable-set! ::reshaped-local ::obj)
    (inline reshaped-local-fast-alpha::obj ::reshaped-local)
    (inline reshaped-local-fast-alpha-set! ::reshaped-local ::obj)
    (inline reshaped-local-access::obj ::reshaped-local)
    (inline reshaped-local-access-set! ::reshaped-local ::obj)
    (inline reshaped-local-value::value ::reshaped-local)
    (inline reshaped-local-value-set! ::reshaped-local ::value)
    (inline reshaped-local-type::type ::reshaped-local)
    (inline reshaped-local-type-set! ::reshaped-local ::type)
    (inline reshaped-local-name::obj ::reshaped-local)
    (inline reshaped-local-name-set! ::reshaped-local ::obj)
    (inline reshaped-local-id::symbol ::reshaped-local))))

;; reshaped-global
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-reshaped-global::reshaped-global id1583::symbol name1584::obj type1585::type value1586::value access1587::obj fast-alpha1588::obj removable1589::obj occurrence1590::long module1591::symbol import1592::obj evaluable?1593::bool library?1594::bool user?1595::bool pragma1596::obj src1597::obj jvm-type-name1598::bstring)
    (inline reshaped-global?::bool ::obj)
    (reshaped-global-nil::reshaped-global)
    (inline reshaped-global-jvm-type-name::bstring ::reshaped-global)
    (inline reshaped-global-jvm-type-name-set! ::reshaped-global ::bstring)
    (inline reshaped-global-src::obj ::reshaped-global)
    (inline reshaped-global-src-set! ::reshaped-global ::obj)
    (inline reshaped-global-pragma::obj ::reshaped-global)
    (inline reshaped-global-pragma-set! ::reshaped-global ::obj)
    (inline reshaped-global-user?::bool ::reshaped-global)
    (inline reshaped-global-user?-set! ::reshaped-global ::bool)
    (inline reshaped-global-library?::bool ::reshaped-global)
    (inline reshaped-global-library?-set! ::reshaped-global ::bool)
    (inline reshaped-global-evaluable?::bool ::reshaped-global)
    (inline reshaped-global-evaluable?-set! ::reshaped-global ::bool)
    (inline reshaped-global-import::obj ::reshaped-global)
    (inline reshaped-global-import-set! ::reshaped-global ::obj)
    (inline reshaped-global-module::symbol ::reshaped-global)
    (inline reshaped-global-module-set! ::reshaped-global ::symbol)
    (inline reshaped-global-occurrence::long ::reshaped-global)
    (inline reshaped-global-occurrence-set! ::reshaped-global ::long)
    (inline reshaped-global-removable::obj ::reshaped-global)
    (inline reshaped-global-removable-set! ::reshaped-global ::obj)
    (inline reshaped-global-fast-alpha::obj ::reshaped-global)
    (inline reshaped-global-fast-alpha-set! ::reshaped-global ::obj)
    (inline reshaped-global-access::obj ::reshaped-global)
    (inline reshaped-global-access-set! ::reshaped-global ::obj)
    (inline reshaped-global-value::value ::reshaped-global)
    (inline reshaped-global-value-set! ::reshaped-global ::value)
    (inline reshaped-global-type::type ::reshaped-global)
    (inline reshaped-global-type-set! ::reshaped-global ::type)
    (inline reshaped-global-name::obj ::reshaped-global)
    (inline reshaped-global-name-set! ::reshaped-global ::obj)
    (inline reshaped-global-id::symbol ::reshaped-global))))

;; atom/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-atom/Cinfo::atom/Cinfo loc1578::obj type1579::type value1580::obj approx1581::approx)
    (inline atom/Cinfo?::bool ::obj)
    (atom/Cinfo-nil::atom/Cinfo)
    (inline atom/Cinfo-approx::approx ::atom/Cinfo)
    (inline atom/Cinfo-value::obj ::atom/Cinfo)
    (inline atom/Cinfo-value-set! ::atom/Cinfo ::obj)
    (inline atom/Cinfo-type::type ::atom/Cinfo)
    (inline atom/Cinfo-type-set! ::atom/Cinfo ::type)
    (inline atom/Cinfo-loc::obj ::atom/Cinfo))))

;; kwote/node
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-kwote/node::kwote/node loc1573::obj type1574::type value1575::obj node1576::node)
    (inline kwote/node?::bool ::obj)
    (kwote/node-nil::kwote/node)
    (inline kwote/node-node::node ::kwote/node)
    (inline kwote/node-value::obj ::kwote/node)
    (inline kwote/node-type::type ::kwote/node)
    (inline kwote/node-type-set! ::kwote/node ::type)
    (inline kwote/node-loc::obj ::kwote/node))))

;; kwote/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-kwote/Cinfo::kwote/Cinfo loc1568::obj type1569::type value1570::obj approx1571::approx)
    (inline kwote/Cinfo?::bool ::obj)
    (kwote/Cinfo-nil::kwote/Cinfo)
    (inline kwote/Cinfo-approx::approx ::kwote/Cinfo)
    (inline kwote/Cinfo-value::obj ::kwote/Cinfo)
    (inline kwote/Cinfo-type::type ::kwote/Cinfo)
    (inline kwote/Cinfo-type-set! ::kwote/Cinfo ::type)
    (inline kwote/Cinfo-loc::obj ::kwote/Cinfo))))

;; app-ly/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-app-ly/Cinfo::app-ly/Cinfo loc1561::obj type1562::type fun1563::node arg1565::node approx1566::approx)
    (inline app-ly/Cinfo?::bool ::obj)
    (app-ly/Cinfo-nil::app-ly/Cinfo)
    (inline app-ly/Cinfo-approx::approx ::app-ly/Cinfo)
    (inline app-ly/Cinfo-arg::node ::app-ly/Cinfo)
    (inline app-ly/Cinfo-arg-set! ::app-ly/Cinfo ::node)
    (inline app-ly/Cinfo-fun::node ::app-ly/Cinfo)
    (inline app-ly/Cinfo-fun-set! ::app-ly/Cinfo ::node)
    (inline app-ly/Cinfo-type::type ::app-ly/Cinfo)
    (inline app-ly/Cinfo-type-set! ::app-ly/Cinfo ::type)
    (inline app-ly/Cinfo-loc::obj ::app-ly/Cinfo))))

;; funcall/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-funcall/Cinfo::funcall/Cinfo loc1551::obj type1552::type fun1553::node args1554::obj strength1555::symbol approx1556::approx va-approx1557::approx arity-error-noticed?1558::bool type-error-noticed?1559::bool)
    (inline funcall/Cinfo?::bool ::obj)
    (funcall/Cinfo-nil::funcall/Cinfo)
    (inline funcall/Cinfo-type-error-noticed?::bool ::funcall/Cinfo)
    (inline funcall/Cinfo-type-error-noticed?-set! ::funcall/Cinfo ::bool)
    (inline funcall/Cinfo-arity-error-noticed?::bool ::funcall/Cinfo)
    (inline funcall/Cinfo-arity-error-noticed?-set! ::funcall/Cinfo ::bool)
    (inline funcall/Cinfo-va-approx::approx ::funcall/Cinfo)
    (inline funcall/Cinfo-approx::approx ::funcall/Cinfo)
    (inline funcall/Cinfo-strength::symbol ::funcall/Cinfo)
    (inline funcall/Cinfo-strength-set! ::funcall/Cinfo ::symbol)
    (inline funcall/Cinfo-args::obj ::funcall/Cinfo)
    (inline funcall/Cinfo-args-set! ::funcall/Cinfo ::obj)
    (inline funcall/Cinfo-fun::node ::funcall/Cinfo)
    (inline funcall/Cinfo-fun-set! ::funcall/Cinfo ::node)
    (inline funcall/Cinfo-type::type ::funcall/Cinfo)
    (inline funcall/Cinfo-type-set! ::funcall/Cinfo ::type)
    (inline funcall/Cinfo-loc::obj ::funcall/Cinfo))))

;; setq/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-setq/Cinfo::setq/Cinfo loc1545::obj type1546::type var1547::var value1548::node approx1549::approx)
    (inline setq/Cinfo?::bool ::obj)
    (setq/Cinfo-nil::setq/Cinfo)
    (inline setq/Cinfo-approx::approx ::setq/Cinfo)
    (inline setq/Cinfo-value::node ::setq/Cinfo)
    (inline setq/Cinfo-value-set! ::setq/Cinfo ::node)
    (inline setq/Cinfo-var::var ::setq/Cinfo)
    (inline setq/Cinfo-var-set! ::setq/Cinfo ::var)
    (inline setq/Cinfo-type::type ::setq/Cinfo)
    (inline setq/Cinfo-type-set! ::setq/Cinfo ::type)
    (inline setq/Cinfo-loc::obj ::setq/Cinfo))))

;; conditional/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-conditional/Cinfo::conditional/Cinfo loc1536::obj type1537::type side-effect?1538::obj key1539::obj test1540::node true1541::node false1542::node approx1543::approx)
    (inline conditional/Cinfo?::bool ::obj)
    (conditional/Cinfo-nil::conditional/Cinfo)
    (inline conditional/Cinfo-approx::approx ::conditional/Cinfo)
    (inline conditional/Cinfo-false::node ::conditional/Cinfo)
    (inline conditional/Cinfo-false-set! ::conditional/Cinfo ::node)
    (inline conditional/Cinfo-true::node ::conditional/Cinfo)
    (inline conditional/Cinfo-true-set! ::conditional/Cinfo ::node)
    (inline conditional/Cinfo-test::node ::conditional/Cinfo)
    (inline conditional/Cinfo-test-set! ::conditional/Cinfo ::node)
    (inline conditional/Cinfo-key::obj ::conditional/Cinfo)
    (inline conditional/Cinfo-key-set! ::conditional/Cinfo ::obj)
    (inline conditional/Cinfo-side-effect?::obj ::conditional/Cinfo)
    (inline conditional/Cinfo-side-effect?-set! ::conditional/Cinfo ::obj)
    (inline conditional/Cinfo-type::type ::conditional/Cinfo)
    (inline conditional/Cinfo-type-set! ::conditional/Cinfo ::type)
    (inline conditional/Cinfo-loc::obj ::conditional/Cinfo))))

;; fail/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-fail/Cinfo::fail/Cinfo loc1529::obj type1530::type proc1531::node msg1532::node obj1533::node approx1534::approx)
    (inline fail/Cinfo?::bool ::obj)
    (fail/Cinfo-nil::fail/Cinfo)
    (inline fail/Cinfo-approx::approx ::fail/Cinfo)
    (inline fail/Cinfo-obj::node ::fail/Cinfo)
    (inline fail/Cinfo-obj-set! ::fail/Cinfo ::node)
    (inline fail/Cinfo-msg::node ::fail/Cinfo)
    (inline fail/Cinfo-msg-set! ::fail/Cinfo ::node)
    (inline fail/Cinfo-proc::node ::fail/Cinfo)
    (inline fail/Cinfo-proc-set! ::fail/Cinfo ::node)
    (inline fail/Cinfo-type::type ::fail/Cinfo)
    (inline fail/Cinfo-type-set! ::fail/Cinfo ::type)
    (inline fail/Cinfo-loc::obj ::fail/Cinfo))))

;; select/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-select/Cinfo::select/Cinfo loc1520::obj type1521::type side-effect?1522::obj key1523::obj test1524::node clauses1525::obj item-type1526::type approx1527::approx)
    (inline select/Cinfo?::bool ::obj)
    (select/Cinfo-nil::select/Cinfo)
    (inline select/Cinfo-approx::approx ::select/Cinfo)
    (inline select/Cinfo-item-type::type ::select/Cinfo)
    (inline select/Cinfo-clauses::obj ::select/Cinfo)
    (inline select/Cinfo-test::node ::select/Cinfo)
    (inline select/Cinfo-test-set! ::select/Cinfo ::node)
    (inline select/Cinfo-key::obj ::select/Cinfo)
    (inline select/Cinfo-key-set! ::select/Cinfo ::obj)
    (inline select/Cinfo-side-effect?::obj ::select/Cinfo)
    (inline select/Cinfo-side-effect?-set! ::select/Cinfo ::obj)
    (inline select/Cinfo-type::type ::select/Cinfo)
    (inline select/Cinfo-type-set! ::select/Cinfo ::type)
    (inline select/Cinfo-loc::obj ::select/Cinfo))))

;; set-ex-it/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-set-ex-it/Cinfo::set-ex-it/Cinfo loc1514::obj type1515::type var1516::var body1517::node approx1518::approx)
    (inline set-ex-it/Cinfo?::bool ::obj)
    (set-ex-it/Cinfo-nil::set-ex-it/Cinfo)
    (inline set-ex-it/Cinfo-approx::approx ::set-ex-it/Cinfo)
    (inline set-ex-it/Cinfo-body::node ::set-ex-it/Cinfo)
    (inline set-ex-it/Cinfo-body-set! ::set-ex-it/Cinfo ::node)
    (inline set-ex-it/Cinfo-var::var ::set-ex-it/Cinfo)
    (inline set-ex-it/Cinfo-var-set! ::set-ex-it/Cinfo ::var)
    (inline set-ex-it/Cinfo-type::type ::set-ex-it/Cinfo)
    (inline set-ex-it/Cinfo-type-set! ::set-ex-it/Cinfo ::type)
    (inline set-ex-it/Cinfo-loc::obj ::set-ex-it/Cinfo))))

;; jump-ex-it/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-jump-ex-it/Cinfo::jump-ex-it/Cinfo loc1508::obj type1509::type exit1510::node value1511::node approx1512::approx)
    (inline jump-ex-it/Cinfo?::bool ::obj)
    (jump-ex-it/Cinfo-nil::jump-ex-it/Cinfo)
    (inline jump-ex-it/Cinfo-approx::approx ::jump-ex-it/Cinfo)
    (inline jump-ex-it/Cinfo-value::node ::jump-ex-it/Cinfo)
    (inline jump-ex-it/Cinfo-value-set! ::jump-ex-it/Cinfo ::node)
    (inline jump-ex-it/Cinfo-exit::node ::jump-ex-it/Cinfo)
    (inline jump-ex-it/Cinfo-exit-set! ::jump-ex-it/Cinfo ::node)
    (inline jump-ex-it/Cinfo-type::type ::jump-ex-it/Cinfo)
    (inline jump-ex-it/Cinfo-type-set! ::jump-ex-it/Cinfo ::type)
    (inline jump-ex-it/Cinfo-loc::obj ::jump-ex-it/Cinfo))))

;; pre-make-box
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-pre-make-box::pre-make-box loc1502::obj type1503::type side-effect?1504::obj key1505::obj value1506::node)
    (inline pre-make-box?::bool ::obj)
    (pre-make-box-nil::pre-make-box)
    (inline pre-make-box-value::node ::pre-make-box)
    (inline pre-make-box-value-set! ::pre-make-box ::node)
    (inline pre-make-box-key::obj ::pre-make-box)
    (inline pre-make-box-key-set! ::pre-make-box ::obj)
    (inline pre-make-box-side-effect?::obj ::pre-make-box)
    (inline pre-make-box-side-effect?-set! ::pre-make-box ::obj)
    (inline pre-make-box-type::type ::pre-make-box)
    (inline pre-make-box-type-set! ::pre-make-box ::type)
    (inline pre-make-box-loc::obj ::pre-make-box))))

;; make-box/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-make-box/Cinfo::make-box/Cinfo loc1495::obj type1496::type side-effect?1497::obj key1498::obj value1499::node approx1500::approx)
    (inline make-box/Cinfo?::bool ::obj)
    (make-box/Cinfo-nil::make-box/Cinfo)
    (inline make-box/Cinfo-approx::approx ::make-box/Cinfo)
    (inline make-box/Cinfo-value::node ::make-box/Cinfo)
    (inline make-box/Cinfo-value-set! ::make-box/Cinfo ::node)
    (inline make-box/Cinfo-key::obj ::make-box/Cinfo)
    (inline make-box/Cinfo-key-set! ::make-box/Cinfo ::obj)
    (inline make-box/Cinfo-side-effect?::obj ::make-box/Cinfo)
    (inline make-box/Cinfo-side-effect?-set! ::make-box/Cinfo ::obj)
    (inline make-box/Cinfo-type::type ::make-box/Cinfo)
    (inline make-box/Cinfo-type-set! ::make-box/Cinfo ::type)
    (inline make-box/Cinfo-loc::obj ::make-box/Cinfo))))

;; make-box/O-Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-make-box/O-Cinfo::make-box/O-Cinfo loc1487::obj type1488::type side-effect?1489::obj key1490::obj value1491::node approx1492::approx value-approx1493::approx)
    (inline make-box/O-Cinfo?::bool ::obj)
    (make-box/O-Cinfo-nil::make-box/O-Cinfo)
    (inline make-box/O-Cinfo-value-approx::approx ::make-box/O-Cinfo)
    (inline make-box/O-Cinfo-approx::approx ::make-box/O-Cinfo)
    (inline make-box/O-Cinfo-approx-set! ::make-box/O-Cinfo ::approx)
    (inline make-box/O-Cinfo-value::node ::make-box/O-Cinfo)
    (inline make-box/O-Cinfo-value-set! ::make-box/O-Cinfo ::node)
    (inline make-box/O-Cinfo-key::obj ::make-box/O-Cinfo)
    (inline make-box/O-Cinfo-key-set! ::make-box/O-Cinfo ::obj)
    (inline make-box/O-Cinfo-side-effect?::obj ::make-box/O-Cinfo)
    (inline make-box/O-Cinfo-side-effect?-set! ::make-box/O-Cinfo ::obj)
    (inline make-box/O-Cinfo-type::type ::make-box/O-Cinfo)
    (inline make-box/O-Cinfo-type-set! ::make-box/O-Cinfo ::type)
    (inline make-box/O-Cinfo-loc::obj ::make-box/O-Cinfo))))

;; box-set!/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-box-set!/Cinfo::box-set!/Cinfo loc1481::obj type1482::type var1483::var value1484::node approx1485::approx)
    (inline box-set!/Cinfo?::bool ::obj)
    (box-set!/Cinfo-nil::box-set!/Cinfo)
    (inline box-set!/Cinfo-approx::approx ::box-set!/Cinfo)
    (inline box-set!/Cinfo-value::node ::box-set!/Cinfo)
    (inline box-set!/Cinfo-value-set! ::box-set!/Cinfo ::node)
    (inline box-set!/Cinfo-var::var ::box-set!/Cinfo)
    (inline box-set!/Cinfo-var-set! ::box-set!/Cinfo ::var)
    (inline box-set!/Cinfo-type::type ::box-set!/Cinfo)
    (inline box-set!/Cinfo-type-set! ::box-set!/Cinfo ::type)
    (inline box-set!/Cinfo-loc::obj ::box-set!/Cinfo))))

;; box-ref/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-box-ref/Cinfo::box-ref/Cinfo loc1474::obj type1475::type side-effect?1476::obj key1477::obj var1478::var approx1479::approx)
    (inline box-ref/Cinfo?::bool ::obj)
    (box-ref/Cinfo-nil::box-ref/Cinfo)
    (inline box-ref/Cinfo-approx::approx ::box-ref/Cinfo)
    (inline box-ref/Cinfo-var::var ::box-ref/Cinfo)
    (inline box-ref/Cinfo-var-set! ::box-ref/Cinfo ::var)
    (inline box-ref/Cinfo-key::obj ::box-ref/Cinfo)
    (inline box-ref/Cinfo-key-set! ::box-ref/Cinfo ::obj)
    (inline box-ref/Cinfo-side-effect?::obj ::box-ref/Cinfo)
    (inline box-ref/Cinfo-side-effect?-set! ::box-ref/Cinfo ::obj)
    (inline box-ref/Cinfo-type::type ::box-ref/Cinfo)
    (inline box-ref/Cinfo-type-set! ::box-ref/Cinfo ::type)
    (inline box-ref/Cinfo-loc::obj ::box-ref/Cinfo))))

;; box-set!/O-Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-box-set!/O-Cinfo::box-set!/O-Cinfo loc1468::obj type1469::type var1470::var value1471::node approx1472::approx)
    (inline box-set!/O-Cinfo?::bool ::obj)
    (box-set!/O-Cinfo-nil::box-set!/O-Cinfo)
    (inline box-set!/O-Cinfo-approx::approx ::box-set!/O-Cinfo)
    (inline box-set!/O-Cinfo-value::node ::box-set!/O-Cinfo)
    (inline box-set!/O-Cinfo-value-set! ::box-set!/O-Cinfo ::node)
    (inline box-set!/O-Cinfo-var::var ::box-set!/O-Cinfo)
    (inline box-set!/O-Cinfo-var-set! ::box-set!/O-Cinfo ::var)
    (inline box-set!/O-Cinfo-type::type ::box-set!/O-Cinfo)
    (inline box-set!/O-Cinfo-type-set! ::box-set!/O-Cinfo ::type)
    (inline box-set!/O-Cinfo-loc::obj ::box-set!/O-Cinfo))))

;; box-ref/O-Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-box-ref/O-Cinfo::box-ref/O-Cinfo loc1461::obj type1462::type side-effect?1463::obj key1464::obj var1465::var approx1466::approx)
    (inline box-ref/O-Cinfo?::bool ::obj)
    (box-ref/O-Cinfo-nil::box-ref/O-Cinfo)
    (inline box-ref/O-Cinfo-approx::approx ::box-ref/O-Cinfo)
    (inline box-ref/O-Cinfo-var::var ::box-ref/O-Cinfo)
    (inline box-ref/O-Cinfo-var-set! ::box-ref/O-Cinfo ::var)
    (inline box-ref/O-Cinfo-key::obj ::box-ref/O-Cinfo)
    (inline box-ref/O-Cinfo-key-set! ::box-ref/O-Cinfo ::obj)
    (inline box-ref/O-Cinfo-side-effect?::obj ::box-ref/O-Cinfo)
    (inline box-ref/O-Cinfo-side-effect?-set! ::box-ref/O-Cinfo ::obj)
    (inline box-ref/O-Cinfo-type::type ::box-ref/O-Cinfo)
    (inline box-ref/O-Cinfo-type-set! ::box-ref/O-Cinfo ::type)
    (inline box-ref/O-Cinfo-loc::obj ::box-ref/O-Cinfo)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; approx
(define-inline (make-approx::approx type1674::type type-locked?1675::bool allocs1676::obj top?1677::bool lost-stamp1678::long) (instantiate::approx (type type1674) (type-locked? type-locked?1675) (allocs allocs1676) (top? top?1677) (lost-stamp lost-stamp1678)))
(define-inline (approx?::bool obj::obj) ((@ isa? __object) obj (@ approx cfa_info)))
(define (approx-nil::approx) (class-nil (@ approx cfa_info)))
(define-inline (approx-lost-stamp::long o::approx) (-> |#!bigloo_wallow| o lost-stamp))
(define-inline (approx-lost-stamp-set! o::approx v::long) (set! (-> |#!bigloo_wallow| o lost-stamp) v))
(define-inline (approx-top?::bool o::approx) (-> |#!bigloo_wallow| o top?))
(define-inline (approx-top?-set! o::approx v::bool) (set! (-> |#!bigloo_wallow| o top?) v))
(define-inline (approx-allocs::obj o::approx) (-> |#!bigloo_wallow| o allocs))
(define-inline (approx-allocs-set! o::approx v::obj) (set! (-> |#!bigloo_wallow| o allocs) v))
(define-inline (approx-type-locked?::bool o::approx) (-> |#!bigloo_wallow| o type-locked?))
(define-inline (approx-type-locked?-set! o::approx v::bool) (set! (-> |#!bigloo_wallow| o type-locked?) v))
(define-inline (approx-type::type o::approx) (-> |#!bigloo_wallow| o type))
(define-inline (approx-type-set! o::approx v::type) (set! (-> |#!bigloo_wallow| o type) v))

;; cfun/Cinfo
(define-inline (make-cfun/Cinfo::cfun/Cinfo arity1661::long side-effect?1662::obj predicate-of1663::obj stack-allocator1664::obj top?1665::bool the-closure1666::obj effect1667::obj args-type1668::obj macro?1669::bool infix?1670::bool method1671::pair-nil approx1672::approx) (instantiate::cfun/Cinfo (arity arity1661) (side-effect? side-effect?1662) (predicate-of predicate-of1663) (stack-allocator stack-allocator1664) (top? top?1665) (the-closure the-closure1666) (effect effect1667) (args-type args-type1668) (macro? macro?1669) (infix? infix?1670) (method method1671) (approx approx1672)))
(define-inline (cfun/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ cfun/Cinfo cfa_info)))
(define (cfun/Cinfo-nil::cfun/Cinfo) (class-nil (@ cfun/Cinfo cfa_info)))
(define-inline (cfun/Cinfo-approx::approx o::cfun/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (cfun/Cinfo-approx-set! o::cfun/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (cfun/Cinfo-method::pair-nil o::cfun/Cinfo) (-> |#!bigloo_wallow| o method))
(define-inline (cfun/Cinfo-method-set! o::cfun/Cinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o method) v))
(define-inline (cfun/Cinfo-infix?::bool o::cfun/Cinfo) (-> |#!bigloo_wallow| o infix?))
(define-inline (cfun/Cinfo-infix?-set! o::cfun/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o infix?) v))
(define-inline (cfun/Cinfo-macro?::bool o::cfun/Cinfo) (-> |#!bigloo_wallow| o macro?))
(define-inline (cfun/Cinfo-macro?-set! o::cfun/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o macro?) v))
(define-inline (cfun/Cinfo-args-type::obj o::cfun/Cinfo) (-> |#!bigloo_wallow| o args-type))
(define-inline (cfun/Cinfo-args-type-set! o::cfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o args-type) v))
(define-inline (cfun/Cinfo-effect::obj o::cfun/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (cfun/Cinfo-effect-set! o::cfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (cfun/Cinfo-the-closure::obj o::cfun/Cinfo) (-> |#!bigloo_wallow| o the-closure))
(define-inline (cfun/Cinfo-the-closure-set! o::cfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o the-closure) v))
(define-inline (cfun/Cinfo-top?::bool o::cfun/Cinfo) (-> |#!bigloo_wallow| o top?))
(define-inline (cfun/Cinfo-top?-set! o::cfun/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o top?) v))
(define-inline (cfun/Cinfo-stack-allocator::obj o::cfun/Cinfo) (-> |#!bigloo_wallow| o stack-allocator))
(define-inline (cfun/Cinfo-stack-allocator-set! o::cfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o stack-allocator) v))
(define-inline (cfun/Cinfo-predicate-of::obj o::cfun/Cinfo) (-> |#!bigloo_wallow| o predicate-of))
(define-inline (cfun/Cinfo-predicate-of-set! o::cfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o predicate-of) v))
(define-inline (cfun/Cinfo-side-effect?::obj o::cfun/Cinfo) (-> |#!bigloo_wallow| o side-effect?))
(define-inline (cfun/Cinfo-side-effect?-set! o::cfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect?) v))
(define-inline (cfun/Cinfo-arity::long o::cfun/Cinfo) (-> |#!bigloo_wallow| o arity))
(define-inline (cfun/Cinfo-arity-set! o::cfun/Cinfo v::long) (set! (-> |#!bigloo_wallow| o arity) v))

;; extern-sfun/Cinfo
(define-inline (make-extern-sfun/Cinfo::extern-sfun/Cinfo arity1646::long side-effect?1647::obj predicate-of1648::obj stack-allocator1649::obj top?1650::bool the-closure1651::obj effect1652::obj property1653::obj args1654::obj body1655::obj class1656::obj dsssl-keywords1657::obj loc1658::obj approx1659::approx) (instantiate::extern-sfun/Cinfo (arity arity1646) (side-effect? side-effect?1647) (predicate-of predicate-of1648) (stack-allocator stack-allocator1649) (top? top?1650) (the-closure the-closure1651) (effect effect1652) (property property1653) (args args1654) (body body1655) (class class1656) (dsssl-keywords dsssl-keywords1657) (loc loc1658) (approx approx1659)))
(define-inline (extern-sfun/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ extern-sfun/Cinfo cfa_info)))
(define (extern-sfun/Cinfo-nil::extern-sfun/Cinfo) (class-nil (@ extern-sfun/Cinfo cfa_info)))
(define-inline (extern-sfun/Cinfo-approx::approx o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (extern-sfun/Cinfo-approx-set! o::extern-sfun/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (extern-sfun/Cinfo-loc::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (extern-sfun/Cinfo-loc-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))
(define-inline (extern-sfun/Cinfo-dsssl-keywords::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o dsssl-keywords))
(define-inline (extern-sfun/Cinfo-dsssl-keywords-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o dsssl-keywords) v))
(define-inline (extern-sfun/Cinfo-class::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o class))
(define-inline (extern-sfun/Cinfo-class-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (extern-sfun/Cinfo-body::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o body))
(define-inline (extern-sfun/Cinfo-body-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (extern-sfun/Cinfo-args::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o args))
(define-inline (extern-sfun/Cinfo-args-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o args) v))
(define-inline (extern-sfun/Cinfo-property::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o property))
(define-inline (extern-sfun/Cinfo-property-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o property) v))
(define-inline (extern-sfun/Cinfo-effect::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (extern-sfun/Cinfo-effect-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (extern-sfun/Cinfo-the-closure::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o the-closure))
(define-inline (extern-sfun/Cinfo-the-closure-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o the-closure) v))
(define-inline (extern-sfun/Cinfo-top?::bool o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o top?))
(define-inline (extern-sfun/Cinfo-top?-set! o::extern-sfun/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o top?) v))
(define-inline (extern-sfun/Cinfo-stack-allocator::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o stack-allocator))
(define-inline (extern-sfun/Cinfo-stack-allocator-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o stack-allocator) v))
(define-inline (extern-sfun/Cinfo-predicate-of::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o predicate-of))
(define-inline (extern-sfun/Cinfo-predicate-of-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o predicate-of) v))
(define-inline (extern-sfun/Cinfo-side-effect?::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o side-effect?))
(define-inline (extern-sfun/Cinfo-side-effect?-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect?) v))
(define-inline (extern-sfun/Cinfo-arity::long o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o arity))
(define-inline (extern-sfun/Cinfo-arity-set! o::extern-sfun/Cinfo v::long) (set! (-> |#!bigloo_wallow| o arity) v))

;; intern-sfun/Cinfo
(define-inline (make-intern-sfun/Cinfo::intern-sfun/Cinfo arity1630::long side-effect?1631::obj predicate-of1632::obj stack-allocator1633::obj top?1634::bool the-closure1635::obj effect1636::obj property1637::obj args1638::obj body1639::obj class1640::obj dsssl-keywords1641::obj loc1642::obj approx1643::approx stamp1644::long) (instantiate::intern-sfun/Cinfo (arity arity1630) (side-effect? side-effect?1631) (predicate-of predicate-of1632) (stack-allocator stack-allocator1633) (top? top?1634) (the-closure the-closure1635) (effect effect1636) (property property1637) (args args1638) (body body1639) (class class1640) (dsssl-keywords dsssl-keywords1641) (loc loc1642) (approx approx1643) (stamp stamp1644)))
(define-inline (intern-sfun/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ intern-sfun/Cinfo cfa_info)))
(define (intern-sfun/Cinfo-nil::intern-sfun/Cinfo) (class-nil (@ intern-sfun/Cinfo cfa_info)))
(define-inline (intern-sfun/Cinfo-stamp::long o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o stamp))
(define-inline (intern-sfun/Cinfo-stamp-set! o::intern-sfun/Cinfo v::long) (set! (-> |#!bigloo_wallow| o stamp) v))
(define-inline (intern-sfun/Cinfo-approx::approx o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (intern-sfun/Cinfo-approx-set! o::intern-sfun/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (intern-sfun/Cinfo-loc::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (intern-sfun/Cinfo-loc-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))
(define-inline (intern-sfun/Cinfo-dsssl-keywords::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o dsssl-keywords))
(define-inline (intern-sfun/Cinfo-dsssl-keywords-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o dsssl-keywords) v))
(define-inline (intern-sfun/Cinfo-class::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o class))
(define-inline (intern-sfun/Cinfo-class-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (intern-sfun/Cinfo-body::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o body))
(define-inline (intern-sfun/Cinfo-body-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (intern-sfun/Cinfo-args::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o args))
(define-inline (intern-sfun/Cinfo-args-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o args) v))
(define-inline (intern-sfun/Cinfo-property::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o property))
(define-inline (intern-sfun/Cinfo-property-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o property) v))
(define-inline (intern-sfun/Cinfo-effect::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (intern-sfun/Cinfo-effect-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (intern-sfun/Cinfo-the-closure::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o the-closure))
(define-inline (intern-sfun/Cinfo-the-closure-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o the-closure) v))
(define-inline (intern-sfun/Cinfo-top?::bool o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o top?))
(define-inline (intern-sfun/Cinfo-top?-set! o::intern-sfun/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o top?) v))
(define-inline (intern-sfun/Cinfo-stack-allocator::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o stack-allocator))
(define-inline (intern-sfun/Cinfo-stack-allocator-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o stack-allocator) v))
(define-inline (intern-sfun/Cinfo-predicate-of::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o predicate-of))
(define-inline (intern-sfun/Cinfo-predicate-of-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o predicate-of) v))
(define-inline (intern-sfun/Cinfo-side-effect?::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o side-effect?))
(define-inline (intern-sfun/Cinfo-side-effect?-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect?) v))
(define-inline (intern-sfun/Cinfo-arity::long o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o arity))
(define-inline (intern-sfun/Cinfo-arity-set! o::intern-sfun/Cinfo v::long) (set! (-> |#!bigloo_wallow| o arity) v))

;; scnst/Cinfo
(define-inline (make-scnst/Cinfo::scnst/Cinfo node1625::obj class1626::obj loc1627::obj approx1628::approx) (instantiate::scnst/Cinfo (node node1625) (class class1626) (loc loc1627) (approx approx1628)))
(define-inline (scnst/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ scnst/Cinfo cfa_info)))
(define (scnst/Cinfo-nil::scnst/Cinfo) (class-nil (@ scnst/Cinfo cfa_info)))
(define-inline (scnst/Cinfo-approx::approx o::scnst/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (scnst/Cinfo-approx-set! o::scnst/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (scnst/Cinfo-loc::obj o::scnst/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (scnst/Cinfo-loc-set! o::scnst/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))
(define-inline (scnst/Cinfo-class::obj o::scnst/Cinfo) (-> |#!bigloo_wallow| o class))
(define-inline (scnst/Cinfo-class-set! o::scnst/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (scnst/Cinfo-node::obj o::scnst/Cinfo) (-> |#!bigloo_wallow| o node))
(define-inline (scnst/Cinfo-node-set! o::scnst/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o node) v))

;; pre-clo-env
(define-inline (make-pre-clo-env::pre-clo-env loc1623::obj) (instantiate::pre-clo-env (loc loc1623)))
(define-inline (pre-clo-env?::bool obj::obj) ((@ isa? __object) obj (@ pre-clo-env cfa_info)))
(define (pre-clo-env-nil::pre-clo-env) (class-nil (@ pre-clo-env cfa_info)))
(define-inline (pre-clo-env-loc::obj o::pre-clo-env) (-> |#!bigloo_wallow| o loc))
(define-inline (pre-clo-env-loc-set! o::pre-clo-env v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; svar/Cinfo
(define-inline (make-svar/Cinfo::svar/Cinfo loc1619::obj approx1620::approx clo-env?1621::bool) (instantiate::svar/Cinfo (loc loc1619) (approx approx1620) (clo-env? clo-env?1621)))
(define-inline (svar/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ svar/Cinfo cfa_info)))
(define (svar/Cinfo-nil::svar/Cinfo) (class-nil (@ svar/Cinfo cfa_info)))
(define-inline (svar/Cinfo-clo-env?::bool o::svar/Cinfo) (-> |#!bigloo_wallow| o clo-env?))
(define-inline (svar/Cinfo-clo-env?-set! o::svar/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o clo-env?) v))
(define-inline (svar/Cinfo-approx::approx o::svar/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (svar/Cinfo-approx-set! o::svar/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (svar/Cinfo-loc::obj o::svar/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (svar/Cinfo-loc-set! o::svar/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; cvar/Cinfo
(define-inline (make-cvar/Cinfo::cvar/Cinfo macro?1616::bool approx1617::approx) (instantiate::cvar/Cinfo (macro? macro?1616) (approx approx1617)))
(define-inline (cvar/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ cvar/Cinfo cfa_info)))
(define (cvar/Cinfo-nil::cvar/Cinfo) (class-nil (@ cvar/Cinfo cfa_info)))
(define-inline (cvar/Cinfo-approx::approx o::cvar/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (cvar/Cinfo-approx-set! o::cvar/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (cvar/Cinfo-macro?::bool o::cvar/Cinfo) (-> |#!bigloo_wallow| o macro?))
(define-inline (cvar/Cinfo-macro?-set! o::cvar/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o macro?) v))

;; sexit/Cinfo
(define-inline (make-sexit/Cinfo::sexit/Cinfo handler1612::obj detached?1613::bool approx1614::approx) (instantiate::sexit/Cinfo (handler handler1612) (detached? detached?1613) (approx approx1614)))
(define-inline (sexit/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ sexit/Cinfo cfa_info)))
(define (sexit/Cinfo-nil::sexit/Cinfo) (class-nil (@ sexit/Cinfo cfa_info)))
(define-inline (sexit/Cinfo-approx::approx o::sexit/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (sexit/Cinfo-approx-set! o::sexit/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (sexit/Cinfo-detached?::bool o::sexit/Cinfo) (-> |#!bigloo_wallow| o detached?))
(define-inline (sexit/Cinfo-detached?-set! o::sexit/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o detached?) v))
(define-inline (sexit/Cinfo-handler::obj o::sexit/Cinfo) (-> |#!bigloo_wallow| o handler))
(define-inline (sexit/Cinfo-handler-set! o::sexit/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o handler) v))

;; reshaped-local
(define-inline (make-reshaped-local::reshaped-local id1600::symbol name1601::obj type1602::type value1603::value access1604::obj fast-alpha1605::obj removable1606::obj occurrence1607::long user?1608::bool key1609::long binding-value1610::obj) (instantiate::reshaped-local (id id1600) (name name1601) (type type1602) (value value1603) (access access1604) (fast-alpha fast-alpha1605) (removable removable1606) (occurrence occurrence1607) (user? user?1608) (key key1609) (binding-value binding-value1610)))
(define-inline (reshaped-local?::bool obj::obj) ((@ isa? __object) obj (@ reshaped-local cfa_info)))
(define (reshaped-local-nil::reshaped-local) (class-nil (@ reshaped-local cfa_info)))
(define-inline (reshaped-local-binding-value::obj o::reshaped-local) (-> |#!bigloo_wallow| o binding-value))
(define-inline (reshaped-local-binding-value-set! o::reshaped-local v::obj) (set! (-> |#!bigloo_wallow| o binding-value) v))
(define-inline (reshaped-local-key::long o::reshaped-local) (-> |#!bigloo_wallow| o key))
(define-inline (reshaped-local-key-set! o::reshaped-local v::long) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (reshaped-local-user?::bool o::reshaped-local) (-> |#!bigloo_wallow| o user?))
(define-inline (reshaped-local-user?-set! o::reshaped-local v::bool) (set! (-> |#!bigloo_wallow| o user?) v))
(define-inline (reshaped-local-occurrence::long o::reshaped-local) (-> |#!bigloo_wallow| o occurrence))
(define-inline (reshaped-local-occurrence-set! o::reshaped-local v::long) (set! (-> |#!bigloo_wallow| o occurrence) v))
(define-inline (reshaped-local-removable::obj o::reshaped-local) (-> |#!bigloo_wallow| o removable))
(define-inline (reshaped-local-removable-set! o::reshaped-local v::obj) (set! (-> |#!bigloo_wallow| o removable) v))
(define-inline (reshaped-local-fast-alpha::obj o::reshaped-local) (-> |#!bigloo_wallow| o fast-alpha))
(define-inline (reshaped-local-fast-alpha-set! o::reshaped-local v::obj) (set! (-> |#!bigloo_wallow| o fast-alpha) v))
(define-inline (reshaped-local-access::obj o::reshaped-local) (-> |#!bigloo_wallow| o access))
(define-inline (reshaped-local-access-set! o::reshaped-local v::obj) (set! (-> |#!bigloo_wallow| o access) v))
(define-inline (reshaped-local-value::value o::reshaped-local) (-> |#!bigloo_wallow| o value))
(define-inline (reshaped-local-value-set! o::reshaped-local v::value) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (reshaped-local-type::type o::reshaped-local) (-> |#!bigloo_wallow| o type))
(define-inline (reshaped-local-type-set! o::reshaped-local v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (reshaped-local-name::obj o::reshaped-local) (-> |#!bigloo_wallow| o name))
(define-inline (reshaped-local-name-set! o::reshaped-local v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (reshaped-local-id::symbol o::reshaped-local) (-> |#!bigloo_wallow| o id))
(define-inline (reshaped-local-id-set! o::reshaped-local v::symbol) (set! (-> |#!bigloo_wallow| o id) v))

;; reshaped-global
(define-inline (make-reshaped-global::reshaped-global id1583::symbol name1584::obj type1585::type value1586::value access1587::obj fast-alpha1588::obj removable1589::obj occurrence1590::long module1591::symbol import1592::obj evaluable?1593::bool library?1594::bool user?1595::bool pragma1596::obj src1597::obj jvm-type-name1598::bstring) (instantiate::reshaped-global (id id1583) (name name1584) (type type1585) (value value1586) (access access1587) (fast-alpha fast-alpha1588) (removable removable1589) (occurrence occurrence1590) (module module1591) (import import1592) (evaluable? evaluable?1593) (library? library?1594) (user? user?1595) (pragma pragma1596) (src src1597) (jvm-type-name jvm-type-name1598)))
(define-inline (reshaped-global?::bool obj::obj) ((@ isa? __object) obj (@ reshaped-global cfa_info)))
(define (reshaped-global-nil::reshaped-global) (class-nil (@ reshaped-global cfa_info)))
(define-inline (reshaped-global-jvm-type-name::bstring o::reshaped-global) (-> |#!bigloo_wallow| o jvm-type-name))
(define-inline (reshaped-global-jvm-type-name-set! o::reshaped-global v::bstring) (set! (-> |#!bigloo_wallow| o jvm-type-name) v))
(define-inline (reshaped-global-src::obj o::reshaped-global) (-> |#!bigloo_wallow| o src))
(define-inline (reshaped-global-src-set! o::reshaped-global v::obj) (set! (-> |#!bigloo_wallow| o src) v))
(define-inline (reshaped-global-pragma::obj o::reshaped-global) (-> |#!bigloo_wallow| o pragma))
(define-inline (reshaped-global-pragma-set! o::reshaped-global v::obj) (set! (-> |#!bigloo_wallow| o pragma) v))
(define-inline (reshaped-global-user?::bool o::reshaped-global) (-> |#!bigloo_wallow| o user?))
(define-inline (reshaped-global-user?-set! o::reshaped-global v::bool) (set! (-> |#!bigloo_wallow| o user?) v))
(define-inline (reshaped-global-library?::bool o::reshaped-global) (-> |#!bigloo_wallow| o library?))
(define-inline (reshaped-global-library?-set! o::reshaped-global v::bool) (set! (-> |#!bigloo_wallow| o library?) v))
(define-inline (reshaped-global-evaluable?::bool o::reshaped-global) (-> |#!bigloo_wallow| o evaluable?))
(define-inline (reshaped-global-evaluable?-set! o::reshaped-global v::bool) (set! (-> |#!bigloo_wallow| o evaluable?) v))
(define-inline (reshaped-global-import::obj o::reshaped-global) (-> |#!bigloo_wallow| o import))
(define-inline (reshaped-global-import-set! o::reshaped-global v::obj) (set! (-> |#!bigloo_wallow| o import) v))
(define-inline (reshaped-global-module::symbol o::reshaped-global) (-> |#!bigloo_wallow| o module))
(define-inline (reshaped-global-module-set! o::reshaped-global v::symbol) (set! (-> |#!bigloo_wallow| o module) v))
(define-inline (reshaped-global-occurrence::long o::reshaped-global) (-> |#!bigloo_wallow| o occurrence))
(define-inline (reshaped-global-occurrence-set! o::reshaped-global v::long) (set! (-> |#!bigloo_wallow| o occurrence) v))
(define-inline (reshaped-global-removable::obj o::reshaped-global) (-> |#!bigloo_wallow| o removable))
(define-inline (reshaped-global-removable-set! o::reshaped-global v::obj) (set! (-> |#!bigloo_wallow| o removable) v))
(define-inline (reshaped-global-fast-alpha::obj o::reshaped-global) (-> |#!bigloo_wallow| o fast-alpha))
(define-inline (reshaped-global-fast-alpha-set! o::reshaped-global v::obj) (set! (-> |#!bigloo_wallow| o fast-alpha) v))
(define-inline (reshaped-global-access::obj o::reshaped-global) (-> |#!bigloo_wallow| o access))
(define-inline (reshaped-global-access-set! o::reshaped-global v::obj) (set! (-> |#!bigloo_wallow| o access) v))
(define-inline (reshaped-global-value::value o::reshaped-global) (-> |#!bigloo_wallow| o value))
(define-inline (reshaped-global-value-set! o::reshaped-global v::value) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (reshaped-global-type::type o::reshaped-global) (-> |#!bigloo_wallow| o type))
(define-inline (reshaped-global-type-set! o::reshaped-global v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (reshaped-global-name::obj o::reshaped-global) (-> |#!bigloo_wallow| o name))
(define-inline (reshaped-global-name-set! o::reshaped-global v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (reshaped-global-id::symbol o::reshaped-global) (-> |#!bigloo_wallow| o id))
(define-inline (reshaped-global-id-set! o::reshaped-global v::symbol) (set! (-> |#!bigloo_wallow| o id) v))

;; atom/Cinfo
(define-inline (make-atom/Cinfo::atom/Cinfo loc1578::obj type1579::type value1580::obj approx1581::approx) (instantiate::atom/Cinfo (loc loc1578) (type type1579) (value value1580) (approx approx1581)))
(define-inline (atom/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ atom/Cinfo cfa_info)))
(define (atom/Cinfo-nil::atom/Cinfo) (class-nil (@ atom/Cinfo cfa_info)))
(define-inline (atom/Cinfo-approx::approx o::atom/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (atom/Cinfo-approx-set! o::atom/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (atom/Cinfo-value::obj o::atom/Cinfo) (-> |#!bigloo_wallow| o value))
(define-inline (atom/Cinfo-value-set! o::atom/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (atom/Cinfo-type::type o::atom/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (atom/Cinfo-type-set! o::atom/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (atom/Cinfo-loc::obj o::atom/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (atom/Cinfo-loc-set! o::atom/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; kwote/node
(define-inline (make-kwote/node::kwote/node loc1573::obj type1574::type value1575::obj node1576::node) (instantiate::kwote/node (loc loc1573) (type type1574) (value value1575) (node node1576)))
(define-inline (kwote/node?::bool obj::obj) ((@ isa? __object) obj (@ kwote/node cfa_info)))
(define (kwote/node-nil::kwote/node) (class-nil (@ kwote/node cfa_info)))
(define-inline (kwote/node-node::node o::kwote/node) (-> |#!bigloo_wallow| o node))
(define-inline (kwote/node-node-set! o::kwote/node v::node) (set! (-> |#!bigloo_wallow| o node) v))
(define-inline (kwote/node-value::obj o::kwote/node) (-> |#!bigloo_wallow| o value))
(define-inline (kwote/node-value-set! o::kwote/node v::obj) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (kwote/node-type::type o::kwote/node) (-> |#!bigloo_wallow| o type))
(define-inline (kwote/node-type-set! o::kwote/node v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (kwote/node-loc::obj o::kwote/node) (-> |#!bigloo_wallow| o loc))
(define-inline (kwote/node-loc-set! o::kwote/node v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; kwote/Cinfo
(define-inline (make-kwote/Cinfo::kwote/Cinfo loc1568::obj type1569::type value1570::obj approx1571::approx) (instantiate::kwote/Cinfo (loc loc1568) (type type1569) (value value1570) (approx approx1571)))
(define-inline (kwote/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ kwote/Cinfo cfa_info)))
(define (kwote/Cinfo-nil::kwote/Cinfo) (class-nil (@ kwote/Cinfo cfa_info)))
(define-inline (kwote/Cinfo-approx::approx o::kwote/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (kwote/Cinfo-approx-set! o::kwote/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (kwote/Cinfo-value::obj o::kwote/Cinfo) (-> |#!bigloo_wallow| o value))
(define-inline (kwote/Cinfo-value-set! o::kwote/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (kwote/Cinfo-type::type o::kwote/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (kwote/Cinfo-type-set! o::kwote/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (kwote/Cinfo-loc::obj o::kwote/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (kwote/Cinfo-loc-set! o::kwote/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; app-ly/Cinfo
(define-inline (make-app-ly/Cinfo::app-ly/Cinfo loc1561::obj type1562::type fun1563::node arg1565::node approx1566::approx) (instantiate::app-ly/Cinfo (loc loc1561) (type type1562) (fun fun1563) (arg arg1565) (approx approx1566)))
(define-inline (app-ly/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ app-ly/Cinfo cfa_info)))
(define (app-ly/Cinfo-nil::app-ly/Cinfo) (class-nil (@ app-ly/Cinfo cfa_info)))
(define-inline (app-ly/Cinfo-approx::approx o::app-ly/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (app-ly/Cinfo-approx-set! o::app-ly/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (app-ly/Cinfo-arg::node o::app-ly/Cinfo) (-> |#!bigloo_wallow| o arg))
(define-inline (app-ly/Cinfo-arg-set! o::app-ly/Cinfo v::node) (set! (-> |#!bigloo_wallow| o arg) v))
(define-inline (app-ly/Cinfo-fun::node o::app-ly/Cinfo) (-> |#!bigloo_wallow| o fun))
(define-inline (app-ly/Cinfo-fun-set! o::app-ly/Cinfo v::node) (set! (-> |#!bigloo_wallow| o fun) v))
(define-inline (app-ly/Cinfo-type::type o::app-ly/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (app-ly/Cinfo-type-set! o::app-ly/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (app-ly/Cinfo-loc::obj o::app-ly/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (app-ly/Cinfo-loc-set! o::app-ly/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; funcall/Cinfo
(define-inline (make-funcall/Cinfo::funcall/Cinfo loc1551::obj type1552::type fun1553::node args1554::obj strength1555::symbol approx1556::approx va-approx1557::approx arity-error-noticed?1558::bool type-error-noticed?1559::bool) (instantiate::funcall/Cinfo (loc loc1551) (type type1552) (fun fun1553) (args args1554) (strength strength1555) (approx approx1556) (va-approx va-approx1557) (arity-error-noticed? arity-error-noticed?1558) (type-error-noticed? type-error-noticed?1559)))
(define-inline (funcall/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ funcall/Cinfo cfa_info)))
(define (funcall/Cinfo-nil::funcall/Cinfo) (class-nil (@ funcall/Cinfo cfa_info)))
(define-inline (funcall/Cinfo-type-error-noticed?::bool o::funcall/Cinfo) (-> |#!bigloo_wallow| o type-error-noticed?))
(define-inline (funcall/Cinfo-type-error-noticed?-set! o::funcall/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o type-error-noticed?) v))
(define-inline (funcall/Cinfo-arity-error-noticed?::bool o::funcall/Cinfo) (-> |#!bigloo_wallow| o arity-error-noticed?))
(define-inline (funcall/Cinfo-arity-error-noticed?-set! o::funcall/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o arity-error-noticed?) v))
(define-inline (funcall/Cinfo-va-approx::approx o::funcall/Cinfo) (-> |#!bigloo_wallow| o va-approx))
(define-inline (funcall/Cinfo-va-approx-set! o::funcall/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o va-approx) v))
(define-inline (funcall/Cinfo-approx::approx o::funcall/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (funcall/Cinfo-approx-set! o::funcall/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (funcall/Cinfo-strength::symbol o::funcall/Cinfo) (-> |#!bigloo_wallow| o strength))
(define-inline (funcall/Cinfo-strength-set! o::funcall/Cinfo v::symbol) (set! (-> |#!bigloo_wallow| o strength) v))
(define-inline (funcall/Cinfo-args::obj o::funcall/Cinfo) (-> |#!bigloo_wallow| o args))
(define-inline (funcall/Cinfo-args-set! o::funcall/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o args) v))
(define-inline (funcall/Cinfo-fun::node o::funcall/Cinfo) (-> |#!bigloo_wallow| o fun))
(define-inline (funcall/Cinfo-fun-set! o::funcall/Cinfo v::node) (set! (-> |#!bigloo_wallow| o fun) v))
(define-inline (funcall/Cinfo-type::type o::funcall/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (funcall/Cinfo-type-set! o::funcall/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (funcall/Cinfo-loc::obj o::funcall/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (funcall/Cinfo-loc-set! o::funcall/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; setq/Cinfo
(define-inline (make-setq/Cinfo::setq/Cinfo loc1545::obj type1546::type var1547::var value1548::node approx1549::approx) (instantiate::setq/Cinfo (loc loc1545) (type type1546) (var var1547) (value value1548) (approx approx1549)))
(define-inline (setq/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ setq/Cinfo cfa_info)))
(define (setq/Cinfo-nil::setq/Cinfo) (class-nil (@ setq/Cinfo cfa_info)))
(define-inline (setq/Cinfo-approx::approx o::setq/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (setq/Cinfo-approx-set! o::setq/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (setq/Cinfo-value::node o::setq/Cinfo) (-> |#!bigloo_wallow| o value))
(define-inline (setq/Cinfo-value-set! o::setq/Cinfo v::node) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (setq/Cinfo-var::var o::setq/Cinfo) (-> |#!bigloo_wallow| o var))
(define-inline (setq/Cinfo-var-set! o::setq/Cinfo v::var) (set! (-> |#!bigloo_wallow| o var) v))
(define-inline (setq/Cinfo-type::type o::setq/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (setq/Cinfo-type-set! o::setq/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (setq/Cinfo-loc::obj o::setq/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (setq/Cinfo-loc-set! o::setq/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; conditional/Cinfo
(define-inline (make-conditional/Cinfo::conditional/Cinfo loc1536::obj type1537::type side-effect?1538::obj key1539::obj test1540::node true1541::node false1542::node approx1543::approx) (instantiate::conditional/Cinfo (loc loc1536) (type type1537) (side-effect? side-effect?1538) (key key1539) (test test1540) (true true1541) (false false1542) (approx approx1543)))
(define-inline (conditional/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ conditional/Cinfo cfa_info)))
(define (conditional/Cinfo-nil::conditional/Cinfo) (class-nil (@ conditional/Cinfo cfa_info)))
(define-inline (conditional/Cinfo-approx::approx o::conditional/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (conditional/Cinfo-approx-set! o::conditional/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (conditional/Cinfo-false::node o::conditional/Cinfo) (-> |#!bigloo_wallow| o false))
(define-inline (conditional/Cinfo-false-set! o::conditional/Cinfo v::node) (set! (-> |#!bigloo_wallow| o false) v))
(define-inline (conditional/Cinfo-true::node o::conditional/Cinfo) (-> |#!bigloo_wallow| o true))
(define-inline (conditional/Cinfo-true-set! o::conditional/Cinfo v::node) (set! (-> |#!bigloo_wallow| o true) v))
(define-inline (conditional/Cinfo-test::node o::conditional/Cinfo) (-> |#!bigloo_wallow| o test))
(define-inline (conditional/Cinfo-test-set! o::conditional/Cinfo v::node) (set! (-> |#!bigloo_wallow| o test) v))
(define-inline (conditional/Cinfo-key::obj o::conditional/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (conditional/Cinfo-key-set! o::conditional/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (conditional/Cinfo-side-effect?::obj o::conditional/Cinfo) (-> |#!bigloo_wallow| o side-effect?))
(define-inline (conditional/Cinfo-side-effect?-set! o::conditional/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect?) v))
(define-inline (conditional/Cinfo-type::type o::conditional/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (conditional/Cinfo-type-set! o::conditional/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (conditional/Cinfo-loc::obj o::conditional/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (conditional/Cinfo-loc-set! o::conditional/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; fail/Cinfo
(define-inline (make-fail/Cinfo::fail/Cinfo loc1529::obj type1530::type proc1531::node msg1532::node obj1533::node approx1534::approx) (instantiate::fail/Cinfo (loc loc1529) (type type1530) (proc proc1531) (msg msg1532) (obj obj1533) (approx approx1534)))
(define-inline (fail/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ fail/Cinfo cfa_info)))
(define (fail/Cinfo-nil::fail/Cinfo) (class-nil (@ fail/Cinfo cfa_info)))
(define-inline (fail/Cinfo-approx::approx o::fail/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (fail/Cinfo-approx-set! o::fail/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (fail/Cinfo-obj::node o::fail/Cinfo) (-> |#!bigloo_wallow| o obj))
(define-inline (fail/Cinfo-obj-set! o::fail/Cinfo v::node) (set! (-> |#!bigloo_wallow| o obj) v))
(define-inline (fail/Cinfo-msg::node o::fail/Cinfo) (-> |#!bigloo_wallow| o msg))
(define-inline (fail/Cinfo-msg-set! o::fail/Cinfo v::node) (set! (-> |#!bigloo_wallow| o msg) v))
(define-inline (fail/Cinfo-proc::node o::fail/Cinfo) (-> |#!bigloo_wallow| o proc))
(define-inline (fail/Cinfo-proc-set! o::fail/Cinfo v::node) (set! (-> |#!bigloo_wallow| o proc) v))
(define-inline (fail/Cinfo-type::type o::fail/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (fail/Cinfo-type-set! o::fail/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (fail/Cinfo-loc::obj o::fail/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (fail/Cinfo-loc-set! o::fail/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; select/Cinfo
(define-inline (make-select/Cinfo::select/Cinfo loc1520::obj type1521::type side-effect?1522::obj key1523::obj test1524::node clauses1525::obj item-type1526::type approx1527::approx) (instantiate::select/Cinfo (loc loc1520) (type type1521) (side-effect? side-effect?1522) (key key1523) (test test1524) (clauses clauses1525) (item-type item-type1526) (approx approx1527)))
(define-inline (select/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ select/Cinfo cfa_info)))
(define (select/Cinfo-nil::select/Cinfo) (class-nil (@ select/Cinfo cfa_info)))
(define-inline (select/Cinfo-approx::approx o::select/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (select/Cinfo-approx-set! o::select/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (select/Cinfo-item-type::type o::select/Cinfo) (-> |#!bigloo_wallow| o item-type))
(define-inline (select/Cinfo-item-type-set! o::select/Cinfo v::type) (set! (-> |#!bigloo_wallow| o item-type) v))
(define-inline (select/Cinfo-clauses::obj o::select/Cinfo) (-> |#!bigloo_wallow| o clauses))
(define-inline (select/Cinfo-clauses-set! o::select/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o clauses) v))
(define-inline (select/Cinfo-test::node o::select/Cinfo) (-> |#!bigloo_wallow| o test))
(define-inline (select/Cinfo-test-set! o::select/Cinfo v::node) (set! (-> |#!bigloo_wallow| o test) v))
(define-inline (select/Cinfo-key::obj o::select/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (select/Cinfo-key-set! o::select/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (select/Cinfo-side-effect?::obj o::select/Cinfo) (-> |#!bigloo_wallow| o side-effect?))
(define-inline (select/Cinfo-side-effect?-set! o::select/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect?) v))
(define-inline (select/Cinfo-type::type o::select/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (select/Cinfo-type-set! o::select/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (select/Cinfo-loc::obj o::select/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (select/Cinfo-loc-set! o::select/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; set-ex-it/Cinfo
(define-inline (make-set-ex-it/Cinfo::set-ex-it/Cinfo loc1514::obj type1515::type var1516::var body1517::node approx1518::approx) (instantiate::set-ex-it/Cinfo (loc loc1514) (type type1515) (var var1516) (body body1517) (approx approx1518)))
(define-inline (set-ex-it/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ set-ex-it/Cinfo cfa_info)))
(define (set-ex-it/Cinfo-nil::set-ex-it/Cinfo) (class-nil (@ set-ex-it/Cinfo cfa_info)))
(define-inline (set-ex-it/Cinfo-approx::approx o::set-ex-it/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (set-ex-it/Cinfo-approx-set! o::set-ex-it/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (set-ex-it/Cinfo-body::node o::set-ex-it/Cinfo) (-> |#!bigloo_wallow| o body))
(define-inline (set-ex-it/Cinfo-body-set! o::set-ex-it/Cinfo v::node) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (set-ex-it/Cinfo-var::var o::set-ex-it/Cinfo) (-> |#!bigloo_wallow| o var))
(define-inline (set-ex-it/Cinfo-var-set! o::set-ex-it/Cinfo v::var) (set! (-> |#!bigloo_wallow| o var) v))
(define-inline (set-ex-it/Cinfo-type::type o::set-ex-it/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (set-ex-it/Cinfo-type-set! o::set-ex-it/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (set-ex-it/Cinfo-loc::obj o::set-ex-it/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (set-ex-it/Cinfo-loc-set! o::set-ex-it/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; jump-ex-it/Cinfo
(define-inline (make-jump-ex-it/Cinfo::jump-ex-it/Cinfo loc1508::obj type1509::type exit1510::node value1511::node approx1512::approx) (instantiate::jump-ex-it/Cinfo (loc loc1508) (type type1509) (exit exit1510) (value value1511) (approx approx1512)))
(define-inline (jump-ex-it/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ jump-ex-it/Cinfo cfa_info)))
(define (jump-ex-it/Cinfo-nil::jump-ex-it/Cinfo) (class-nil (@ jump-ex-it/Cinfo cfa_info)))
(define-inline (jump-ex-it/Cinfo-approx::approx o::jump-ex-it/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (jump-ex-it/Cinfo-approx-set! o::jump-ex-it/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (jump-ex-it/Cinfo-value::node o::jump-ex-it/Cinfo) (-> |#!bigloo_wallow| o value))
(define-inline (jump-ex-it/Cinfo-value-set! o::jump-ex-it/Cinfo v::node) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (jump-ex-it/Cinfo-exit::node o::jump-ex-it/Cinfo) (-> |#!bigloo_wallow| o exit))
(define-inline (jump-ex-it/Cinfo-exit-set! o::jump-ex-it/Cinfo v::node) (set! (-> |#!bigloo_wallow| o exit) v))
(define-inline (jump-ex-it/Cinfo-type::type o::jump-ex-it/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (jump-ex-it/Cinfo-type-set! o::jump-ex-it/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (jump-ex-it/Cinfo-loc::obj o::jump-ex-it/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (jump-ex-it/Cinfo-loc-set! o::jump-ex-it/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; pre-make-box
(define-inline (make-pre-make-box::pre-make-box loc1502::obj type1503::type side-effect?1504::obj key1505::obj value1506::node) (instantiate::pre-make-box (loc loc1502) (type type1503) (side-effect? side-effect?1504) (key key1505) (value value1506)))
(define-inline (pre-make-box?::bool obj::obj) ((@ isa? __object) obj (@ pre-make-box cfa_info)))
(define (pre-make-box-nil::pre-make-box) (class-nil (@ pre-make-box cfa_info)))
(define-inline (pre-make-box-value::node o::pre-make-box) (-> |#!bigloo_wallow| o value))
(define-inline (pre-make-box-value-set! o::pre-make-box v::node) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (pre-make-box-key::obj o::pre-make-box) (-> |#!bigloo_wallow| o key))
(define-inline (pre-make-box-key-set! o::pre-make-box v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (pre-make-box-side-effect?::obj o::pre-make-box) (-> |#!bigloo_wallow| o side-effect?))
(define-inline (pre-make-box-side-effect?-set! o::pre-make-box v::obj) (set! (-> |#!bigloo_wallow| o side-effect?) v))
(define-inline (pre-make-box-type::type o::pre-make-box) (-> |#!bigloo_wallow| o type))
(define-inline (pre-make-box-type-set! o::pre-make-box v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (pre-make-box-loc::obj o::pre-make-box) (-> |#!bigloo_wallow| o loc))
(define-inline (pre-make-box-loc-set! o::pre-make-box v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; make-box/Cinfo
(define-inline (make-make-box/Cinfo::make-box/Cinfo loc1495::obj type1496::type side-effect?1497::obj key1498::obj value1499::node approx1500::approx) (instantiate::make-box/Cinfo (loc loc1495) (type type1496) (side-effect? side-effect?1497) (key key1498) (value value1499) (approx approx1500)))
(define-inline (make-box/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ make-box/Cinfo cfa_info)))
(define (make-box/Cinfo-nil::make-box/Cinfo) (class-nil (@ make-box/Cinfo cfa_info)))
(define-inline (make-box/Cinfo-approx::approx o::make-box/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (make-box/Cinfo-approx-set! o::make-box/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (make-box/Cinfo-value::node o::make-box/Cinfo) (-> |#!bigloo_wallow| o value))
(define-inline (make-box/Cinfo-value-set! o::make-box/Cinfo v::node) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (make-box/Cinfo-key::obj o::make-box/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (make-box/Cinfo-key-set! o::make-box/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (make-box/Cinfo-side-effect?::obj o::make-box/Cinfo) (-> |#!bigloo_wallow| o side-effect?))
(define-inline (make-box/Cinfo-side-effect?-set! o::make-box/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect?) v))
(define-inline (make-box/Cinfo-type::type o::make-box/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (make-box/Cinfo-type-set! o::make-box/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (make-box/Cinfo-loc::obj o::make-box/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (make-box/Cinfo-loc-set! o::make-box/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; make-box/O-Cinfo
(define-inline (make-make-box/O-Cinfo::make-box/O-Cinfo loc1487::obj type1488::type side-effect?1489::obj key1490::obj value1491::node approx1492::approx value-approx1493::approx) (instantiate::make-box/O-Cinfo (loc loc1487) (type type1488) (side-effect? side-effect?1489) (key key1490) (value value1491) (approx approx1492) (value-approx value-approx1493)))
(define-inline (make-box/O-Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ make-box/O-Cinfo cfa_info)))
(define (make-box/O-Cinfo-nil::make-box/O-Cinfo) (class-nil (@ make-box/O-Cinfo cfa_info)))
(define-inline (make-box/O-Cinfo-value-approx::approx o::make-box/O-Cinfo) (-> |#!bigloo_wallow| o value-approx))
(define-inline (make-box/O-Cinfo-value-approx-set! o::make-box/O-Cinfo v::approx) (set! (-> |#!bigloo_wallow| o value-approx) v))
(define-inline (make-box/O-Cinfo-approx::approx o::make-box/O-Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (make-box/O-Cinfo-approx-set! o::make-box/O-Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (make-box/O-Cinfo-value::node o::make-box/O-Cinfo) (-> |#!bigloo_wallow| o value))
(define-inline (make-box/O-Cinfo-value-set! o::make-box/O-Cinfo v::node) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (make-box/O-Cinfo-key::obj o::make-box/O-Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (make-box/O-Cinfo-key-set! o::make-box/O-Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (make-box/O-Cinfo-side-effect?::obj o::make-box/O-Cinfo) (-> |#!bigloo_wallow| o side-effect?))
(define-inline (make-box/O-Cinfo-side-effect?-set! o::make-box/O-Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect?) v))
(define-inline (make-box/O-Cinfo-type::type o::make-box/O-Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (make-box/O-Cinfo-type-set! o::make-box/O-Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (make-box/O-Cinfo-loc::obj o::make-box/O-Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (make-box/O-Cinfo-loc-set! o::make-box/O-Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; box-set!/Cinfo
(define-inline (make-box-set!/Cinfo::box-set!/Cinfo loc1481::obj type1482::type var1483::var value1484::node approx1485::approx) (instantiate::box-set!/Cinfo (loc loc1481) (type type1482) (var var1483) (value value1484) (approx approx1485)))
(define-inline (box-set!/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ box-set!/Cinfo cfa_info)))
(define (box-set!/Cinfo-nil::box-set!/Cinfo) (class-nil (@ box-set!/Cinfo cfa_info)))
(define-inline (box-set!/Cinfo-approx::approx o::box-set!/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (box-set!/Cinfo-approx-set! o::box-set!/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (box-set!/Cinfo-value::node o::box-set!/Cinfo) (-> |#!bigloo_wallow| o value))
(define-inline (box-set!/Cinfo-value-set! o::box-set!/Cinfo v::node) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (box-set!/Cinfo-var::var o::box-set!/Cinfo) (-> |#!bigloo_wallow| o var))
(define-inline (box-set!/Cinfo-var-set! o::box-set!/Cinfo v::var) (set! (-> |#!bigloo_wallow| o var) v))
(define-inline (box-set!/Cinfo-type::type o::box-set!/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (box-set!/Cinfo-type-set! o::box-set!/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (box-set!/Cinfo-loc::obj o::box-set!/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (box-set!/Cinfo-loc-set! o::box-set!/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; box-ref/Cinfo
(define-inline (make-box-ref/Cinfo::box-ref/Cinfo loc1474::obj type1475::type side-effect?1476::obj key1477::obj var1478::var approx1479::approx) (instantiate::box-ref/Cinfo (loc loc1474) (type type1475) (side-effect? side-effect?1476) (key key1477) (var var1478) (approx approx1479)))
(define-inline (box-ref/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ box-ref/Cinfo cfa_info)))
(define (box-ref/Cinfo-nil::box-ref/Cinfo) (class-nil (@ box-ref/Cinfo cfa_info)))
(define-inline (box-ref/Cinfo-approx::approx o::box-ref/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (box-ref/Cinfo-approx-set! o::box-ref/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (box-ref/Cinfo-var::var o::box-ref/Cinfo) (-> |#!bigloo_wallow| o var))
(define-inline (box-ref/Cinfo-var-set! o::box-ref/Cinfo v::var) (set! (-> |#!bigloo_wallow| o var) v))
(define-inline (box-ref/Cinfo-key::obj o::box-ref/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (box-ref/Cinfo-key-set! o::box-ref/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (box-ref/Cinfo-side-effect?::obj o::box-ref/Cinfo) (-> |#!bigloo_wallow| o side-effect?))
(define-inline (box-ref/Cinfo-side-effect?-set! o::box-ref/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect?) v))
(define-inline (box-ref/Cinfo-type::type o::box-ref/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (box-ref/Cinfo-type-set! o::box-ref/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (box-ref/Cinfo-loc::obj o::box-ref/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (box-ref/Cinfo-loc-set! o::box-ref/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; box-set!/O-Cinfo
(define-inline (make-box-set!/O-Cinfo::box-set!/O-Cinfo loc1468::obj type1469::type var1470::var value1471::node approx1472::approx) (instantiate::box-set!/O-Cinfo (loc loc1468) (type type1469) (var var1470) (value value1471) (approx approx1472)))
(define-inline (box-set!/O-Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ box-set!/O-Cinfo cfa_info)))
(define (box-set!/O-Cinfo-nil::box-set!/O-Cinfo) (class-nil (@ box-set!/O-Cinfo cfa_info)))
(define-inline (box-set!/O-Cinfo-approx::approx o::box-set!/O-Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (box-set!/O-Cinfo-approx-set! o::box-set!/O-Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (box-set!/O-Cinfo-value::node o::box-set!/O-Cinfo) (-> |#!bigloo_wallow| o value))
(define-inline (box-set!/O-Cinfo-value-set! o::box-set!/O-Cinfo v::node) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (box-set!/O-Cinfo-var::var o::box-set!/O-Cinfo) (-> |#!bigloo_wallow| o var))
(define-inline (box-set!/O-Cinfo-var-set! o::box-set!/O-Cinfo v::var) (set! (-> |#!bigloo_wallow| o var) v))
(define-inline (box-set!/O-Cinfo-type::type o::box-set!/O-Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (box-set!/O-Cinfo-type-set! o::box-set!/O-Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (box-set!/O-Cinfo-loc::obj o::box-set!/O-Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (box-set!/O-Cinfo-loc-set! o::box-set!/O-Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; box-ref/O-Cinfo
(define-inline (make-box-ref/O-Cinfo::box-ref/O-Cinfo loc1461::obj type1462::type side-effect?1463::obj key1464::obj var1465::var approx1466::approx) (instantiate::box-ref/O-Cinfo (loc loc1461) (type type1462) (side-effect? side-effect?1463) (key key1464) (var var1465) (approx approx1466)))
(define-inline (box-ref/O-Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ box-ref/O-Cinfo cfa_info)))
(define (box-ref/O-Cinfo-nil::box-ref/O-Cinfo) (class-nil (@ box-ref/O-Cinfo cfa_info)))
(define-inline (box-ref/O-Cinfo-approx::approx o::box-ref/O-Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (box-ref/O-Cinfo-approx-set! o::box-ref/O-Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (box-ref/O-Cinfo-var::var o::box-ref/O-Cinfo) (-> |#!bigloo_wallow| o var))
(define-inline (box-ref/O-Cinfo-var-set! o::box-ref/O-Cinfo v::var) (set! (-> |#!bigloo_wallow| o var) v))
(define-inline (box-ref/O-Cinfo-key::obj o::box-ref/O-Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (box-ref/O-Cinfo-key-set! o::box-ref/O-Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (box-ref/O-Cinfo-side-effect?::obj o::box-ref/O-Cinfo) (-> |#!bigloo_wallow| o side-effect?))
(define-inline (box-ref/O-Cinfo-side-effect?-set! o::box-ref/O-Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect?) v))
(define-inline (box-ref/O-Cinfo-type::type o::box-ref/O-Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (box-ref/O-Cinfo-type-set! o::box-ref/O-Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (box-ref/O-Cinfo-loc::obj o::box-ref/O-Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (box-ref/O-Cinfo-loc-set! o::box-ref/O-Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))
))
