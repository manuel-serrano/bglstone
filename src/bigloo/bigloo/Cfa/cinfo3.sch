;; ==========================================================
;; Class accessors
;; Bigloo (4.7a)
;; Inria -- Sophia Antipolis     Thu Mar 6 07:34:14 AM CET 2025 
;; (bigloo -classgen Cfa/cinfo3.scm)
;; ==========================================================

;; The directives
(directives

;; pragma/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-pragma/Cinfo::pragma/Cinfo loc1442::obj type1443::type side-effect?1444::obj key1445::obj expr*1446::pair-nil effect1447::obj format1448::bstring approx1449::approx)
    (inline pragma/Cinfo?::bool ::obj)
    (pragma/Cinfo-nil::pragma/Cinfo)
    (inline pragma/Cinfo-approx::approx ::pragma/Cinfo)
    (inline pragma/Cinfo-format::bstring ::pragma/Cinfo)
    (inline pragma/Cinfo-effect::obj ::pragma/Cinfo)
    (inline pragma/Cinfo-effect-set! ::pragma/Cinfo ::obj)
    (inline pragma/Cinfo-expr*::pair-nil ::pragma/Cinfo)
    (inline pragma/Cinfo-expr*-set! ::pragma/Cinfo ::pair-nil)
    (inline pragma/Cinfo-key::obj ::pragma/Cinfo)
    (inline pragma/Cinfo-key-set! ::pragma/Cinfo ::obj)
    (inline pragma/Cinfo-side-effect?::obj ::pragma/Cinfo)
    (inline pragma/Cinfo-side-effect?-set! ::pragma/Cinfo ::obj)
    (inline pragma/Cinfo-type::type ::pragma/Cinfo)
    (inline pragma/Cinfo-type-set! ::pragma/Cinfo ::type)
    (inline pragma/Cinfo-loc::obj ::pragma/Cinfo))))

;; getfield/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-getfield/Cinfo::getfield/Cinfo loc1431::obj type1432::type side-effect?1433::obj key1434::obj expr*1435::pair-nil effect1436::obj fname1437::bstring ftype1438::type otype1439::type approx1440::approx)
    (inline getfield/Cinfo?::bool ::obj)
    (getfield/Cinfo-nil::getfield/Cinfo)
    (inline getfield/Cinfo-approx::approx ::getfield/Cinfo)
    (inline getfield/Cinfo-otype::type ::getfield/Cinfo)
    (inline getfield/Cinfo-ftype::type ::getfield/Cinfo)
    (inline getfield/Cinfo-fname::bstring ::getfield/Cinfo)
    (inline getfield/Cinfo-effect::obj ::getfield/Cinfo)
    (inline getfield/Cinfo-effect-set! ::getfield/Cinfo ::obj)
    (inline getfield/Cinfo-expr*::pair-nil ::getfield/Cinfo)
    (inline getfield/Cinfo-expr*-set! ::getfield/Cinfo ::pair-nil)
    (inline getfield/Cinfo-key::obj ::getfield/Cinfo)
    (inline getfield/Cinfo-key-set! ::getfield/Cinfo ::obj)
    (inline getfield/Cinfo-side-effect?::obj ::getfield/Cinfo)
    (inline getfield/Cinfo-side-effect?-set! ::getfield/Cinfo ::obj)
    (inline getfield/Cinfo-type::type ::getfield/Cinfo)
    (inline getfield/Cinfo-type-set! ::getfield/Cinfo ::type)
    (inline getfield/Cinfo-loc::obj ::getfield/Cinfo))))

;; setfield/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-setfield/Cinfo::setfield/Cinfo loc1420::obj type1421::type side-effect?1422::obj key1423::obj expr*1424::pair-nil effect1425::obj fname1426::bstring ftype1427::type otype1428::type approx1429::approx)
    (inline setfield/Cinfo?::bool ::obj)
    (setfield/Cinfo-nil::setfield/Cinfo)
    (inline setfield/Cinfo-approx::approx ::setfield/Cinfo)
    (inline setfield/Cinfo-otype::type ::setfield/Cinfo)
    (inline setfield/Cinfo-ftype::type ::setfield/Cinfo)
    (inline setfield/Cinfo-fname::bstring ::setfield/Cinfo)
    (inline setfield/Cinfo-effect::obj ::setfield/Cinfo)
    (inline setfield/Cinfo-effect-set! ::setfield/Cinfo ::obj)
    (inline setfield/Cinfo-expr*::pair-nil ::setfield/Cinfo)
    (inline setfield/Cinfo-expr*-set! ::setfield/Cinfo ::pair-nil)
    (inline setfield/Cinfo-key::obj ::setfield/Cinfo)
    (inline setfield/Cinfo-key-set! ::setfield/Cinfo ::obj)
    (inline setfield/Cinfo-side-effect?::obj ::setfield/Cinfo)
    (inline setfield/Cinfo-side-effect?-set! ::setfield/Cinfo ::obj)
    (inline setfield/Cinfo-type::type ::setfield/Cinfo)
    (inline setfield/Cinfo-type-set! ::setfield/Cinfo ::type)
    (inline setfield/Cinfo-loc::obj ::setfield/Cinfo))))

;; new/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-new/Cinfo::new/Cinfo loc1410::obj type1411::type side-effect?1412::obj key1413::obj expr*1414::pair-nil effect1415::obj args-type1416::pair-nil approx1417::approx)
    (inline new/Cinfo?::bool ::obj)
    (new/Cinfo-nil::new/Cinfo)
    (inline new/Cinfo-approx::approx ::new/Cinfo)
    (inline new/Cinfo-args-type::pair-nil ::new/Cinfo)
    (inline new/Cinfo-args-type-set! ::new/Cinfo ::pair-nil)
    (inline new/Cinfo-effect::obj ::new/Cinfo)
    (inline new/Cinfo-effect-set! ::new/Cinfo ::obj)
    (inline new/Cinfo-expr*::pair-nil ::new/Cinfo)
    (inline new/Cinfo-expr*-set! ::new/Cinfo ::pair-nil)
    (inline new/Cinfo-key::obj ::new/Cinfo)
    (inline new/Cinfo-key-set! ::new/Cinfo ::obj)
    (inline new/Cinfo-side-effect?::obj ::new/Cinfo)
    (inline new/Cinfo-side-effect?-set! ::new/Cinfo ::obj)
    (inline new/Cinfo-type::type ::new/Cinfo)
    (inline new/Cinfo-type-set! ::new/Cinfo ::type)
    (inline new/Cinfo-loc::obj ::new/Cinfo))))

;; isa/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-isa/Cinfo::isa/Cinfo loc1401::obj type1402::type side-effect?1403::obj key1404::obj expr*1405::pair-nil effect1406::obj class1407::type approx1408::approx)
    (inline isa/Cinfo?::bool ::obj)
    (isa/Cinfo-nil::isa/Cinfo)
    (inline isa/Cinfo-approx::approx ::isa/Cinfo)
    (inline isa/Cinfo-class::type ::isa/Cinfo)
    (inline isa/Cinfo-effect::obj ::isa/Cinfo)
    (inline isa/Cinfo-effect-set! ::isa/Cinfo ::obj)
    (inline isa/Cinfo-expr*::pair-nil ::isa/Cinfo)
    (inline isa/Cinfo-expr*-set! ::isa/Cinfo ::pair-nil)
    (inline isa/Cinfo-key::obj ::isa/Cinfo)
    (inline isa/Cinfo-key-set! ::isa/Cinfo ::obj)
    (inline isa/Cinfo-side-effect?::obj ::isa/Cinfo)
    (inline isa/Cinfo-side-effect?-set! ::isa/Cinfo ::obj)
    (inline isa/Cinfo-type::type ::isa/Cinfo)
    (inline isa/Cinfo-type-set! ::isa/Cinfo ::type)
    (inline isa/Cinfo-loc::obj ::isa/Cinfo))))

;; cast-null/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cast-null/Cinfo::cast-null/Cinfo loc1393::obj type1394::type side-effect?1395::obj key1396::obj expr*1397::pair-nil effect1398::obj approx1399::approx)
    (inline cast-null/Cinfo?::bool ::obj)
    (cast-null/Cinfo-nil::cast-null/Cinfo)
    (inline cast-null/Cinfo-approx::approx ::cast-null/Cinfo)
    (inline cast-null/Cinfo-effect::obj ::cast-null/Cinfo)
    (inline cast-null/Cinfo-effect-set! ::cast-null/Cinfo ::obj)
    (inline cast-null/Cinfo-expr*::pair-nil ::cast-null/Cinfo)
    (inline cast-null/Cinfo-expr*-set! ::cast-null/Cinfo ::pair-nil)
    (inline cast-null/Cinfo-key::obj ::cast-null/Cinfo)
    (inline cast-null/Cinfo-key-set! ::cast-null/Cinfo ::obj)
    (inline cast-null/Cinfo-side-effect?::obj ::cast-null/Cinfo)
    (inline cast-null/Cinfo-side-effect?-set! ::cast-null/Cinfo ::obj)
    (inline cast-null/Cinfo-type::type ::cast-null/Cinfo)
    (inline cast-null/Cinfo-type-set! ::cast-null/Cinfo ::type)
    (inline cast-null/Cinfo-loc::obj ::cast-null/Cinfo))))

;; vref/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-vref/Cinfo::vref/Cinfo loc1380::obj type1381::type side-effect?1382::obj key1383::obj expr*1384::pair-nil effect1385::obj c-format1386::bstring ftype1387::type otype1388::type vtype1389::type approx1390::approx tvector?1391::bool)
    (inline vref/Cinfo?::bool ::obj)
    (vref/Cinfo-nil::vref/Cinfo)
    (inline vref/Cinfo-tvector?::bool ::vref/Cinfo)
    (inline vref/Cinfo-tvector?-set! ::vref/Cinfo ::bool)
    (inline vref/Cinfo-approx::approx ::vref/Cinfo)
    (inline vref/Cinfo-vtype::type ::vref/Cinfo)
    (inline vref/Cinfo-otype::type ::vref/Cinfo)
    (inline vref/Cinfo-ftype::type ::vref/Cinfo)
    (inline vref/Cinfo-ftype-set! ::vref/Cinfo ::type)
    (inline vref/Cinfo-c-format::bstring ::vref/Cinfo)
    (inline vref/Cinfo-effect::obj ::vref/Cinfo)
    (inline vref/Cinfo-effect-set! ::vref/Cinfo ::obj)
    (inline vref/Cinfo-expr*::pair-nil ::vref/Cinfo)
    (inline vref/Cinfo-expr*-set! ::vref/Cinfo ::pair-nil)
    (inline vref/Cinfo-key::obj ::vref/Cinfo)
    (inline vref/Cinfo-key-set! ::vref/Cinfo ::obj)
    (inline vref/Cinfo-side-effect?::obj ::vref/Cinfo)
    (inline vref/Cinfo-side-effect?-set! ::vref/Cinfo ::obj)
    (inline vref/Cinfo-type::type ::vref/Cinfo)
    (inline vref/Cinfo-type-set! ::vref/Cinfo ::type)
    (inline vref/Cinfo-loc::obj ::vref/Cinfo))))

;; vset!/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-vset!/Cinfo::vset!/Cinfo loc1367::obj type1368::type side-effect?1369::obj key1370::obj expr*1371::pair-nil effect1372::obj c-format1373::bstring ftype1374::type otype1375::type vtype1376::type approx1377::approx tvector?1378::bool)
    (inline vset!/Cinfo?::bool ::obj)
    (vset!/Cinfo-nil::vset!/Cinfo)
    (inline vset!/Cinfo-tvector?::bool ::vset!/Cinfo)
    (inline vset!/Cinfo-tvector?-set! ::vset!/Cinfo ::bool)
    (inline vset!/Cinfo-approx::approx ::vset!/Cinfo)
    (inline vset!/Cinfo-vtype::type ::vset!/Cinfo)
    (inline vset!/Cinfo-otype::type ::vset!/Cinfo)
    (inline vset!/Cinfo-ftype::type ::vset!/Cinfo)
    (inline vset!/Cinfo-ftype-set! ::vset!/Cinfo ::type)
    (inline vset!/Cinfo-c-format::bstring ::vset!/Cinfo)
    (inline vset!/Cinfo-effect::obj ::vset!/Cinfo)
    (inline vset!/Cinfo-effect-set! ::vset!/Cinfo ::obj)
    (inline vset!/Cinfo-expr*::pair-nil ::vset!/Cinfo)
    (inline vset!/Cinfo-expr*-set! ::vset!/Cinfo ::pair-nil)
    (inline vset!/Cinfo-key::obj ::vset!/Cinfo)
    (inline vset!/Cinfo-key-set! ::vset!/Cinfo ::obj)
    (inline vset!/Cinfo-side-effect?::obj ::vset!/Cinfo)
    (inline vset!/Cinfo-side-effect?-set! ::vset!/Cinfo ::obj)
    (inline vset!/Cinfo-type::type ::vset!/Cinfo)
    (inline vset!/Cinfo-type-set! ::vset!/Cinfo ::type)
    (inline vset!/Cinfo-loc::obj ::vset!/Cinfo))))

;; vlength/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-vlength/Cinfo::vlength/Cinfo loc1356::obj type1357::type side-effect?1358::obj key1359::obj expr*1360::pair-nil effect1361::obj c-format1362::bstring vtype1363::type approx1364::approx tvector?1365::bool)
    (inline vlength/Cinfo?::bool ::obj)
    (vlength/Cinfo-nil::vlength/Cinfo)
    (inline vlength/Cinfo-tvector?::bool ::vlength/Cinfo)
    (inline vlength/Cinfo-tvector?-set! ::vlength/Cinfo ::bool)
    (inline vlength/Cinfo-approx::approx ::vlength/Cinfo)
    (inline vlength/Cinfo-vtype::type ::vlength/Cinfo)
    (inline vlength/Cinfo-c-format::bstring ::vlength/Cinfo)
    (inline vlength/Cinfo-effect::obj ::vlength/Cinfo)
    (inline vlength/Cinfo-effect-set! ::vlength/Cinfo ::obj)
    (inline vlength/Cinfo-expr*::pair-nil ::vlength/Cinfo)
    (inline vlength/Cinfo-expr*-set! ::vlength/Cinfo ::pair-nil)
    (inline vlength/Cinfo-key::obj ::vlength/Cinfo)
    (inline vlength/Cinfo-key-set! ::vlength/Cinfo ::obj)
    (inline vlength/Cinfo-side-effect?::obj ::vlength/Cinfo)
    (inline vlength/Cinfo-side-effect?-set! ::vlength/Cinfo ::obj)
    (inline vlength/Cinfo-type::type ::vlength/Cinfo)
    (inline vlength/Cinfo-type-set! ::vlength/Cinfo ::type)
    (inline vlength/Cinfo-loc::obj ::vlength/Cinfo))))

;; pre-valloc/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-pre-valloc/Cinfo::pre-valloc/Cinfo loc1345::obj type1346::type side-effect?1347::obj key1348::obj expr*1349::pair-nil effect1350::obj c-heap-format1351::bstring ftype1352::type otype1353::type owner1354::variable)
    (inline pre-valloc/Cinfo?::bool ::obj)
    (pre-valloc/Cinfo-nil::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-owner::variable ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-otype::type ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-ftype::type ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-c-heap-format::bstring ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-effect::obj ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-effect-set! ::pre-valloc/Cinfo ::obj)
    (inline pre-valloc/Cinfo-expr*::pair-nil ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-expr*-set! ::pre-valloc/Cinfo ::pair-nil)
    (inline pre-valloc/Cinfo-key::obj ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-key-set! ::pre-valloc/Cinfo ::obj)
    (inline pre-valloc/Cinfo-side-effect?::obj ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-side-effect?-set! ::pre-valloc/Cinfo ::obj)
    (inline pre-valloc/Cinfo-type::type ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-type-set! ::pre-valloc/Cinfo ::type)
    (inline pre-valloc/Cinfo-loc::obj ::pre-valloc/Cinfo))))

;; valloc/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-valloc/Cinfo::valloc/Cinfo loc1334::obj type1335::type side-effect?1336::obj key1337::obj expr*1338::pair-nil effect1339::obj c-heap-format1340::bstring ftype1341::type otype1342::type approx1343::approx)
    (inline valloc/Cinfo?::bool ::obj)
    (valloc/Cinfo-nil::valloc/Cinfo)
    (inline valloc/Cinfo-approx::approx ::valloc/Cinfo)
    (inline valloc/Cinfo-otype::type ::valloc/Cinfo)
    (inline valloc/Cinfo-ftype::type ::valloc/Cinfo)
    (inline valloc/Cinfo-c-heap-format::bstring ::valloc/Cinfo)
    (inline valloc/Cinfo-effect::obj ::valloc/Cinfo)
    (inline valloc/Cinfo-effect-set! ::valloc/Cinfo ::obj)
    (inline valloc/Cinfo-expr*::pair-nil ::valloc/Cinfo)
    (inline valloc/Cinfo-expr*-set! ::valloc/Cinfo ::pair-nil)
    (inline valloc/Cinfo-key::obj ::valloc/Cinfo)
    (inline valloc/Cinfo-key-set! ::valloc/Cinfo ::obj)
    (inline valloc/Cinfo-side-effect?::obj ::valloc/Cinfo)
    (inline valloc/Cinfo-side-effect?-set! ::valloc/Cinfo ::obj)
    (inline valloc/Cinfo-type::type ::valloc/Cinfo)
    (inline valloc/Cinfo-type-set! ::valloc/Cinfo ::type)
    (inline valloc/Cinfo-loc::obj ::valloc/Cinfo))))

;; valloc/Cinfo+optim
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-valloc/Cinfo+optim::valloc/Cinfo+optim loc1317::obj type1318::type side-effect?1319::obj key1320::obj expr*1321::pair-nil effect1322::obj c-heap-format1323::bstring ftype1324::type otype1325::type approx1326::approx value-approx1327::approx lost-stamp1328::long owner1329::variable stackable?1330::bool stack-stamp1331::obj seen?1332::bool)
    (inline valloc/Cinfo+optim?::bool ::obj)
    (valloc/Cinfo+optim-nil::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-seen?::bool ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-seen?-set! ::valloc/Cinfo+optim ::bool)
    (inline valloc/Cinfo+optim-stack-stamp::obj ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-stack-stamp-set! ::valloc/Cinfo+optim ::obj)
    (inline valloc/Cinfo+optim-stackable?::bool ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-stackable?-set! ::valloc/Cinfo+optim ::bool)
    (inline valloc/Cinfo+optim-owner::variable ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-lost-stamp::long ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-lost-stamp-set! ::valloc/Cinfo+optim ::long)
    (inline valloc/Cinfo+optim-value-approx::approx ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-approx::approx ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-approx-set! ::valloc/Cinfo+optim ::approx)
    (inline valloc/Cinfo+optim-otype::type ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-ftype::type ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-c-heap-format::bstring ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-effect::obj ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-effect-set! ::valloc/Cinfo+optim ::obj)
    (inline valloc/Cinfo+optim-expr*::pair-nil ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-expr*-set! ::valloc/Cinfo+optim ::pair-nil)
    (inline valloc/Cinfo+optim-key::obj ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-key-set! ::valloc/Cinfo+optim ::obj)
    (inline valloc/Cinfo+optim-side-effect?::obj ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-side-effect?-set! ::valloc/Cinfo+optim ::obj)
    (inline valloc/Cinfo+optim-type::type ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-type-set! ::valloc/Cinfo+optim ::type)
    (inline valloc/Cinfo+optim-loc::obj ::valloc/Cinfo+optim)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; pragma/Cinfo
(define-inline (make-pragma/Cinfo::pragma/Cinfo loc1442::obj type1443::type side-effect?1444::obj key1445::obj expr*1446::pair-nil effect1447::obj format1448::bstring approx1449::approx) (instantiate::pragma/Cinfo (loc loc1442) (type type1443) (side-effect? side-effect?1444) (key key1445) (expr* expr*1446) (effect effect1447) (format format1448) (approx approx1449)))
(define-inline (pragma/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ pragma/Cinfo cfa_info3)))
(define (pragma/Cinfo-nil::pragma/Cinfo) (class-nil (@ pragma/Cinfo cfa_info3)))
(define-inline (pragma/Cinfo-approx::approx o::pragma/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (pragma/Cinfo-approx-set! o::pragma/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (pragma/Cinfo-format::bstring o::pragma/Cinfo) (-> |#!bigloo_wallow| o format))
(define-inline (pragma/Cinfo-format-set! o::pragma/Cinfo v::bstring) (set! (-> |#!bigloo_wallow| o format) v))
(define-inline (pragma/Cinfo-effect::obj o::pragma/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (pragma/Cinfo-effect-set! o::pragma/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (pragma/Cinfo-expr*::pair-nil o::pragma/Cinfo) (-> |#!bigloo_wallow| o expr*))
(define-inline (pragma/Cinfo-expr*-set! o::pragma/Cinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (pragma/Cinfo-key::obj o::pragma/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (pragma/Cinfo-key-set! o::pragma/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (pragma/Cinfo-side-effect?::obj o::pragma/Cinfo) (-> |#!bigloo_wallow| o side-effect?))
(define-inline (pragma/Cinfo-side-effect?-set! o::pragma/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect?) v))
(define-inline (pragma/Cinfo-type::type o::pragma/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (pragma/Cinfo-type-set! o::pragma/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (pragma/Cinfo-loc::obj o::pragma/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (pragma/Cinfo-loc-set! o::pragma/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; getfield/Cinfo
(define-inline (make-getfield/Cinfo::getfield/Cinfo loc1431::obj type1432::type side-effect?1433::obj key1434::obj expr*1435::pair-nil effect1436::obj fname1437::bstring ftype1438::type otype1439::type approx1440::approx) (instantiate::getfield/Cinfo (loc loc1431) (type type1432) (side-effect? side-effect?1433) (key key1434) (expr* expr*1435) (effect effect1436) (fname fname1437) (ftype ftype1438) (otype otype1439) (approx approx1440)))
(define-inline (getfield/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ getfield/Cinfo cfa_info3)))
(define (getfield/Cinfo-nil::getfield/Cinfo) (class-nil (@ getfield/Cinfo cfa_info3)))
(define-inline (getfield/Cinfo-approx::approx o::getfield/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (getfield/Cinfo-approx-set! o::getfield/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (getfield/Cinfo-otype::type o::getfield/Cinfo) (-> |#!bigloo_wallow| o otype))
(define-inline (getfield/Cinfo-otype-set! o::getfield/Cinfo v::type) (set! (-> |#!bigloo_wallow| o otype) v))
(define-inline (getfield/Cinfo-ftype::type o::getfield/Cinfo) (-> |#!bigloo_wallow| o ftype))
(define-inline (getfield/Cinfo-ftype-set! o::getfield/Cinfo v::type) (set! (-> |#!bigloo_wallow| o ftype) v))
(define-inline (getfield/Cinfo-fname::bstring o::getfield/Cinfo) (-> |#!bigloo_wallow| o fname))
(define-inline (getfield/Cinfo-fname-set! o::getfield/Cinfo v::bstring) (set! (-> |#!bigloo_wallow| o fname) v))
(define-inline (getfield/Cinfo-effect::obj o::getfield/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (getfield/Cinfo-effect-set! o::getfield/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (getfield/Cinfo-expr*::pair-nil o::getfield/Cinfo) (-> |#!bigloo_wallow| o expr*))
(define-inline (getfield/Cinfo-expr*-set! o::getfield/Cinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (getfield/Cinfo-key::obj o::getfield/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (getfield/Cinfo-key-set! o::getfield/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (getfield/Cinfo-side-effect?::obj o::getfield/Cinfo) (-> |#!bigloo_wallow| o side-effect?))
(define-inline (getfield/Cinfo-side-effect?-set! o::getfield/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect?) v))
(define-inline (getfield/Cinfo-type::type o::getfield/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (getfield/Cinfo-type-set! o::getfield/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (getfield/Cinfo-loc::obj o::getfield/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (getfield/Cinfo-loc-set! o::getfield/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; setfield/Cinfo
(define-inline (make-setfield/Cinfo::setfield/Cinfo loc1420::obj type1421::type side-effect?1422::obj key1423::obj expr*1424::pair-nil effect1425::obj fname1426::bstring ftype1427::type otype1428::type approx1429::approx) (instantiate::setfield/Cinfo (loc loc1420) (type type1421) (side-effect? side-effect?1422) (key key1423) (expr* expr*1424) (effect effect1425) (fname fname1426) (ftype ftype1427) (otype otype1428) (approx approx1429)))
(define-inline (setfield/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ setfield/Cinfo cfa_info3)))
(define (setfield/Cinfo-nil::setfield/Cinfo) (class-nil (@ setfield/Cinfo cfa_info3)))
(define-inline (setfield/Cinfo-approx::approx o::setfield/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (setfield/Cinfo-approx-set! o::setfield/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (setfield/Cinfo-otype::type o::setfield/Cinfo) (-> |#!bigloo_wallow| o otype))
(define-inline (setfield/Cinfo-otype-set! o::setfield/Cinfo v::type) (set! (-> |#!bigloo_wallow| o otype) v))
(define-inline (setfield/Cinfo-ftype::type o::setfield/Cinfo) (-> |#!bigloo_wallow| o ftype))
(define-inline (setfield/Cinfo-ftype-set! o::setfield/Cinfo v::type) (set! (-> |#!bigloo_wallow| o ftype) v))
(define-inline (setfield/Cinfo-fname::bstring o::setfield/Cinfo) (-> |#!bigloo_wallow| o fname))
(define-inline (setfield/Cinfo-fname-set! o::setfield/Cinfo v::bstring) (set! (-> |#!bigloo_wallow| o fname) v))
(define-inline (setfield/Cinfo-effect::obj o::setfield/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (setfield/Cinfo-effect-set! o::setfield/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (setfield/Cinfo-expr*::pair-nil o::setfield/Cinfo) (-> |#!bigloo_wallow| o expr*))
(define-inline (setfield/Cinfo-expr*-set! o::setfield/Cinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (setfield/Cinfo-key::obj o::setfield/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (setfield/Cinfo-key-set! o::setfield/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (setfield/Cinfo-side-effect?::obj o::setfield/Cinfo) (-> |#!bigloo_wallow| o side-effect?))
(define-inline (setfield/Cinfo-side-effect?-set! o::setfield/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect?) v))
(define-inline (setfield/Cinfo-type::type o::setfield/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (setfield/Cinfo-type-set! o::setfield/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (setfield/Cinfo-loc::obj o::setfield/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (setfield/Cinfo-loc-set! o::setfield/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; new/Cinfo
(define-inline (make-new/Cinfo::new/Cinfo loc1410::obj type1411::type side-effect?1412::obj key1413::obj expr*1414::pair-nil effect1415::obj args-type1416::pair-nil approx1417::approx) (instantiate::new/Cinfo (loc loc1410) (type type1411) (side-effect? side-effect?1412) (key key1413) (expr* expr*1414) (effect effect1415) (args-type args-type1416) (approx approx1417)))
(define-inline (new/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ new/Cinfo cfa_info3)))
(define (new/Cinfo-nil::new/Cinfo) (class-nil (@ new/Cinfo cfa_info3)))
(define-inline (new/Cinfo-approx::approx o::new/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (new/Cinfo-approx-set! o::new/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (new/Cinfo-args-type::pair-nil o::new/Cinfo) (-> |#!bigloo_wallow| o args-type))
(define-inline (new/Cinfo-args-type-set! o::new/Cinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o args-type) v))
(define-inline (new/Cinfo-effect::obj o::new/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (new/Cinfo-effect-set! o::new/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (new/Cinfo-expr*::pair-nil o::new/Cinfo) (-> |#!bigloo_wallow| o expr*))
(define-inline (new/Cinfo-expr*-set! o::new/Cinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (new/Cinfo-key::obj o::new/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (new/Cinfo-key-set! o::new/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (new/Cinfo-side-effect?::obj o::new/Cinfo) (-> |#!bigloo_wallow| o side-effect?))
(define-inline (new/Cinfo-side-effect?-set! o::new/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect?) v))
(define-inline (new/Cinfo-type::type o::new/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (new/Cinfo-type-set! o::new/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (new/Cinfo-loc::obj o::new/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (new/Cinfo-loc-set! o::new/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; isa/Cinfo
(define-inline (make-isa/Cinfo::isa/Cinfo loc1401::obj type1402::type side-effect?1403::obj key1404::obj expr*1405::pair-nil effect1406::obj class1407::type approx1408::approx) (instantiate::isa/Cinfo (loc loc1401) (type type1402) (side-effect? side-effect?1403) (key key1404) (expr* expr*1405) (effect effect1406) (class class1407) (approx approx1408)))
(define-inline (isa/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ isa/Cinfo cfa_info3)))
(define (isa/Cinfo-nil::isa/Cinfo) (class-nil (@ isa/Cinfo cfa_info3)))
(define-inline (isa/Cinfo-approx::approx o::isa/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (isa/Cinfo-approx-set! o::isa/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (isa/Cinfo-class::type o::isa/Cinfo) (-> |#!bigloo_wallow| o class))
(define-inline (isa/Cinfo-class-set! o::isa/Cinfo v::type) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (isa/Cinfo-effect::obj o::isa/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (isa/Cinfo-effect-set! o::isa/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (isa/Cinfo-expr*::pair-nil o::isa/Cinfo) (-> |#!bigloo_wallow| o expr*))
(define-inline (isa/Cinfo-expr*-set! o::isa/Cinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (isa/Cinfo-key::obj o::isa/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (isa/Cinfo-key-set! o::isa/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (isa/Cinfo-side-effect?::obj o::isa/Cinfo) (-> |#!bigloo_wallow| o side-effect?))
(define-inline (isa/Cinfo-side-effect?-set! o::isa/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect?) v))
(define-inline (isa/Cinfo-type::type o::isa/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (isa/Cinfo-type-set! o::isa/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (isa/Cinfo-loc::obj o::isa/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (isa/Cinfo-loc-set! o::isa/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; cast-null/Cinfo
(define-inline (make-cast-null/Cinfo::cast-null/Cinfo loc1393::obj type1394::type side-effect?1395::obj key1396::obj expr*1397::pair-nil effect1398::obj approx1399::approx) (instantiate::cast-null/Cinfo (loc loc1393) (type type1394) (side-effect? side-effect?1395) (key key1396) (expr* expr*1397) (effect effect1398) (approx approx1399)))
(define-inline (cast-null/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ cast-null/Cinfo cfa_info3)))
(define (cast-null/Cinfo-nil::cast-null/Cinfo) (class-nil (@ cast-null/Cinfo cfa_info3)))
(define-inline (cast-null/Cinfo-approx::approx o::cast-null/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (cast-null/Cinfo-approx-set! o::cast-null/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (cast-null/Cinfo-effect::obj o::cast-null/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (cast-null/Cinfo-effect-set! o::cast-null/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (cast-null/Cinfo-expr*::pair-nil o::cast-null/Cinfo) (-> |#!bigloo_wallow| o expr*))
(define-inline (cast-null/Cinfo-expr*-set! o::cast-null/Cinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (cast-null/Cinfo-key::obj o::cast-null/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (cast-null/Cinfo-key-set! o::cast-null/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (cast-null/Cinfo-side-effect?::obj o::cast-null/Cinfo) (-> |#!bigloo_wallow| o side-effect?))
(define-inline (cast-null/Cinfo-side-effect?-set! o::cast-null/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect?) v))
(define-inline (cast-null/Cinfo-type::type o::cast-null/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (cast-null/Cinfo-type-set! o::cast-null/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (cast-null/Cinfo-loc::obj o::cast-null/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (cast-null/Cinfo-loc-set! o::cast-null/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; vref/Cinfo
(define-inline (make-vref/Cinfo::vref/Cinfo loc1380::obj type1381::type side-effect?1382::obj key1383::obj expr*1384::pair-nil effect1385::obj c-format1386::bstring ftype1387::type otype1388::type vtype1389::type approx1390::approx tvector?1391::bool) (instantiate::vref/Cinfo (loc loc1380) (type type1381) (side-effect? side-effect?1382) (key key1383) (expr* expr*1384) (effect effect1385) (c-format c-format1386) (ftype ftype1387) (otype otype1388) (vtype vtype1389) (approx approx1390) (tvector? tvector?1391)))
(define-inline (vref/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ vref/Cinfo cfa_info3)))
(define (vref/Cinfo-nil::vref/Cinfo) (class-nil (@ vref/Cinfo cfa_info3)))
(define-inline (vref/Cinfo-tvector?::bool o::vref/Cinfo) (-> |#!bigloo_wallow| o tvector?))
(define-inline (vref/Cinfo-tvector?-set! o::vref/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o tvector?) v))
(define-inline (vref/Cinfo-approx::approx o::vref/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (vref/Cinfo-approx-set! o::vref/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (vref/Cinfo-vtype::type o::vref/Cinfo) (-> |#!bigloo_wallow| o vtype))
(define-inline (vref/Cinfo-vtype-set! o::vref/Cinfo v::type) (set! (-> |#!bigloo_wallow| o vtype) v))
(define-inline (vref/Cinfo-otype::type o::vref/Cinfo) (-> |#!bigloo_wallow| o otype))
(define-inline (vref/Cinfo-otype-set! o::vref/Cinfo v::type) (set! (-> |#!bigloo_wallow| o otype) v))
(define-inline (vref/Cinfo-ftype::type o::vref/Cinfo) (-> |#!bigloo_wallow| o ftype))
(define-inline (vref/Cinfo-ftype-set! o::vref/Cinfo v::type) (set! (-> |#!bigloo_wallow| o ftype) v))
(define-inline (vref/Cinfo-c-format::bstring o::vref/Cinfo) (-> |#!bigloo_wallow| o c-format))
(define-inline (vref/Cinfo-c-format-set! o::vref/Cinfo v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (vref/Cinfo-effect::obj o::vref/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (vref/Cinfo-effect-set! o::vref/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (vref/Cinfo-expr*::pair-nil o::vref/Cinfo) (-> |#!bigloo_wallow| o expr*))
(define-inline (vref/Cinfo-expr*-set! o::vref/Cinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (vref/Cinfo-key::obj o::vref/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (vref/Cinfo-key-set! o::vref/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (vref/Cinfo-side-effect?::obj o::vref/Cinfo) (-> |#!bigloo_wallow| o side-effect?))
(define-inline (vref/Cinfo-side-effect?-set! o::vref/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect?) v))
(define-inline (vref/Cinfo-type::type o::vref/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (vref/Cinfo-type-set! o::vref/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (vref/Cinfo-loc::obj o::vref/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (vref/Cinfo-loc-set! o::vref/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; vset!/Cinfo
(define-inline (make-vset!/Cinfo::vset!/Cinfo loc1367::obj type1368::type side-effect?1369::obj key1370::obj expr*1371::pair-nil effect1372::obj c-format1373::bstring ftype1374::type otype1375::type vtype1376::type approx1377::approx tvector?1378::bool) (instantiate::vset!/Cinfo (loc loc1367) (type type1368) (side-effect? side-effect?1369) (key key1370) (expr* expr*1371) (effect effect1372) (c-format c-format1373) (ftype ftype1374) (otype otype1375) (vtype vtype1376) (approx approx1377) (tvector? tvector?1378)))
(define-inline (vset!/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ vset!/Cinfo cfa_info3)))
(define (vset!/Cinfo-nil::vset!/Cinfo) (class-nil (@ vset!/Cinfo cfa_info3)))
(define-inline (vset!/Cinfo-tvector?::bool o::vset!/Cinfo) (-> |#!bigloo_wallow| o tvector?))
(define-inline (vset!/Cinfo-tvector?-set! o::vset!/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o tvector?) v))
(define-inline (vset!/Cinfo-approx::approx o::vset!/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (vset!/Cinfo-approx-set! o::vset!/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (vset!/Cinfo-vtype::type o::vset!/Cinfo) (-> |#!bigloo_wallow| o vtype))
(define-inline (vset!/Cinfo-vtype-set! o::vset!/Cinfo v::type) (set! (-> |#!bigloo_wallow| o vtype) v))
(define-inline (vset!/Cinfo-otype::type o::vset!/Cinfo) (-> |#!bigloo_wallow| o otype))
(define-inline (vset!/Cinfo-otype-set! o::vset!/Cinfo v::type) (set! (-> |#!bigloo_wallow| o otype) v))
(define-inline (vset!/Cinfo-ftype::type o::vset!/Cinfo) (-> |#!bigloo_wallow| o ftype))
(define-inline (vset!/Cinfo-ftype-set! o::vset!/Cinfo v::type) (set! (-> |#!bigloo_wallow| o ftype) v))
(define-inline (vset!/Cinfo-c-format::bstring o::vset!/Cinfo) (-> |#!bigloo_wallow| o c-format))
(define-inline (vset!/Cinfo-c-format-set! o::vset!/Cinfo v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (vset!/Cinfo-effect::obj o::vset!/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (vset!/Cinfo-effect-set! o::vset!/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (vset!/Cinfo-expr*::pair-nil o::vset!/Cinfo) (-> |#!bigloo_wallow| o expr*))
(define-inline (vset!/Cinfo-expr*-set! o::vset!/Cinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (vset!/Cinfo-key::obj o::vset!/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (vset!/Cinfo-key-set! o::vset!/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (vset!/Cinfo-side-effect?::obj o::vset!/Cinfo) (-> |#!bigloo_wallow| o side-effect?))
(define-inline (vset!/Cinfo-side-effect?-set! o::vset!/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect?) v))
(define-inline (vset!/Cinfo-type::type o::vset!/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (vset!/Cinfo-type-set! o::vset!/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (vset!/Cinfo-loc::obj o::vset!/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (vset!/Cinfo-loc-set! o::vset!/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; vlength/Cinfo
(define-inline (make-vlength/Cinfo::vlength/Cinfo loc1356::obj type1357::type side-effect?1358::obj key1359::obj expr*1360::pair-nil effect1361::obj c-format1362::bstring vtype1363::type approx1364::approx tvector?1365::bool) (instantiate::vlength/Cinfo (loc loc1356) (type type1357) (side-effect? side-effect?1358) (key key1359) (expr* expr*1360) (effect effect1361) (c-format c-format1362) (vtype vtype1363) (approx approx1364) (tvector? tvector?1365)))
(define-inline (vlength/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ vlength/Cinfo cfa_info3)))
(define (vlength/Cinfo-nil::vlength/Cinfo) (class-nil (@ vlength/Cinfo cfa_info3)))
(define-inline (vlength/Cinfo-tvector?::bool o::vlength/Cinfo) (-> |#!bigloo_wallow| o tvector?))
(define-inline (vlength/Cinfo-tvector?-set! o::vlength/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o tvector?) v))
(define-inline (vlength/Cinfo-approx::approx o::vlength/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (vlength/Cinfo-approx-set! o::vlength/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (vlength/Cinfo-vtype::type o::vlength/Cinfo) (-> |#!bigloo_wallow| o vtype))
(define-inline (vlength/Cinfo-vtype-set! o::vlength/Cinfo v::type) (set! (-> |#!bigloo_wallow| o vtype) v))
(define-inline (vlength/Cinfo-c-format::bstring o::vlength/Cinfo) (-> |#!bigloo_wallow| o c-format))
(define-inline (vlength/Cinfo-c-format-set! o::vlength/Cinfo v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (vlength/Cinfo-effect::obj o::vlength/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (vlength/Cinfo-effect-set! o::vlength/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (vlength/Cinfo-expr*::pair-nil o::vlength/Cinfo) (-> |#!bigloo_wallow| o expr*))
(define-inline (vlength/Cinfo-expr*-set! o::vlength/Cinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (vlength/Cinfo-key::obj o::vlength/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (vlength/Cinfo-key-set! o::vlength/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (vlength/Cinfo-side-effect?::obj o::vlength/Cinfo) (-> |#!bigloo_wallow| o side-effect?))
(define-inline (vlength/Cinfo-side-effect?-set! o::vlength/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect?) v))
(define-inline (vlength/Cinfo-type::type o::vlength/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (vlength/Cinfo-type-set! o::vlength/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (vlength/Cinfo-loc::obj o::vlength/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (vlength/Cinfo-loc-set! o::vlength/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; pre-valloc/Cinfo
(define-inline (make-pre-valloc/Cinfo::pre-valloc/Cinfo loc1345::obj type1346::type side-effect?1347::obj key1348::obj expr*1349::pair-nil effect1350::obj c-heap-format1351::bstring ftype1352::type otype1353::type owner1354::variable) (instantiate::pre-valloc/Cinfo (loc loc1345) (type type1346) (side-effect? side-effect?1347) (key key1348) (expr* expr*1349) (effect effect1350) (c-heap-format c-heap-format1351) (ftype ftype1352) (otype otype1353) (owner owner1354)))
(define-inline (pre-valloc/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ pre-valloc/Cinfo cfa_info3)))
(define (pre-valloc/Cinfo-nil::pre-valloc/Cinfo) (class-nil (@ pre-valloc/Cinfo cfa_info3)))
(define-inline (pre-valloc/Cinfo-owner::variable o::pre-valloc/Cinfo) (-> |#!bigloo_wallow| o owner))
(define-inline (pre-valloc/Cinfo-owner-set! o::pre-valloc/Cinfo v::variable) (set! (-> |#!bigloo_wallow| o owner) v))
(define-inline (pre-valloc/Cinfo-otype::type o::pre-valloc/Cinfo) (-> |#!bigloo_wallow| o otype))
(define-inline (pre-valloc/Cinfo-otype-set! o::pre-valloc/Cinfo v::type) (set! (-> |#!bigloo_wallow| o otype) v))
(define-inline (pre-valloc/Cinfo-ftype::type o::pre-valloc/Cinfo) (-> |#!bigloo_wallow| o ftype))
(define-inline (pre-valloc/Cinfo-ftype-set! o::pre-valloc/Cinfo v::type) (set! (-> |#!bigloo_wallow| o ftype) v))
(define-inline (pre-valloc/Cinfo-c-heap-format::bstring o::pre-valloc/Cinfo) (-> |#!bigloo_wallow| o c-heap-format))
(define-inline (pre-valloc/Cinfo-c-heap-format-set! o::pre-valloc/Cinfo v::bstring) (set! (-> |#!bigloo_wallow| o c-heap-format) v))
(define-inline (pre-valloc/Cinfo-effect::obj o::pre-valloc/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (pre-valloc/Cinfo-effect-set! o::pre-valloc/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (pre-valloc/Cinfo-expr*::pair-nil o::pre-valloc/Cinfo) (-> |#!bigloo_wallow| o expr*))
(define-inline (pre-valloc/Cinfo-expr*-set! o::pre-valloc/Cinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (pre-valloc/Cinfo-key::obj o::pre-valloc/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (pre-valloc/Cinfo-key-set! o::pre-valloc/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (pre-valloc/Cinfo-side-effect?::obj o::pre-valloc/Cinfo) (-> |#!bigloo_wallow| o side-effect?))
(define-inline (pre-valloc/Cinfo-side-effect?-set! o::pre-valloc/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect?) v))
(define-inline (pre-valloc/Cinfo-type::type o::pre-valloc/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (pre-valloc/Cinfo-type-set! o::pre-valloc/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (pre-valloc/Cinfo-loc::obj o::pre-valloc/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (pre-valloc/Cinfo-loc-set! o::pre-valloc/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; valloc/Cinfo
(define-inline (make-valloc/Cinfo::valloc/Cinfo loc1334::obj type1335::type side-effect?1336::obj key1337::obj expr*1338::pair-nil effect1339::obj c-heap-format1340::bstring ftype1341::type otype1342::type approx1343::approx) (instantiate::valloc/Cinfo (loc loc1334) (type type1335) (side-effect? side-effect?1336) (key key1337) (expr* expr*1338) (effect effect1339) (c-heap-format c-heap-format1340) (ftype ftype1341) (otype otype1342) (approx approx1343)))
(define-inline (valloc/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ valloc/Cinfo cfa_info3)))
(define (valloc/Cinfo-nil::valloc/Cinfo) (class-nil (@ valloc/Cinfo cfa_info3)))
(define-inline (valloc/Cinfo-approx::approx o::valloc/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (valloc/Cinfo-approx-set! o::valloc/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (valloc/Cinfo-otype::type o::valloc/Cinfo) (-> |#!bigloo_wallow| o otype))
(define-inline (valloc/Cinfo-otype-set! o::valloc/Cinfo v::type) (set! (-> |#!bigloo_wallow| o otype) v))
(define-inline (valloc/Cinfo-ftype::type o::valloc/Cinfo) (-> |#!bigloo_wallow| o ftype))
(define-inline (valloc/Cinfo-ftype-set! o::valloc/Cinfo v::type) (set! (-> |#!bigloo_wallow| o ftype) v))
(define-inline (valloc/Cinfo-c-heap-format::bstring o::valloc/Cinfo) (-> |#!bigloo_wallow| o c-heap-format))
(define-inline (valloc/Cinfo-c-heap-format-set! o::valloc/Cinfo v::bstring) (set! (-> |#!bigloo_wallow| o c-heap-format) v))
(define-inline (valloc/Cinfo-effect::obj o::valloc/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (valloc/Cinfo-effect-set! o::valloc/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (valloc/Cinfo-expr*::pair-nil o::valloc/Cinfo) (-> |#!bigloo_wallow| o expr*))
(define-inline (valloc/Cinfo-expr*-set! o::valloc/Cinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (valloc/Cinfo-key::obj o::valloc/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (valloc/Cinfo-key-set! o::valloc/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (valloc/Cinfo-side-effect?::obj o::valloc/Cinfo) (-> |#!bigloo_wallow| o side-effect?))
(define-inline (valloc/Cinfo-side-effect?-set! o::valloc/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect?) v))
(define-inline (valloc/Cinfo-type::type o::valloc/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (valloc/Cinfo-type-set! o::valloc/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (valloc/Cinfo-loc::obj o::valloc/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (valloc/Cinfo-loc-set! o::valloc/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; valloc/Cinfo+optim
(define-inline (make-valloc/Cinfo+optim::valloc/Cinfo+optim loc1317::obj type1318::type side-effect?1319::obj key1320::obj expr*1321::pair-nil effect1322::obj c-heap-format1323::bstring ftype1324::type otype1325::type approx1326::approx value-approx1327::approx lost-stamp1328::long owner1329::variable stackable?1330::bool stack-stamp1331::obj seen?1332::bool) (instantiate::valloc/Cinfo+optim (loc loc1317) (type type1318) (side-effect? side-effect?1319) (key key1320) (expr* expr*1321) (effect effect1322) (c-heap-format c-heap-format1323) (ftype ftype1324) (otype otype1325) (approx approx1326) (value-approx value-approx1327) (lost-stamp lost-stamp1328) (owner owner1329) (stackable? stackable?1330) (stack-stamp stack-stamp1331) (seen? seen?1332)))
(define-inline (valloc/Cinfo+optim?::bool obj::obj) ((@ isa? __object) obj (@ valloc/Cinfo+optim cfa_info3)))
(define (valloc/Cinfo+optim-nil::valloc/Cinfo+optim) (class-nil (@ valloc/Cinfo+optim cfa_info3)))
(define-inline (valloc/Cinfo+optim-seen?::bool o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o seen?))
(define-inline (valloc/Cinfo+optim-seen?-set! o::valloc/Cinfo+optim v::bool) (set! (-> |#!bigloo_wallow| o seen?) v))
(define-inline (valloc/Cinfo+optim-stack-stamp::obj o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o stack-stamp))
(define-inline (valloc/Cinfo+optim-stack-stamp-set! o::valloc/Cinfo+optim v::obj) (set! (-> |#!bigloo_wallow| o stack-stamp) v))
(define-inline (valloc/Cinfo+optim-stackable?::bool o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o stackable?))
(define-inline (valloc/Cinfo+optim-stackable?-set! o::valloc/Cinfo+optim v::bool) (set! (-> |#!bigloo_wallow| o stackable?) v))
(define-inline (valloc/Cinfo+optim-owner::variable o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o owner))
(define-inline (valloc/Cinfo+optim-owner-set! o::valloc/Cinfo+optim v::variable) (set! (-> |#!bigloo_wallow| o owner) v))
(define-inline (valloc/Cinfo+optim-lost-stamp::long o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o lost-stamp))
(define-inline (valloc/Cinfo+optim-lost-stamp-set! o::valloc/Cinfo+optim v::long) (set! (-> |#!bigloo_wallow| o lost-stamp) v))
(define-inline (valloc/Cinfo+optim-value-approx::approx o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o value-approx))
(define-inline (valloc/Cinfo+optim-value-approx-set! o::valloc/Cinfo+optim v::approx) (set! (-> |#!bigloo_wallow| o value-approx) v))
(define-inline (valloc/Cinfo+optim-approx::approx o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o approx))
(define-inline (valloc/Cinfo+optim-approx-set! o::valloc/Cinfo+optim v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (valloc/Cinfo+optim-otype::type o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o otype))
(define-inline (valloc/Cinfo+optim-otype-set! o::valloc/Cinfo+optim v::type) (set! (-> |#!bigloo_wallow| o otype) v))
(define-inline (valloc/Cinfo+optim-ftype::type o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o ftype))
(define-inline (valloc/Cinfo+optim-ftype-set! o::valloc/Cinfo+optim v::type) (set! (-> |#!bigloo_wallow| o ftype) v))
(define-inline (valloc/Cinfo+optim-c-heap-format::bstring o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o c-heap-format))
(define-inline (valloc/Cinfo+optim-c-heap-format-set! o::valloc/Cinfo+optim v::bstring) (set! (-> |#!bigloo_wallow| o c-heap-format) v))
(define-inline (valloc/Cinfo+optim-effect::obj o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o effect))
(define-inline (valloc/Cinfo+optim-effect-set! o::valloc/Cinfo+optim v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (valloc/Cinfo+optim-expr*::pair-nil o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o expr*))
(define-inline (valloc/Cinfo+optim-expr*-set! o::valloc/Cinfo+optim v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (valloc/Cinfo+optim-key::obj o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o key))
(define-inline (valloc/Cinfo+optim-key-set! o::valloc/Cinfo+optim v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (valloc/Cinfo+optim-side-effect?::obj o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o side-effect?))
(define-inline (valloc/Cinfo+optim-side-effect?-set! o::valloc/Cinfo+optim v::obj) (set! (-> |#!bigloo_wallow| o side-effect?) v))
(define-inline (valloc/Cinfo+optim-type::type o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o type))
(define-inline (valloc/Cinfo+optim-type-set! o::valloc/Cinfo+optim v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (valloc/Cinfo+optim-loc::obj o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o loc))
(define-inline (valloc/Cinfo+optim-loc-set! o::valloc/Cinfo+optim v::obj) (set! (-> |#!bigloo_wallow| o loc) v))
))
